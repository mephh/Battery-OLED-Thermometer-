
l432_thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  0800f078  0800f078  0001f078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b0  080105b0  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  080105b0  080105b0  000205b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105b8  080105b8  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105b8  080105b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105bc  080105bc  000205bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080105c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008970  20000214  080107d4  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b84  080107d4  00038b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003236d  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f29  00000000  00000000  000625b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  000684e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d40  00000000  00000000  0006a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dcc  00000000  00000000  0006c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029837  00000000  00000000  00093f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc5fd  00000000  00000000  000bd7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199dd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000953c  00000000  00000000  00199e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f060 	.word	0x0800f060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800f060 	.word	0x0800f060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
	for (int var = 0; var < 20; ++var) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	e014      	b.n	8000eda <vApplicationStackOverflowHook+0x3a>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <vApplicationStackOverflowHook+0x4c>)
 8000eb6:	f001 fe1d 	bl	8002af4 <HAL_GPIO_WritePin>
		osDelay(2000);
 8000eba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ebe:	f008 fcf3 	bl	80098a8 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <vApplicationStackOverflowHook+0x4c>)
 8000ec8:	f001 fe14 	bl	8002af4 <HAL_GPIO_WritePin>
		osDelay(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed0:	f008 fcea 	bl	80098a8 <osDelay>
	for (int var = 0; var < 20; ++var) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b13      	cmp	r3, #19
 8000ede:	dde7      	ble.n	8000eb0 <vApplicationStackOverflowHook+0x10>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	48000400 	.word	0x48000400

08000ef0 <myprintf>:

void myprintf(const char *fmt, ...) {
 8000ef0:	b40f      	push	{r0, r1, r2, r3}
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <myprintf+0x44>)
 8000f08:	f00c f9e8 	bl	800d2dc <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <myprintf+0x44>)
 8000f0e:	f7ff f95f 	bl	80001d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <myprintf+0x44>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <myprintf+0x48>)
 8000f22:	f004 ff29 	bl	8005d78 <HAL_UART_Transmit>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr
 8000f34:	200004e4 	.word	0x200004e4
 8000f38:	20008638 	.word	0x20008638

08000f3c <GetSdProperties>:

void GetSdProperties(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8000f42:	af00      	add	r7, sp, #0
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000f44:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4925      	ldr	r1, [pc, #148]	; (8000fe0 <GetSdProperties+0xa4>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 fe39 	bl	8008bc4 <f_mount>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if (fres != FR_OK) {
 8000f58:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <GetSdProperties+0x32>
		while (1) {
			myprintf("f_mount error (%i)\r\n", fres);
 8000f60:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000f64:	4619      	mov	r1, r3
 8000f66:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <GetSdProperties+0xa8>)
 8000f68:	f7ff ffc2 	bl	8000ef0 <myprintf>
 8000f6c:	e7f8      	b.n	8000f60 <GetSdProperties+0x24>
	}

	//		//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS *getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000f6e:	463a      	mov	r2, r7
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <GetSdProperties+0xa4>)
 8000f76:	f008 faaa 	bl	80094ce <f_getfree>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if (fres != FR_OK) {
 8000f80:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <GetSdProperties+0x5a>
		while (1) {
			myprintf("f_getfree error (%i)\r\n", fres);
 8000f88:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <GetSdProperties+0xac>)
 8000f90:	f7ff ffae 	bl	8000ef0 <myprintf>
 8000f94:	e7f8      	b.n	8000f88 <GetSdProperties+0x4c>
		}
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000f96:	463b      	mov	r3, r7
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	3b02      	subs	r3, #2
 8000f9e:	463a      	mov	r2, r7
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	8952      	ldrh	r2, [r2, #10]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	free_sectors = free_clusters * getFreeFs->csize;
 8000fac:	463b      	mov	r3, r7
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	895b      	ldrh	r3, [r3, #10]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	fb03 f302 	mul.w	r3, r3, r2
 8000fbc:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
	myprintf(
 8000fc0:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000fc4:	0859      	lsrs	r1, r3, #1
 8000fc6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <GetSdProperties+0xb0>)
 8000fd0:	f7ff ff8e 	bl	8000ef0 <myprintf>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);
}
 8000fd4:	bf00      	nop
 8000fd6:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800f0ac 	.word	0x0800f0ac
 8000fe4:	0800f0b0 	.word	0x0800f0b0
 8000fe8:	0800f0c8 	.word	0x0800f0c8
 8000fec:	0800f0e0 	.word	0x0800f0e0

08000ff0 <CreateSDCardLogFile>:

void CreateSDCardLogFile(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	//Open the file system
	osSemaphoreWait(spiSemHandle, osWaitForever);
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <CreateSDCardLogFile+0x7c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f008 fc99 	bl	8009934 <osSemaphoreWait>
	fres = f_mount(&FatFs, "/", 1); //1=mount now
 8001002:	2201      	movs	r2, #1
 8001004:	491a      	ldr	r1, [pc, #104]	; (8001070 <CreateSDCardLogFile+0x80>)
 8001006:	481b      	ldr	r0, [pc, #108]	; (8001074 <CreateSDCardLogFile+0x84>)
 8001008:	f007 fddc 	bl	8008bc4 <f_mount>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <CreateSDCardLogFile+0x88>)
 8001012:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <CreateSDCardLogFile+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <CreateSDCardLogFile+0x3a>
		while (1) {
			myprintf("f_mount error (%i)\r\n", fres);
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <CreateSDCardLogFile+0x88>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <CreateSDCardLogFile+0x8c>)
 8001024:	f7ff ff64 	bl	8000ef0 <myprintf>
 8001028:	e7f8      	b.n	800101c <CreateSDCardLogFile+0x2c>
		}
	}
	//create file
	fres = f_open(&fil, logfileName,
 800102a:	221a      	movs	r2, #26
 800102c:	4914      	ldr	r1, [pc, #80]	; (8001080 <CreateSDCardLogFile+0x90>)
 800102e:	4815      	ldr	r0, [pc, #84]	; (8001084 <CreateSDCardLogFile+0x94>)
 8001030:	f007 fe2c 	bl	8008c8c <f_open>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <CreateSDCardLogFile+0x88>)
 800103a:	701a      	strb	r2, [r3, #0]
			FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	if (fres == FR_OK) {
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <CreateSDCardLogFile+0x88>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <CreateSDCardLogFile+0x5c>
		myprintf("I was able to open 'LogData.txt' for writing\r\n");
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <CreateSDCardLogFile+0x98>)
 8001046:	f7ff ff53 	bl	8000ef0 <myprintf>
 800104a:	e005      	b.n	8001058 <CreateSDCardLogFile+0x68>
	} else {
		myprintf("f_open error during file creation (%i)\r\n", fres);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <CreateSDCardLogFile+0x88>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <CreateSDCardLogFile+0x9c>)
 8001054:	f7ff ff4c 	bl	8000ef0 <myprintf>
	}

	//Close your file!
	f_close(&fil);
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <CreateSDCardLogFile+0x94>)
 800105a:	f008 fa09 	bl	8009470 <f_close>
	osSemaphoreRelease(spiSemHandle);
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <CreateSDCardLogFile+0x7c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f008 fcb4 	bl	80099d0 <osSemaphoreRelease>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200082f0 	.word	0x200082f0
 8001070:	0800f128 	.word	0x0800f128
 8001074:	200080b8 	.word	0x200080b8
 8001078:	20008304 	.word	0x20008304
 800107c:	0800f0b0 	.word	0x0800f0b0
 8001080:	20000008 	.word	0x20000008
 8001084:	20008308 	.word	0x20008308
 8001088:	0800f12c 	.word	0x0800f12c
 800108c:	0800f15c 	.word	0x0800f15c

08001090 <UpdateLogFile>:

void UpdateLogFile(void) {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af04      	add	r7, sp, #16
	//some variables for FatFs

	BYTE sensorData[30];
	memset(sensorData, 0, sizeof sensorData);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	221e      	movs	r2, #30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00b f9bf 	bl	800c422 <memset>
	UINT bytesWrote;
	osSemaphoreWait(spiSemHandle, osWaitForever);
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <UpdateLogFile+0xf8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	4618      	mov	r0, r3
 80010ae:	f008 fc41 	bl	8009934 <osSemaphoreWait>
	//store sht data
	snprintf((char*) sensorData, sizeof(sensorData), "Temp:%.3f | Hum:%.3f\n",
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <UpdateLogFile+0xfc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa46 	bl	8000548 <__aeabi_f2d>
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <UpdateLogFile+0x100>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	f107 0008 	add.w	r0, r7, #8
 80010d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010d6:	e9cd 4500 	strd	r4, r5, [sp]
 80010da:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <UpdateLogFile+0x104>)
 80010dc:	211e      	movs	r1, #30
 80010de:	f00c f859 	bl	800d194 <sniprintf>
			temp, hum);
	fres = f_mount(&FatFs, "/", 1); //1=mount now
 80010e2:	2201      	movs	r2, #1
 80010e4:	492c      	ldr	r1, [pc, #176]	; (8001198 <UpdateLogFile+0x108>)
 80010e6:	482d      	ldr	r0, [pc, #180]	; (800119c <UpdateLogFile+0x10c>)
 80010e8:	f007 fd6c 	bl	8008bc4 <f_mount>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <UpdateLogFile+0x110>)
 80010f2:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <UpdateLogFile+0x110>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <UpdateLogFile+0x78>
//		while (1) {
		myprintf("f_mount error (%i)\r\n", fres);
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <UpdateLogFile+0x110>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4828      	ldr	r0, [pc, #160]	; (80011a4 <UpdateLogFile+0x114>)
 8001104:	f7ff fef4 	bl	8000ef0 <myprintf>
//		}
	}
	fres = f_open(&fil, logfileName, FA_OPEN_APPEND | FA_WRITE);
 8001108:	2232      	movs	r2, #50	; 0x32
 800110a:	4927      	ldr	r1, [pc, #156]	; (80011a8 <UpdateLogFile+0x118>)
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <UpdateLogFile+0x11c>)
 800110e:	f007 fdbd 	bl	8008c8c <f_open>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <UpdateLogFile+0x110>)
 8001118:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <UpdateLogFile+0x110>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <UpdateLogFile+0x9e>
		myprintf("can't open file to append. Err code:%i", fres);
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <UpdateLogFile+0x110>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <UpdateLogFile+0x120>)
 800112a:	f7ff fee1 	bl	8000ef0 <myprintf>
	}
	myprintf("file to store in:%s", &logfileName);
 800112e:	491e      	ldr	r1, [pc, #120]	; (80011a8 <UpdateLogFile+0x118>)
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <UpdateLogFile+0x124>)
 8001132:	f7ff fedd 	bl	8000ef0 <myprintf>
	fres = f_write(&fil, sensorData, 30, &bytesWrote);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	f107 0108 	add.w	r1, r7, #8
 800113c:	221e      	movs	r2, #30
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <UpdateLogFile+0x11c>)
 8001140:	f007 ff69 	bl	8009016 <f_write>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <UpdateLogFile+0x110>)
 800114a:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <UpdateLogFile+0x110>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <UpdateLogFile+0xd0>
		myprintf("Wrote %i bytes to 'logdata.txt'!\r\n", bytesWrote);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <UpdateLogFile+0x128>)
 800115a:	f7ff fec9 	bl	8000ef0 <myprintf>
 800115e:	e007      	b.n	8001170 <UpdateLogFile+0xe0>
	} else {
		myprintf(
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <UpdateLogFile+0x110>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	461a      	mov	r2, r3
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <UpdateLogFile+0x12c>)
 800116c:	f7ff fec0 	bl	8000ef0 <myprintf>
				"f_write error during sht data storing (err code:%i | byteswritten:%i)\r\n",
				fres, bytesWrote);
	}
	//Close your file!
	f_close(&fil);
 8001170:	480e      	ldr	r0, [pc, #56]	; (80011ac <UpdateLogFile+0x11c>)
 8001172:	f008 f97d 	bl	8009470 <f_close>

	osSemaphoreRelease(spiSemHandle);
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <UpdateLogFile+0xf8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f008 fc28 	bl	80099d0 <osSemaphoreRelease>
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	200082f0 	.word	0x200082f0
 800118c:	200082ec 	.word	0x200082ec
 8001190:	200080b4 	.word	0x200080b4
 8001194:	0800f188 	.word	0x0800f188
 8001198:	0800f128 	.word	0x0800f128
 800119c:	200080b8 	.word	0x200080b8
 80011a0:	20008304 	.word	0x20008304
 80011a4:	0800f0b0 	.word	0x0800f0b0
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20008308 	.word	0x20008308
 80011b0:	0800f1a0 	.word	0x0800f1a0
 80011b4:	0800f1c8 	.word	0x0800f1c8
 80011b8:	0800f1dc 	.word	0x0800f1dc
 80011bc:	0800f200 	.word	0x0800f200

080011c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <vApplicationGetIdleTaskMemory+0x2c>)
 80011d0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <vApplicationGetIdleTaskMemory+0x30>)
 80011d6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000230 	.word	0x20000230
 80011f0:	200002e4 	.word	0x200002e4

080011f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b0a0      	sub	sp, #128	; 0x80
 80011f8:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of i2cSem */
  osSemaphoreDef(i2cSem);
 80011fa:	2300      	movs	r3, #0
 80011fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80011fe:	2300      	movs	r3, #0
 8001200:	67fb      	str	r3, [r7, #124]	; 0x7c
  i2cSemHandle = osSemaphoreCreate(osSemaphore(i2cSem), 1);
 8001202:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001206:	2101      	movs	r1, #1
 8001208:	4618      	mov	r0, r3
 800120a:	f008 fb61 	bl	80098d0 <osSemaphoreCreate>
 800120e:	4603      	mov	r3, r0
 8001210:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <MX_FREERTOS_Init+0xd8>)
 8001212:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiSem */
  osSemaphoreDef(spiSem);
 8001214:	2300      	movs	r3, #0
 8001216:	673b      	str	r3, [r7, #112]	; 0x70
 8001218:	2300      	movs	r3, #0
 800121a:	677b      	str	r3, [r7, #116]	; 0x74
  spiSemHandle = osSemaphoreCreate(osSemaphore(spiSem), 1);
 800121c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fb54 	bl	80098d0 <osSemaphoreCreate>
 8001228:	4603      	mov	r3, r0
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <MX_FREERTOS_Init+0xdc>)
 800122c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitDevicesTask */
  osThreadDef(InitDevicesTask, InitDevices_task, osPriorityRealtime, 0, 512);
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <MX_FREERTOS_Init+0xe0>)
 8001230:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001234:	461d      	mov	r5, r3
 8001236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitDevicesTaskHandle = osThreadCreate(osThread(InitDevicesTask), NULL);
 8001242:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f008 fad5 	bl	80097f8 <osThreadCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <MX_FREERTOS_Init+0xe4>)
 8001252:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadSHTTask */
  osThreadDef(ReadSHTTask, ReadSHT_task, osPriorityLow, 0, 128);
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_FREERTOS_Init+0xe8>)
 8001256:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800125a:	461d      	mov	r5, r3
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSHTTaskHandle = osThreadCreate(osThread(ReadSHTTask), NULL);
 8001268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f008 fac2 	bl	80097f8 <osThreadCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <MX_FREERTOS_Init+0xec>)
 8001278:	6013      	str	r3, [r2, #0]

  /* definition and creation of DisplayDataTask */
  osThreadDef(DisplayDataTask, DisplayData_task, osPriorityHigh, 0, 512);
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_FREERTOS_Init+0xf0>)
 800127c:	f107 041c 	add.w	r4, r7, #28
 8001280:	461d      	mov	r5, r3
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800128a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayDataTaskHandle = osThreadCreate(osThread(DisplayDataTask), NULL);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f008 faaf 	bl	80097f8 <osThreadCreate>
 800129a:	4603      	mov	r3, r0
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_FREERTOS_Init+0xf4>)
 800129e:	6013      	str	r3, [r2, #0]

  /* definition and creation of StoreSD */
  osThreadDef(StoreSD, StoreSD_task, osPriorityLow, 0, 1024);
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_FREERTOS_Init+0xf8>)
 80012a2:	463c      	mov	r4, r7
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StoreSDHandle = osThreadCreate(osThread(StoreSD), NULL);
 80012b2:	463b      	mov	r3, r7
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f008 fa9e 	bl	80097f8 <osThreadCreate>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <MX_FREERTOS_Init+0xfc>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012c2:	bf00      	nop
 80012c4:	3780      	adds	r7, #128	; 0x80
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20008538 	.word	0x20008538
 80012d0:	200082f0 	.word	0x200082f0
 80012d4:	0800f248 	.word	0x0800f248
 80012d8:	200082f4 	.word	0x200082f4
 80012dc:	0800f264 	.word	0x0800f264
 80012e0:	20008300 	.word	0x20008300
 80012e4:	0800f280 	.word	0x0800f280
 80012e8:	200082f8 	.word	0x200082f8
 80012ec:	0800f29c 	.word	0x0800f29c
 80012f0:	200082fc 	.word	0x200082fc

080012f4 <InitDevices_task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitDevices_task */
void InitDevices_task(void const * argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InitDevices_task */
	/* Infinite loop */
	for (;;) {
		//init oled
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2108      	movs	r1, #8
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <InitDevices_task+0x74>)
 8001302:	f001 fbf7 	bl	8002af4 <HAL_GPIO_WritePin>
		ssd1306_Init();
 8001306:	f000 fc4f 	bl	8001ba8 <ssd1306_Init>
		//init sht31
		if (!sht3x_init(&handle)) {
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <InitDevices_task+0x78>)
 800130c:	f000 fad2 	bl	80018b4 <sht3x_init>
 8001310:	4603      	mov	r3, r0
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01f      	beq.n	800135c <InitDevices_task+0x68>
			myprintf("SHT3x access failed.\n\r");
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <InitDevices_task+0x7c>)
 800131e:	f7ff fde7 	bl	8000ef0 <myprintf>
			for (int var = 0; var < 50; ++var) {
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e012      	b.n	800134e <InitDevices_task+0x5a>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2108      	movs	r1, #8
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <InitDevices_task+0x74>)
 800132e:	f001 fbe1 	bl	8002af4 <HAL_GPIO_WritePin>
				osDelay(50);
 8001332:	2032      	movs	r0, #50	; 0x32
 8001334:	f008 fab8 	bl	80098a8 <osDelay>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2108      	movs	r1, #8
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <InitDevices_task+0x74>)
 800133e:	f001 fbd9 	bl	8002af4 <HAL_GPIO_WritePin>
				osDelay(50);
 8001342:	2032      	movs	r0, #50	; 0x32
 8001344:	f008 fab0 	bl	80098a8 <osDelay>
			for (int var = 0; var < 50; ++var) {
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b31      	cmp	r3, #49	; 0x31
 8001352:	dde9      	ble.n	8001328 <InitDevices_task+0x34>
			}
			//init sd card
			GetSdProperties();
 8001354:	f7ff fdf2 	bl	8000f3c <GetSdProperties>
			CreateSDCardLogFile();
 8001358:	f7ff fe4a 	bl	8000ff0 <CreateSDCardLogFile>
		}
		osThreadTerminate(InitDevicesTaskHandle);
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <InitDevices_task+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f008 fa95 	bl	8009890 <osThreadTerminate>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001366:	e7c9      	b.n	80012fc <InitDevices_task+0x8>
 8001368:	48000400 	.word	0x48000400
 800136c:	20000000 	.word	0x20000000
 8001370:	0800f2b8 	.word	0x0800f2b8
 8001374:	200082f4 	.word	0x200082f4

08001378 <ReadSHT_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReadSHT_task */
void ReadSHT_task(void const * argument)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadSHT_task */

	/* Infinite loop */
	for (;;) {
		//read sensor data and store values
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <ReadSHT_task+0x34>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	4618      	mov	r0, r3
 800138a:	f008 fad3 	bl	8009934 <osSemaphoreWait>
		sht3x_read_temperature_and_humidity(&handle, &temp, &hum);
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <ReadSHT_task+0x38>)
 8001390:	4908      	ldr	r1, [pc, #32]	; (80013b4 <ReadSHT_task+0x3c>)
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <ReadSHT_task+0x40>)
 8001394:	f000 face 	bl	8001934 <sht3x_read_temperature_and_humidity>
		osSemaphoreRelease(i2cSemHandle);
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <ReadSHT_task+0x34>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f008 fb17 	bl	80099d0 <osSemaphoreRelease>
		osDelay(3000);
 80013a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013a6:	f008 fa7f 	bl	80098a8 <osDelay>
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 80013aa:	e7e9      	b.n	8001380 <ReadSHT_task+0x8>
 80013ac:	20008538 	.word	0x20008538
 80013b0:	200080b4 	.word	0x200080b4
 80013b4:	200082ec 	.word	0x200082ec
 80013b8:	20000000 	.word	0x20000000

080013bc <DisplayData_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayData_task */
void DisplayData_task(void const * argument)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayData_task */
	char temp_text[11];
	char hum_text[11];
	bool pxl = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]
	/* Infinite loop */
	for (;;) {
		snprintf(temp_text, sizeof(temp_text), "Temp: %.2f", temp);
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <DisplayData_task+0xd0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8bb 	bl	8000548 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	f107 0014 	add.w	r0, r7, #20
 80013da:	e9cd 2300 	strd	r2, r3, [sp]
 80013de:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <DisplayData_task+0xd4>)
 80013e0:	210b      	movs	r1, #11
 80013e2:	f00b fed7 	bl	800d194 <sniprintf>
		snprintf(hum_text, sizeof(hum_text), "Hum:  %.2f", hum);
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <DisplayData_task+0xd8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	f107 0008 	add.w	r0, r7, #8
 80013f8:	e9cd 2300 	strd	r2, r3, [sp]
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <DisplayData_task+0xdc>)
 80013fe:	210b      	movs	r1, #11
 8001400:	f00b fec8 	bl	800d194 <sniprintf>
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <DisplayData_task+0xe0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	4618      	mov	r0, r3
 800140e:	f008 fa91 	bl	8009934 <osSemaphoreWait>
		ssd1306_SetCursor(3, 10);
 8001412:	210a      	movs	r1, #10
 8001414:	2003      	movs	r0, #3
 8001416:	f000 fd7d 	bl	8001f14 <ssd1306_SetCursor>
		ssd1306_WriteString(temp_text, Font_11x18, White);
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <DisplayData_task+0xe4>)
 800141c:	f107 0014 	add.w	r0, r7, #20
 8001420:	2301      	movs	r3, #1
 8001422:	ca06      	ldmia	r2, {r1, r2}
 8001424:	f000 fd50 	bl	8001ec8 <ssd1306_WriteString>
		ssd1306_SetCursor(3, 35);
 8001428:	2123      	movs	r1, #35	; 0x23
 800142a:	2003      	movs	r0, #3
 800142c:	f000 fd72 	bl	8001f14 <ssd1306_SetCursor>
		ssd1306_WriteString(hum_text, Font_11x18, White);
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <DisplayData_task+0xe4>)
 8001432:	f107 0008 	add.w	r0, r7, #8
 8001436:	2301      	movs	r3, #1
 8001438:	ca06      	ldmia	r2, {r1, r2}
 800143a:	f000 fd45 	bl	8001ec8 <ssd1306_WriteString>
		ssd1306_DrawRectangle(0, 1, 127, 63, White);
 800143e:	2301      	movs	r3, #1
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	233f      	movs	r3, #63	; 0x3f
 8001444:	227f      	movs	r2, #127	; 0x7f
 8001446:	2101      	movs	r1, #1
 8001448:	2000      	movs	r0, #0
 800144a:	f000 fde7 	bl	800201c <ssd1306_DrawRectangle>
		ssd1306_DrawPixel(125, 25, pxl);
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	461a      	mov	r2, r3
 8001452:	2119      	movs	r1, #25
 8001454:	207d      	movs	r0, #125	; 0x7d
 8001456:	f000 fc5b 	bl	8001d10 <ssd1306_DrawPixel>
		ssd1306_UpdateScreen();
 800145a:	f000 fc31 	bl	8001cc0 <ssd1306_UpdateScreen>
		osSemaphoreRelease(i2cSemHandle);
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <DisplayData_task+0xe0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f008 fab4 	bl	80099d0 <osSemaphoreRelease>
		pxl = !pxl;
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf14      	ite	ne
 800146e:	2301      	movne	r3, #1
 8001470:	2300      	moveq	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	77fb      	strb	r3, [r7, #31]
 800147c:	7ffb      	ldrb	r3, [r7, #31]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	77fb      	strb	r3, [r7, #31]
		osDelay(100);
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f008 fa0f 	bl	80098a8 <osDelay>
		snprintf(temp_text, sizeof(temp_text), "Temp: %.2f", temp);
 800148a:	e79d      	b.n	80013c8 <DisplayData_task+0xc>
 800148c:	200082ec 	.word	0x200082ec
 8001490:	0800f2d0 	.word	0x0800f2d0
 8001494:	200080b4 	.word	0x200080b4
 8001498:	0800f2dc 	.word	0x0800f2dc
 800149c:	20008538 	.word	0x20008538
 80014a0:	20000014 	.word	0x20000014

080014a4 <StoreSD_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StoreSD_task */
void StoreSD_task(void const * argument)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StoreSD_task */
	/* Infinite loop */
	for (;;) {
		UpdateLogFile();
 80014ac:	f7ff fdf0 	bl	8001090 <UpdateLogFile>
		osDelay(10000);
 80014b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80014b4:	f008 f9f8 	bl	80098a8 <osDelay>
		UpdateLogFile();
 80014b8:	e7f8      	b.n	80014ac <StoreSD_task+0x8>
	...

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a27      	ldr	r2, [pc, #156]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a21      	ldr	r2, [pc, #132]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_GPIO_Init+0xb8>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_GPIO_Init+0xb8>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <MX_GPIO_Init+0xb8>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_GPIO_Init+0xb8>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2120      	movs	r1, #32
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 fae7 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2108      	movs	r1, #8
 800152a:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_GPIO_Init+0xbc>)
 800152c:	f001 fae2 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001530:	2320      	movs	r3, #32
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f001 f969 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800154e:	2308      	movs	r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0xbc>)
 8001566:	f001 f95b 	bl	8002820 <HAL_GPIO_Init>

}
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400

0800157c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_I2C1_Init+0x7c>)
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <MX_I2C1_Init+0x80>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_I2C1_Init+0x7c>)
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <MX_I2C1_Init+0x84>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_I2C1_Init+0x7c>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_I2C1_Init+0x7c>)
 8001594:	2201      	movs	r2, #1
 8001596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_I2C1_Init+0x7c>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015b8:	f001 fab4 	bl	8002b24 <HAL_I2C_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015c2:	f000 f901 	bl	80017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015ca:	f002 fa73 	bl	8003ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015d4:	f000 f8f8 	bl	80017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_I2C1_Init+0x7c>)
 80015dc:	f002 fab5 	bl	8003b4a <HAL_I2CEx_ConfigDigitalFilter>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 f8ef 	bl	80017c8 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015ee:	f002 faf9 	bl	8003be4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000853c 	.word	0x2000853c
 80015fc:	40005400 	.word	0x40005400
 8001600:	00100413 	.word	0x00100413

08001604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09e      	sub	sp, #120	; 0x78
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	2254      	movs	r2, #84	; 0x54
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00a fefc 	bl	800c422 <memset>
  if(i2cHandle->Instance==I2C1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <HAL_I2C_MspInit+0xa8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d137      	bne.n	80016a4 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001634:	2340      	movs	r3, #64	; 0x40
 8001636:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001638:	2300      	movs	r3, #0
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f9bb 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f000 f8bc 	bl	80017c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001668:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800166c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f001 f8ca 	bl	8002820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 8001692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_I2C_MspInit+0xac>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016a4:	bf00      	nop
 80016a6:	3778      	adds	r7, #120	; 0x78
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40021000 	.word	0x40021000

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f000 ff73 	bl	80025a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f810 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f7ff fefc 	bl	80014bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016c4:	f000 feaa 	bl	800241c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016c8:	f7ff ff58 	bl	800157c <MX_I2C1_Init>
  MX_SPI1_Init();
 80016cc:	f000 f9b0 	bl	8001a30 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016d0:	f004 ffa0 	bl	8006614 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016d4:	f7ff fd8e 	bl	80011f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016d8:	f008 f887 	bl	80097ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <main+0x28>
	...

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2244      	movs	r2, #68	; 0x44
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00a fe97 	bl	800c422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001706:	f002 faab 	bl	8003c60 <HAL_PWREx_ControlVoltageScaling>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001710:	f000 f85a 	bl	80017c8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001714:	f002 fa86 	bl	8003c24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <SystemClock_Config+0xc0>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <SystemClock_Config+0xc0>)
 8001720:	f023 0318 	bic.w	r3, r3, #24
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001728:	2314      	movs	r3, #20
 800172a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001738:	2360      	movs	r3, #96	; 0x60
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001740:	2301      	movs	r3, #1
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001748:	2310      	movs	r3, #16
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800174c:	2307      	movs	r3, #7
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001754:	2302      	movs	r3, #2
 8001756:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fad5 	bl	8003d0c <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001768:	f000 f82e 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001770:	2303      	movs	r3, #3
 8001772:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fee1 	bl	800454c <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001790:	f000 f81a 	bl	80017c8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001794:	f003 fb06 	bl	8004da4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	; 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b6:	f000 ff0d 	bl	80025d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40014400 	.word	0x40014400

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <Error_Handler+0x8>

080017d2 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 80017dc:	23ff      	movs	r3, #255	; 0xff
 80017de:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	e020      	b.n	8001828 <calculate_crc+0x56>
		crc ^= data[i];
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	4053      	eors	r3, r2
 80017f2:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e010      	b.n	800181c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80017fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da06      	bge.n	8001810 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800180c:	75fb      	strb	r3, [r7, #23]
 800180e:	e002      	b.n	8001816 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b07      	cmp	r3, #7
 8001820:	d9eb      	bls.n	80017fa <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	3301      	adds	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3da      	bcc.n	80017e6 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af02      	add	r7, sp, #8
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	733b      	strb	r3, [r7, #12]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	b299      	uxth	r1, r3
 8001866:	f107 020c 	add.w	r2, r7, #12
 800186a:	231e      	movs	r3, #30
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	f001 f9e8 	bl	8002c44 <HAL_I2C_Master_Transmit>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <sht3x_send_command+0x42>
	}

	return true;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	b29b      	uxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b29a      	uxth	r2, r3
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b29b      	uxth	r3, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af04      	add	r7, sp, #16
 80018ba:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <sht3x_init+0x1e>
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <sht3x_init+0x74>)
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <sht3x_init+0x78>)
 80018ca:	2138      	movs	r1, #56	; 0x38
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <sht3x_init+0x7c>)
 80018ce:	f00a fc2d 	bl	800c12c <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	889b      	ldrh	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	b299      	uxth	r1, r3
 80018de:	231e      	movs	r3, #30
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2303      	movs	r3, #3
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2302      	movs	r3, #2
 80018ee:	f24f 322d 	movw	r2, #62253	; 0xf32d
 80018f2:	f001 fca5 	bl	8003240 <HAL_I2C_Mem_Read>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e00e      	b.n	800191e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff63 	bl	80017d2 <calculate_crc>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <sht3x_init+0x68>
		return false;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <sht3x_init+0x6a>
	}

	return true;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	0800f2e8 	.word	0x0800f2e8
 800192c:	0800f39c 	.word	0x0800f39c
 8001930:	0800f328 	.word	0x0800f328

08001934 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001940:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff ff7a 	bl	800183e <sht3x_send_command>

	HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 fe62 	bl	8002614 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	b299      	uxth	r1, r3
 800195c:	f107 0214 	add.w	r2, r7, #20
 8001960:	231e      	movs	r3, #30
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2306      	movs	r3, #6
 8001966:	f001 fa61 	bl	8002e2c <HAL_I2C_Master_Receive>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001970:	2300      	movs	r3, #0
 8001972:	e050      	b.n	8001a16 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff29 	bl	80017d2 <calculate_crc>
 8001980:	4603      	mov	r3, r0
 8001982:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	3303      	adds	r3, #3
 800198a:	2102      	movs	r1, #2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff20 	bl	80017d2 <calculate_crc>
 8001992:	4603      	mov	r3, r0
 8001994:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	7ffa      	ldrb	r2, [r7, #31]
 800199a:	429a      	cmp	r2, r3
 800199c:	d103      	bne.n	80019a6 <sht3x_read_temperature_and_humidity+0x72>
 800199e:	7e7b      	ldrb	r3, [r7, #25]
 80019a0:	7fba      	ldrb	r2, [r7, #30]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e035      	b.n	8001a16 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80019aa:	7d3b      	ldrb	r3, [r7, #20]
 80019ac:	7d7a      	ldrb	r2, [r7, #21]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff69 	bl	8001888 <uint8_to_uint16>
 80019b6:	4603      	mov	r3, r0
 80019b8:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	7e3a      	ldrb	r2, [r7, #24]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff61 	bl	8001888 <uint8_to_uint16>
 80019c6:	4603      	mov	r3, r0
 80019c8:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 80019ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001a20 <sht3x_read_temperature_and_humidity+0xec>
 80019da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019de:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001a24 <sht3x_read_temperature_and_humidity+0xf0>
 80019e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a28 <sht3x_read_temperature_and_humidity+0xf4>
 80019ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 80019f4:	8b7b      	ldrh	r3, [r7, #26]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a2c <sht3x_read_temperature_and_humidity+0xf8>
 8001a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a06:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a24 <sht3x_read_temperature_and_humidity+0xf0>
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	432f0000 	.word	0x432f0000
 8001a24:	477fff00 	.word	0x477fff00
 8001a28:	42340000 	.word	0x42340000
 8001a2c:	42c80000 	.word	0x42c80000

08001a30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_SPI1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a66:	2230      	movs	r2, #48	; 0x30
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a90:	f003 fa8a 	bl	8004fa8 <HAL_SPI_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f7ff fe95 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20008588 	.word	0x20008588
 8001aa8:	40013000 	.word	0x40013000

08001aac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_SPI_MspInit+0x80>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d129      	bne.n	8001b22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001afe:	f241 0342 	movw	r3, #4162	; 0x1042
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b10:	2305      	movs	r3, #5
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f000 fe7f 	bl	8002820 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	40021000 	.word	0x40021000

08001b34 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	2301      	movs	r3, #1
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <ssd1306_WriteCommand+0x2c>)
 8001b64:	f001 fa58 	bl	8003018 <HAL_I2C_Mem_Write>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000853c 	.word	0x2000853c

08001b74 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	f04f 32ff 	mov.w	r2, #4294967295
 8001b86:	9202      	str	r2, [sp, #8]
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	2178      	movs	r1, #120	; 0x78
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <ssd1306_WriteData+0x30>)
 8001b96:	f001 fa3f 	bl	8003018 <HAL_I2C_Mem_Write>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000853c 	.word	0x2000853c

08001ba8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001bac:	f7ff ffc2 	bl	8001b34 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f000 fd2f 	bl	8002614 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 fa7a 	bl	80020b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001bbc:	2020      	movs	r0, #32
 8001bbe:	f7ff ffc1 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff ffbe 	bl	8001b44 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bc8:	20b0      	movs	r0, #176	; 0xb0
 8001bca:	f7ff ffbb 	bl	8001b44 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001bce:	20c8      	movs	r0, #200	; 0xc8
 8001bd0:	f7ff ffb8 	bl	8001b44 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff ffb5 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f7ff ffb2 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001be0:	2040      	movs	r0, #64	; 0x40
 8001be2:	f7ff ffaf 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001be6:	20ff      	movs	r0, #255	; 0xff
 8001be8:	f000 fa4f 	bl	800208a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001bec:	20a1      	movs	r0, #161	; 0xa1
 8001bee:	f7ff ffa9 	bl	8001b44 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001bf2:	20a6      	movs	r0, #166	; 0xa6
 8001bf4:	f7ff ffa6 	bl	8001b44 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001bf8:	20a8      	movs	r0, #168	; 0xa8
 8001bfa:	f7ff ffa3 	bl	8001b44 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001bfe:	203f      	movs	r0, #63	; 0x3f
 8001c00:	f7ff ffa0 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c04:	20a4      	movs	r0, #164	; 0xa4
 8001c06:	f7ff ff9d 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c0a:	20d3      	movs	r0, #211	; 0xd3
 8001c0c:	f7ff ff9a 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff ff97 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c16:	20d5      	movs	r0, #213	; 0xd5
 8001c18:	f7ff ff94 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c1c:	20f0      	movs	r0, #240	; 0xf0
 8001c1e:	f7ff ff91 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c22:	20d9      	movs	r0, #217	; 0xd9
 8001c24:	f7ff ff8e 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c28:	2022      	movs	r0, #34	; 0x22
 8001c2a:	f7ff ff8b 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c2e:	20da      	movs	r0, #218	; 0xda
 8001c30:	f7ff ff88 	bl	8001b44 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c34:	2012      	movs	r0, #18
 8001c36:	f7ff ff85 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c3a:	20db      	movs	r0, #219	; 0xdb
 8001c3c:	f7ff ff82 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c40:	2020      	movs	r0, #32
 8001c42:	f7ff ff7f 	bl	8001b44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c46:	208d      	movs	r0, #141	; 0x8d
 8001c48:	f7ff ff7c 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c4c:	2014      	movs	r0, #20
 8001c4e:	f7ff ff79 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001c52:	2001      	movs	r0, #1
 8001c54:	f000 fa2c 	bl	80020b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f80f 	bl	8001c7c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001c5e:	f000 f82f 	bl	8001cc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <ssd1306_Init+0xd0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <ssd1306_Init+0xd0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001c6e:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <ssd1306_Init+0xd0>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	711a      	strb	r2, [r3, #4]
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200009e4 	.word	0x200009e4

08001c7c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e00d      	b.n	8001ca8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <ssd1306_Fill+0x1a>
 8001c92:	2100      	movs	r1, #0
 8001c94:	e000      	b.n	8001c98 <ssd1306_Fill+0x1c>
 8001c96:	21ff      	movs	r1, #255	; 0xff
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <ssd1306_Fill+0x40>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d3ed      	bcc.n	8001c8c <ssd1306_Fill+0x10>
    }
    ssd1306_UpdateScreen();
 8001cb0:	f000 f806 	bl	8001cc0 <ssd1306_UpdateScreen>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200005e4 	.word	0x200005e4

08001cc0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	e016      	b.n	8001cfa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	3b50      	subs	r3, #80	; 0x50
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff36 	bl	8001b44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff33 	bl	8001b44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001cde:	2010      	movs	r0, #16
 8001ce0:	f7ff ff30 	bl	8001b44 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <ssd1306_UpdateScreen+0x4c>)
 8001cea:	4413      	add	r3, r2
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff40 	bl	8001b74 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d9e5      	bls.n	8001ccc <ssd1306_UpdateScreen+0xc>
    }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200005e4 	.word	0x200005e4

08001d10 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	71bb      	strb	r3, [r7, #6]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db3d      	blt.n	8001da6 <ssd1306_DrawPixel+0x96>
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d2e:	d83a      	bhi.n	8001da6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d11a      	bne.n	8001d6c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	01db      	lsls	r3, r3, #7
 8001d42:	4413      	add	r3, r2
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <ssd1306_DrawPixel+0xa4>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b259      	sxtb	r1, r3
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	4413      	add	r3, r2
 8001d64:	b2c9      	uxtb	r1, r1
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <ssd1306_DrawPixel+0xa4>)
 8001d68:	54d1      	strb	r1, [r2, r3]
 8001d6a:	e01d      	b.n	8001da8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	b2d8      	uxtb	r0, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	01db      	lsls	r3, r3, #7
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <ssd1306_DrawPixel+0xa4>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	b259      	sxtb	r1, r3
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2c9      	uxtb	r1, r1
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <ssd1306_DrawPixel+0xa4>)
 8001da2:	54d1      	strb	r1, [r2, r3]
 8001da4:	e000      	b.n	8001da8 <ssd1306_DrawPixel+0x98>
        return;
 8001da6:	bf00      	nop
    }
}
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200005e4 	.word	0x200005e4

08001db8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	1d38      	adds	r0, r7, #4
 8001dc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4623      	mov	r3, r4
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	d902      	bls.n	8001ddc <ssd1306_WriteChar+0x24>
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b7e      	cmp	r3, #126	; 0x7e
 8001dda:	d901      	bls.n	8001de0 <ssd1306_WriteChar+0x28>
        return 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e06d      	b.n	8001ebc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	793b      	ldrb	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	dc06      	bgt.n	8001dfc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001df0:	885b      	ldrh	r3, [r3, #2]
 8001df2:	461a      	mov	r2, r3
 8001df4:	797b      	ldrb	r3, [r7, #5]
 8001df6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	dd01      	ble.n	8001e00 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e05d      	b.n	8001ebc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	e04c      	b.n	8001ea0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	3b20      	subs	r3, #32
 8001e0c:	7979      	ldrb	r1, [r7, #5]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	440b      	add	r3, r1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	e034      	b.n	8001e90 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	b2d8      	uxtb	r0, r3
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	7bba      	ldrb	r2, [r7, #14]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7ff ff5b 	bl	8001d10 <ssd1306_DrawPixel>
 8001e5a:	e016      	b.n	8001e8a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b2d8      	uxtb	r0, r3
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001e6c:	885b      	ldrh	r3, [r3, #2]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b2d9      	uxtb	r1, r3
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	f7ff ff43 	bl	8001d10 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	793b      	ldrb	r3, [r7, #4]
 8001e92:	461a      	mov	r2, r3
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d3c5      	bcc.n	8001e26 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	797b      	ldrb	r3, [r7, #5]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d3ad      	bcc.n	8001e06 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	793b      	ldrb	r3, [r7, #4]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <ssd1306_WriteChar+0x10c>)
 8001eb8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	200009e4 	.word	0x200009e4

08001ec8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	1d38      	adds	r0, r7, #4
 8001ed2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ed6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001ed8:	e012      	b.n	8001f00 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	7818      	ldrb	r0, [r3, #0]
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	1d3a      	adds	r2, r7, #4
 8001ee2:	ca06      	ldmia	r2, {r1, r2}
 8001ee4:	f7ff ff68 	bl	8001db8 <ssd1306_WriteChar>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d002      	beq.n	8001efa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	e008      	b.n	8001f0c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e8      	bne.n	8001eda <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <ssd1306_SetCursor+0x2c>)
 8001f2a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <ssd1306_SetCursor+0x2c>)
 8001f32:	805a      	strh	r2, [r3, #2]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	200009e4 	.word	0x200009e4

08001f44 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	4603      	mov	r3, r0
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	717b      	strb	r3, [r7, #5]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001f62:	797a      	ldrb	r2, [r7, #5]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfb8      	it	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001f70:	793a      	ldrb	r2, [r7, #4]
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	425b      	neglt	r3, r3
 8001f7c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001f7e:	79fa      	ldrb	r2, [r7, #7]
 8001f80:	797b      	ldrb	r3, [r7, #5]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d201      	bcs.n	8001f8a <ssd1306_Line+0x46>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e001      	b.n	8001f8e <ssd1306_Line+0x4a>
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001f90:	79ba      	ldrb	r2, [r7, #6]
 8001f92:	793b      	ldrb	r3, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d201      	bcs.n	8001f9c <ssd1306_Line+0x58>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e001      	b.n	8001fa0 <ssd1306_Line+0x5c>
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001faa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fae:	7939      	ldrb	r1, [r7, #4]
 8001fb0:	797b      	ldrb	r3, [r7, #5]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff feac 	bl	8001d10 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001fb8:	e024      	b.n	8002004 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001fba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fbe:	79b9      	ldrb	r1, [r7, #6]
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fea4 	bl	8001d10 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dd08      	ble.n	8001fea <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	da08      	bge.n	8002004 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	4413      	add	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002004:	79fa      	ldrb	r2, [r7, #7]
 8002006:	797b      	ldrb	r3, [r7, #5]
 8002008:	429a      	cmp	r2, r3
 800200a:	d1d6      	bne.n	8001fba <ssd1306_Line+0x76>
 800200c:	79ba      	ldrb	r2, [r7, #6]
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d1d2      	bne.n	8001fba <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002014:	bf00      	nop
}
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af02      	add	r7, sp, #8
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	4603      	mov	r3, r0
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	460b      	mov	r3, r1
 8002034:	717b      	strb	r3, [r7, #5]
 8002036:	4613      	mov	r3, r2
 8002038:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800203a:	79bc      	ldrb	r4, [r7, #6]
 800203c:	797a      	ldrb	r2, [r7, #5]
 800203e:	79b9      	ldrb	r1, [r7, #6]
 8002040:	79f8      	ldrb	r0, [r7, #7]
 8002042:	7e3b      	ldrb	r3, [r7, #24]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	4623      	mov	r3, r4
 8002048:	f7ff ff7c 	bl	8001f44 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800204c:	793c      	ldrb	r4, [r7, #4]
 800204e:	797a      	ldrb	r2, [r7, #5]
 8002050:	79b9      	ldrb	r1, [r7, #6]
 8002052:	7978      	ldrb	r0, [r7, #5]
 8002054:	7e3b      	ldrb	r3, [r7, #24]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4623      	mov	r3, r4
 800205a:	f7ff ff73 	bl	8001f44 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800205e:	793c      	ldrb	r4, [r7, #4]
 8002060:	79fa      	ldrb	r2, [r7, #7]
 8002062:	7939      	ldrb	r1, [r7, #4]
 8002064:	7978      	ldrb	r0, [r7, #5]
 8002066:	7e3b      	ldrb	r3, [r7, #24]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4623      	mov	r3, r4
 800206c:	f7ff ff6a 	bl	8001f44 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002070:	79bc      	ldrb	r4, [r7, #6]
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	7939      	ldrb	r1, [r7, #4]
 8002076:	79f8      	ldrb	r0, [r7, #7]
 8002078:	7e3b      	ldrb	r3, [r7, #24]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4623      	mov	r3, r4
 800207e:	f7ff ff61 	bl	8001f44 <ssd1306_Line>

  return;
 8002082:	bf00      	nop
}
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002094:	2381      	movs	r3, #129	; 0x81
 8002096:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fd52 	bl	8001b44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fd4e 	bl	8001b44 <ssd1306_WriteCommand>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020c0:	23af      	movs	r3, #175	; 0xaf
 80020c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <ssd1306_SetDisplayOn+0x38>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	715a      	strb	r2, [r3, #5]
 80020ca:	e004      	b.n	80020d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80020cc:	23ae      	movs	r3, #174	; 0xae
 80020ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <ssd1306_SetDisplayOn+0x38>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fd33 	bl	8001b44 <ssd1306_WriteCommand>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200009e4 	.word	0x200009e4

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_MspInit+0x4c>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_MspInit+0x4c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6613      	str	r3, [r2, #96]	; 0x60
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_MspInit+0x4c>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_MspInit+0x4c>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_MspInit+0x4c>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_MspInit+0x4c>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	210f      	movs	r1, #15
 8002126:	f06f 0001 	mvn.w	r0, #1
 800212a:	f000 fb4f 	bl	80027cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	2019      	movs	r0, #25
 8002152:	f000 fb3b 	bl	80027cc <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002156:	2019      	movs	r0, #25
 8002158:	f000 fb54 	bl	8002804 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_InitTick+0x9c>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_InitTick+0x9c>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6613      	str	r3, [r2, #96]	; 0x60
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_InitTick+0x9c>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002174:	f107 0210 	add.w	r2, r7, #16
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fb8a 	bl	8004898 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002184:	f002 fb72 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8002188:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_InitTick+0xa0>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	3b01      	subs	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_InitTick+0xa4>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_InitTick+0xa8>)
 800219c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_InitTick+0xa4>)
 80021a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a4:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_InitTick+0xa4>)
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_InitTick+0xa4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_InitTick+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <HAL_InitTick+0xa4>)
 80021ba:	f003 fb0f 	bl	80057dc <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <HAL_InitTick+0xa4>)
 80021c6:	f003 fb6b 	bl	80058a0 <HAL_TIM_Base_Start_IT>
 80021ca:	4603      	mov	r3, r0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3730      	adds	r7, #48	; 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	200085ec 	.word	0x200085ec
 80021e4:	40014400 	.word	0x40014400

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>
	...

080021f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	for (int var = 0; var < 100; ++var) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	e012      	b.n	8002222 <HardFault_Handler+0x32>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2108      	movs	r1, #8
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <HardFault_Handler+0x40>)
 8002202:	f000 fc77 	bl	8002af4 <HAL_GPIO_WritePin>
		osDelay(200);
 8002206:	20c8      	movs	r0, #200	; 0xc8
 8002208:	f007 fb4e 	bl	80098a8 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2108      	movs	r1, #8
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <HardFault_Handler+0x40>)
 8002212:	f000 fc6f 	bl	8002af4 <HAL_GPIO_WritePin>
		osDelay(200);
 8002216:	20c8      	movs	r0, #200	; 0xc8
 8002218:	f007 fb46 	bl	80098a8 <osDelay>
	for (int var = 0; var < 100; ++var) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3301      	adds	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b63      	cmp	r3, #99	; 0x63
 8002226:	dde9      	ble.n	80021fc <HardFault_Handler+0xc>
	}

printf("hard error occured");
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <HardFault_Handler+0x44>)
 800222a:	f00a ff21 	bl	800d070 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x3e>
 8002230:	48000400 	.word	0x48000400
 8002234:	0800f33c 	.word	0x0800f33c

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800225e:	f003 fb73 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200085ec 	.word	0x200085ec

0800226c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_kill>:

int _kill(int pid, int sig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002286:	f009 ff6f 	bl	800c168 <__errno>
 800228a:	4603      	mov	r3, r0
 800228c:	2216      	movs	r2, #22
 800228e:	601a      	str	r2, [r3, #0]
	return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_exit>:

void _exit (int status)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffe7 	bl	800227c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ae:	e7fe      	b.n	80022ae <_exit+0x12>

080022b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e00a      	b.n	80022d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022c2:	f3af 8000 	nop.w
 80022c6:	4601      	mov	r1, r0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	b2ca      	uxtb	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf0      	blt.n	80022c2 <_read+0x12>
	}

return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e009      	b.n	8002310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	dbf1      	blt.n	80022fc <_write+0x12>
	}
	return len;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_close>:

int _close(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234a:	605a      	str	r2, [r3, #4]
	return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_isatty>:

int _isatty(int file)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return 1;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f009 fed4 	bl	800c168 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000c000 	.word	0x2000c000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	200009ec 	.word	0x200009ec
 80023f4:	20008b88 	.word	0x20008b88

080023f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <MX_USART2_UART_Init+0x5c>)
 8002424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002460:	f003 fc3c 	bl	8005cdc <HAL_UART_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800246a:	f7ff f9ad 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20008638 	.word	0x20008638
 8002478:	40004400 	.word	0x40004400

0800247c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b09e      	sub	sp, #120	; 0x78
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2254      	movs	r2, #84	; 0x54
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f009 ffc0 	bl	800c422 <memset>
  if(uartHandle->Instance==USART2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_UART_MspInit+0xcc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d148      	bne.n	800253e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fa7f 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024c4:	f7ff f980 	bl	80017c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_UART_MspInit+0xd0>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024f8:	2304      	movs	r3, #4
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002508:	2307      	movs	r3, #7
 800250a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002516:	f000 f983 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800251a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800252c:	2303      	movs	r3, #3
 800252e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002530:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253a:	f000 f971 	bl	8002820 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800253e:	bf00      	nop
 8002540:	3778      	adds	r7, #120	; 0x78
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40004400 	.word	0x40004400
 800254c:	40021000 	.word	0x40021000

08002550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002554:	f7ff ff50 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002558:	480c      	ldr	r0, [pc, #48]	; (800258c <LoopForever+0x6>)
  ldr r1, =_edata
 800255a:	490d      	ldr	r1, [pc, #52]	; (8002590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <LoopForever+0xe>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002560:	e002      	b.n	8002568 <LoopCopyDataInit>

08002562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002566:	3304      	adds	r3, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800256c:	d3f9      	bcc.n	8002562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002570:	4c0a      	ldr	r4, [pc, #40]	; (800259c <LoopForever+0x16>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002574:	e001      	b.n	800257a <LoopFillZerobss>

08002576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002578:	3204      	adds	r2, #4

0800257a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800257c:	d3fb      	bcc.n	8002576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257e:	f009 ff01 	bl	800c384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002582:	f7ff f897 	bl	80016b4 <main>

08002586 <LoopForever>:

LoopForever:
    b LoopForever
 8002586:	e7fe      	b.n	8002586 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002588:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800258c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002590:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002594:	080105c0 	.word	0x080105c0
  ldr r2, =_sbss
 8002598:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800259c:	20008b84 	.word	0x20008b84

080025a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC1_IRQHandler>

080025a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f902 	bl	80027b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b2:	200f      	movs	r0, #15
 80025b4:	f7ff fdc2 	bl	800213c <HAL_InitTick>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	e001      	b.n	80025c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025c4:	f7ff fd92 	bl	80020ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c8:	79fb      	ldrb	r3, [r7, #7]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000024 	.word	0x20000024
 80025f8:	200086bc 	.word	0x200086bc

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200086bc 	.word	0x200086bc

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff ffee 	bl	80025fc <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d005      	beq.n	800263a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_Delay+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263a:	bf00      	nop
 800263c:	f7ff ffde 	bl	80025fc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f7      	bhi.n	800263c <HAL_Delay+0x28>
  {
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000024 	.word	0x20000024

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	; (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff4c 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027de:	f7ff ff61 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 80027e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff ffb1 	bl	8002750 <NVIC_EncodePriority>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff80 	bl	80026fc <__NVIC_SetPriority>
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff54 	bl	80026c0 <__NVIC_EnableIRQ>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e148      	b.n	8002ac2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 813a 	beq.w	8002abc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d005      	beq.n	8002860 <HAL_GPIO_Init+0x40>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d130      	bne.n	80028c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002896:	2201      	movs	r2, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0201 	and.w	r2, r3, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d017      	beq.n	80028fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8094 	beq.w	8002abc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x2c0>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x2c0>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6613      	str	r3, [r2, #96]	; 0x60
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_GPIO_Init+0x2c0>)
 80029a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_GPIO_Init+0x2c4>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d6:	d00d      	beq.n	80029f4 <HAL_GPIO_Init+0x1d4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a43      	ldr	r2, [pc, #268]	; (8002ae8 <HAL_GPIO_Init+0x2c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x1d0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a42      	ldr	r2, [pc, #264]	; (8002aec <HAL_GPIO_Init+0x2cc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_GPIO_Init+0x1cc>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_Init+0x1d6>
 80029ec:	2307      	movs	r3, #7
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x1d6>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_Init+0x1d6>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a06:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <HAL_GPIO_Init+0x2c4>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a38:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f aeaf 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	48000400 	.word	0x48000400
 8002aec:	48000800 	.word	0x48000800
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e081      	b.n	8002c3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fd5a 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e006      	b.n	8002bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d104      	bne.n	8002bbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	460b      	mov	r3, r1
 8002c52:	817b      	strh	r3, [r7, #10]
 8002c54:	4613      	mov	r3, r2
 8002c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80da 	bne.w	8002e1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x30>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0d3      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7c:	f7ff fcbe 	bl	80025fc <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2319      	movs	r3, #25
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fcbc 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0be      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2221      	movs	r2, #33	; 0x21
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2bff      	cmp	r3, #255	; 0xff
 8002cce:	d90e      	bls.n	8002cee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 feb2 	bl	8003a50 <I2C_TransferConfig>
 8002cec:	e06c      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fea1 	bl	8003a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d0e:	e05b      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fcb9 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e07b      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d034      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d130      	bne.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc4b 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04d      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2bff      	cmp	r3, #255	; 0xff
 8002d88:	d90e      	bls.n	8002da8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fe55 	bl	8003a50 <I2C_TransferConfig>
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fe44 	bl	8003a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d19e      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6a39      	ldr	r1, [r7, #32]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fc98 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01a      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_I2C_Master_Transmit+0x1e4>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	80002000 	.word	0x80002000
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	f040 80db 	bne.w	8003004 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2C_Master_Receive+0x30>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0d4      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e64:	f7ff fbca 	bl	80025fc <HAL_GetTick>
 8002e68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2319      	movs	r3, #25
 8002e70:	2201      	movs	r2, #1
 8002e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fbc8 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0bf      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2222      	movs	r2, #34	; 0x22
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d90e      	bls.n	8002ed6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	8979      	ldrh	r1, [r7, #10]
 8002ec6:	4b52      	ldr	r3, [pc, #328]	; (8003010 <HAL_I2C_Master_Receive+0x1e4>)
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fdbe 	bl	8003a50 <I2C_TransferConfig>
 8002ed4:	e06d      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	8979      	ldrh	r1, [r7, #10]
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_I2C_Master_Receive+0x1e4>)
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fdad 	bl	8003a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ef6:	e05c      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	6a39      	ldr	r1, [r7, #32]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fc41 	bl	8003784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e07c      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d034      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0x186>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d130      	bne.n	8002fb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fb56 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e04d      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2bff      	cmp	r3, #255	; 0xff
 8002f72:	d90e      	bls.n	8002f92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	22ff      	movs	r2, #255	; 0xff
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	8979      	ldrh	r1, [r7, #10]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fd60 	bl	8003a50 <I2C_TransferConfig>
 8002f90:	e00f      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fd4f 	bl	8003a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d19d      	bne.n	8002ef8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6a39      	ldr	r1, [r7, #32]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fba3 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01a      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_I2C_Master_Receive+0x1e8>)
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	80002400 	.word	0x80002400
 8003014:	fe00e800 	.word	0xfe00e800

08003018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80f9 	bne.w	8003232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_I2C_Mem_Write+0x34>
 8003046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ed      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Write+0x4e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0e6      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800306e:	f7ff fac5 	bl	80025fc <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fac3 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d1      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2221      	movs	r2, #33	; 0x21
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b8:	88f8      	ldrh	r0, [r7, #6]
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f9d3 	bl	8003474 <I2C_RequestMemoryWrite>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0a9      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d90e      	bls.n	8003108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fca5 	bl	8003a50 <I2C_TransferConfig>
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fc94 	bl	8003a50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 faad 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fa3f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fc49 	bl	8003a50 <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fc38 	bl	8003a50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19e      	bne.n	8003128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa8c 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_I2C_Mem_Write+0x224>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80fd 	bne.w	8003462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_I2C_Mem_Read+0x34>
 800326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0f1      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Read+0x4e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ea      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003296:	f7ff f9b1 	bl	80025fc <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9af 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d5      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2222      	movs	r2, #34	; 0x22
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e0:	88f8      	ldrh	r0, [r7, #6]
 80032e2:	893a      	ldrh	r2, [r7, #8]
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f913 	bl	800351c <I2C_RequestMemoryRead>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ad      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d90e      	bls.n	8003330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb91 	bl	8003a50 <I2C_TransferConfig>
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fb80 	bl	8003a50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2200      	movs	r2, #0
 8003358:	2104      	movs	r1, #4
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f956 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07c      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d034      	beq.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d130      	bne.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f927 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e04d      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2bff      	cmp	r3, #255	; 0xff
 80033d0:	d90e      	bls.n	80033f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fb31 	bl	8003a50 <I2C_TransferConfig>
 80033ee:	e00f      	b.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fb20 	bl	8003a50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d19a      	bne.n	8003350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f974 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01a      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_I2C_Mem_Read+0x230>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	80002400 	.word	0x80002400
 8003470:	fe00e800 	.word	0xfe00e800

08003474 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	4b20      	ldr	r3, [pc, #128]	; (8003518 <I2C_RequestMemoryWrite+0xa4>)
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fad7 	bl	8003a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	69b9      	ldr	r1, [r7, #24]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8f0 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02c      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
 80034c6:	e015      	b.n	80034f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8d6 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e012      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f884 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	80002000 	.word	0x80002000

0800351c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <I2C_RequestMemoryRead+0xa4>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa84 	bl	8003a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f89d 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02c      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e015      	b.n	800359a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b29b      	uxth	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f883 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e012      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f831 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	80002000 	.word	0x80002000

080035c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	619a      	str	r2, [r3, #24]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e022      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d01e      	beq.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe ffe9 	bl	80025fc <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d113      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00f      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d0cd      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003698:	e02c      	b.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f8ea 	bl	8003878 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02a      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d01e      	beq.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe ffa1 	bl	80025fc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d1cb      	bne.n	800369a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003718:	e028      	b.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8aa 	bl	8003878 <I2C_IsErrorOccurred>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e026      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe ff65 	bl	80025fc <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d1cf      	bne.n	800371a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003790:	e064      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f86e 	bl	8003878 <I2C_IsErrorOccurred>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e062      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d138      	bne.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d105      	bne.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e04e      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d107      	bne.n	80037ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2210      	movs	r2, #16
 80037e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2204      	movs	r2, #4
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ea:	e002      	b.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2220      	movs	r2, #32
 80037f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003806:	400b      	ands	r3, r1
 8003808:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e022      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fee9 	bl	80025fc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d193      	bne.n	8003792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	fe00e800 	.word	0xfe00e800

08003878 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d075      	beq.n	8003990 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ac:	e056      	b.n	800395c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d052      	beq.n	800395c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fe fea1 	bl	80025fc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <I2C_IsErrorOccurred+0x54>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d147      	bne.n	800395c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ee:	d12e      	bne.n	800394e <I2C_IsErrorOccurred+0xd6>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f6:	d02a      	beq.n	800394e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d027      	beq.n	800394e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800390e:	f7fe fe75 	bl	80025fc <HAL_GetTick>
 8003912:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003914:	e01b      	b.n	800394e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003916:	f7fe fe71 	bl	80025fc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b19      	cmp	r3, #25
 8003922:	d914      	bls.n	800394e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b20      	cmp	r3, #32
 800395a:	d1dc      	bne.n	8003916 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d003      	beq.n	8003972 <I2C_IsErrorOccurred+0xfa>
 800396a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800396e:	2b00      	cmp	r3, #0
 8003970:	d09d      	beq.n	80038ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01c      	beq.n	8003a40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fddc 	bl	80035c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <I2C_IsErrorOccurred+0x1d4>)
 8003a18:	400b      	ands	r3, r1
 8003a1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	fe00e800 	.word	0xfe00e800

08003a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	817b      	strh	r3, [r7, #10]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a68:	7a7b      	ldrb	r3, [r7, #9]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a70:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a7e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	0d5b      	lsrs	r3, r3, #21
 8003a8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <I2C_TransferConfig+0x60>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	43db      	mvns	r3, r3
 8003a94:	ea02 0103 	and.w	r1, r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	03ff63ff 	.word	0x03ff63ff

08003ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d138      	bne.n	8003b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e032      	b.n	8003b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d139      	bne.n	8003bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e033      	b.n	8003bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2224      	movs	r2, #36	; 0x24
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	4905      	ldr	r1, [pc, #20]	; (8003c20 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40010000 	.word	0x40010000

08003c24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40007000 	.word	0x40007000

08003c44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40007000 	.word	0x40007000

08003c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6e:	d130      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7c:	d038      	beq.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2232      	movs	r2, #50	; 0x32
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca4:	e002      	b.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d102      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f2      	bne.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d110      	bne.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e00f      	b.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d007      	beq.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000
 8003d04:	2000001c 	.word	0x2000001c
 8003d08:	431bde83 	.word	0x431bde83

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f000 bc11 	b.w	8004542 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d20:	4ba0      	ldr	r3, [pc, #640]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2a:	4b9e      	ldr	r3, [pc, #632]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80e4 	beq.w	8003f0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4c>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	f040 808b 	bne.w	8003e66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f040 8087 	bne.w	8003e66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_OscConfig+0x64>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e3e8      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <HAL_RCC_OscConfig+0x7e>
 8003d80:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d88:	e005      	b.n	8003d96 <HAL_RCC_OscConfig+0x8a>
 8003d8a:	4b86      	ldr	r3, [pc, #536]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d223      	bcs.n	8003de2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fdac 	bl	80048fc <RCC_SetFlashLatencyFromMSIRange>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e3c9      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dae:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7c      	ldr	r2, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4977      	ldr	r1, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dcc:	4b75      	ldr	r3, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	4972      	ldr	r1, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
 8003de0:	e025      	b.n	8003e2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de2:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	496a      	ldr	r1, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	4965      	ldr	r1, [pc, #404]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fd6c 	bl	80048fc <RCC_SetFlashLatencyFromMSIRange>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e389      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e2e:	f000 fc6f 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	495a      	ldr	r1, [pc, #360]	; (8003fa8 <HAL_RCC_OscConfig+0x29c>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_RCC_OscConfig+0x2a0>)
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e4e:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x2a4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe f972 	bl	800213c <HAL_InitTick>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d052      	beq.n	8003f08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	e36d      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d032      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4c      	ldr	r2, [pc, #304]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fbbf 	bl	80025fc <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e82:	f7fe fbbb 	bl	80025fc <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e356      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3f      	ldr	r2, [pc, #252]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	493a      	ldr	r1, [pc, #232]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4935      	ldr	r1, [pc, #212]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e01a      	b.n	8003f0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ed4:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fb8c 	bl	80025fc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fb88 	bl	80025fc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e323      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1dc>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d073      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x21c>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d10e      	bne.n	8003f40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d063      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15f      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e300      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x24c>
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e01d      	b.n	8003f94 <HAL_RCC_OscConfig+0x288>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x270>
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0x288>
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fb2e 	bl	80025fc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa2:	e010      	b.n	8003fc6 <HAL_RCC_OscConfig+0x2ba>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08010104 	.word	0x08010104
 8003fac:	2000001c 	.word	0x2000001c
 8003fb0:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fb22 	bl	80025fc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e2bd      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	4baf      	ldr	r3, [pc, #700]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x2a8>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fb12 	bl	80025fc <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fb0e 	bl	80025fc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e2a9      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	4ba5      	ldr	r3, [pc, #660]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d0>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d060      	beq.n	80040cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x310>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d119      	bne.n	800404a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d116      	bne.n	800404a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800401c:	4b99      	ldr	r3, [pc, #612]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_OscConfig+0x328>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e286      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b93      	ldr	r3, [pc, #588]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4990      	ldr	r1, [pc, #576]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	e040      	b.n	80040cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d023      	beq.n	800409a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004052:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8b      	ldr	r2, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fe facd 	bl	80025fc <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004066:	f7fe fac9 	bl	80025fc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e264      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004084:	4b7f      	ldr	r3, [pc, #508]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	497c      	ldr	r1, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
 8004098:	e018      	b.n	80040cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409a:	4b7a      	ldr	r3, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a79      	ldr	r2, [pc, #484]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe faa9 	bl	80025fc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe faa5 	bl	80025fc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e240      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d03c      	beq.n	8004152 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01c      	beq.n	800411a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e6:	4a67      	ldr	r2, [pc, #412]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fe fa84 	bl	80025fc <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fa80 	bl	80025fc <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e21b      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800410a:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800410c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ef      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3ec>
 8004118:	e01b      	b.n	8004152 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800411c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fe fa67 	bl	80025fc <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004132:	f7fe fa63 	bl	80025fc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1fe      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004144:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ef      	bne.n	8004132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80a6 	beq.w	80042ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004160:	2300      	movs	r3, #0
 8004162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004164:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004170:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	4a43      	ldr	r2, [pc, #268]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	6593      	str	r3, [r2, #88]	; 0x58
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418c:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <HAL_RCC_OscConfig+0x57c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d118      	bne.n	80041ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_OscConfig+0x57c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <HAL_RCC_OscConfig+0x57c>)
 800419e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a4:	f7fe fa2a 	bl	80025fc <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ac:	f7fe fa26 	bl	80025fc <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1c1      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041be:	4b32      	ldr	r3, [pc, #200]	; (8004288 <HAL_RCC_OscConfig+0x57c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4d8>
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e2:	e024      	b.n	800422e <HAL_RCC_OscConfig+0x522>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d110      	bne.n	800420e <HAL_RCC_OscConfig+0x502>
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	4a24      	ldr	r2, [pc, #144]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420c:	e00f      	b.n	800422e <HAL_RCC_OscConfig+0x522>
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe f9e1 	bl	80025fc <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fe f9dd 	bl	80025fc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e176      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x578>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ed      	beq.n	800423e <HAL_RCC_OscConfig+0x532>
 8004262:	e01a      	b.n	800429a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fe f9ca 	bl	80025fc <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426a:	e00f      	b.n	800428c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe f9c6 	bl	80025fc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d906      	bls.n	800428c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e15f      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800428c:	4baa      	ldr	r3, [pc, #680]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e8      	bne.n	800426c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4ba5      	ldr	r3, [pc, #660]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	4aa4      	ldr	r2, [pc, #656]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d03c      	beq.n	8004332 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01c      	beq.n	80042fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042c0:	4b9d      	ldr	r3, [pc, #628]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c6:	4a9c      	ldr	r2, [pc, #624]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe f994 	bl	80025fc <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042d8:	f7fe f990 	bl	80025fc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e12b      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ea:	4b93      	ldr	r3, [pc, #588]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ef      	beq.n	80042d8 <HAL_RCC_OscConfig+0x5cc>
 80042f8:	e01b      	b.n	8004332 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042fa:	4b8f      	ldr	r3, [pc, #572]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80042fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004300:	4a8d      	ldr	r2, [pc, #564]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fe f977 	bl	80025fc <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004312:	f7fe f973 	bl	80025fc <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e10e      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004324:	4b84      	ldr	r3, [pc, #528]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ef      	bne.n	8004312 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8102 	beq.w	8004540 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b02      	cmp	r3, #2
 8004342:	f040 80c5 	bne.w	80044d0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004346:	4b7c      	ldr	r3, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f003 0203 	and.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	429a      	cmp	r2, r3
 8004358:	d12c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	3b01      	subs	r3, #1
 8004366:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d123      	bne.n	80043b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d11b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d113      	bne.n	80043b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	3b01      	subs	r3, #1
 800439a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d109      	bne.n	80043b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d067      	beq.n	8004484 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d062      	beq.n	8004480 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043ba:	4b5f      	ldr	r3, [pc, #380]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0bb      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ca:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5a      	ldr	r2, [pc, #360]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80043d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043d6:	f7fe f911 	bl	80025fc <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043de:	f7fe f90d 	bl	80025fc <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0a8      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	4b51      	ldr	r3, [pc, #324]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043fc:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4b4e      	ldr	r3, [pc, #312]	; (800453c <HAL_RCC_OscConfig+0x830>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800440c:	3a01      	subs	r2, #1
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004416:	0212      	lsls	r2, r2, #8
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800441e:	0852      	lsrs	r2, r2, #1
 8004420:	3a01      	subs	r2, #1
 8004422:	0552      	lsls	r2, r2, #21
 8004424:	4311      	orrs	r1, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800442a:	0852      	lsrs	r2, r2, #1
 800442c:	3a01      	subs	r2, #1
 800442e:	0652      	lsls	r2, r2, #25
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004436:	06d2      	lsls	r2, r2, #27
 8004438:	430a      	orrs	r2, r1
 800443a:	493f      	ldr	r1, [pc, #252]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004440:	4b3d      	ldr	r3, [pc, #244]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800444c:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a39      	ldr	r2, [pc, #228]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004458:	f7fe f8d0 	bl	80025fc <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe f8cc 	bl	80025fc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e067      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	4b31      	ldr	r3, [pc, #196]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447e:	e05f      	b.n	8004540 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e05e      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004484:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d157      	bne.n	8004540 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004490:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044a8:	f7fe f8a8 	bl	80025fc <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe f8a4 	bl	80025fc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03f      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x7a4>
 80044ce:	e037      	b.n	8004540 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d02d      	beq.n	8004532 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044f4:	f023 0303 	bic.w	r3, r3, #3
 80044f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004500:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fe f877 	bl	80025fc <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fe f873 	bl	80025fc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e00e      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCC_OscConfig+0x82c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x806>
 8004530:	e006      	b.n	8004540 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e005      	b.n	8004542 <HAL_RCC_OscConfig+0x836>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0c8      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d910      	bls.n	8004590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0207 	bic.w	r2, r3, #7
 8004576:	4961      	ldr	r1, [pc, #388]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0b0      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d04c      	beq.n	8004636 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a4:	4b56      	ldr	r3, [pc, #344]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e09e      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d115      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e092      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d4:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e086      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e4:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e07e      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 0203 	bic.w	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	493f      	ldr	r1, [pc, #252]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004606:	f7fd fff9 	bl	80025fc <HAL_GetTick>
 800460a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460c:	e00a      	b.n	8004624 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460e:	f7fd fff5 	bl	80025fc <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e066      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004624:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 020c 	and.w	r2, r3, #12
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	429a      	cmp	r2, r3
 8004634:	d1eb      	bne.n	800460e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	492c      	ldr	r1, [pc, #176]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d210      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 0207 	bic.w	r2, r3, #7
 800466a:	4924      	ldr	r1, [pc, #144]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_RCC_ClockConfig+0x1b0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e036      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4918      	ldr	r1, [pc, #96]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4910      	ldr	r1, [pc, #64]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c2:	f000 f825 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCC_ClockConfig+0x1b4>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	490c      	ldr	r1, [pc, #48]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	5ccb      	ldrb	r3, [r1, r3]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fd28 	bl	800213c <HAL_InitTick>
 80046ec:	4603      	mov	r3, r0
 80046ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80046f0:	7afb      	ldrb	r3, [r7, #11]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	08010104 	.word	0x08010104
 8004708:	2000001c 	.word	0x2000001c
 800470c:	20000020 	.word	0x20000020

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x34>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d121      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d11e      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e005      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_RCC_GetSysClockFreq+0x10c>)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d102      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e004      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d101      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 8004796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d134      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d003      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0xac>
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 80047be:	617b      	str	r3, [r7, #20]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	3301      	adds	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	fb02 f203 	mul.w	r2, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	0e5b      	lsrs	r3, r3, #25
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	3301      	adds	r3, #1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004808:	69bb      	ldr	r3, [r7, #24]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	0801011c 	.word	0x0801011c
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000001c 	.word	0x2000001c

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	08010114 	.word	0x08010114

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004870:	f7ff ffda 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0adb      	lsrs	r3, r3, #11
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	08010114 	.word	0x08010114

08004898 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	220f      	movs	r2, #15
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0203 	and.w	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_RCC_GetClockConfig+0x5c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCC_GetClockConfig+0x5c>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_GetClockConfig+0x5c>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	08db      	lsrs	r3, r3, #3
 80048d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_RCC_GetClockConfig+0x60>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0207 	and.w	r2, r3, #7
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40022000 	.word	0x40022000

080048fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004908:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004914:	f7ff f996 	bl	8003c44 <HAL_PWREx_GetVoltageRange>
 8004918:	6178      	str	r0, [r7, #20]
 800491a:	e014      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	6593      	str	r3, [r2, #88]	; 0x58
 8004928:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004934:	f7ff f986 	bl	8003c44 <HAL_PWREx_GetVoltageRange>
 8004938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004944:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494c:	d10b      	bne.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d919      	bls.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2ba0      	cmp	r3, #160	; 0xa0
 8004958:	d902      	bls.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800495a:	2302      	movs	r3, #2
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e013      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004960:	2301      	movs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e010      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d902      	bls.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800496c:	2303      	movs	r3, #3
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e00a      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d102      	bne.n	800497e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004978:	2302      	movs	r3, #2
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e004      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b70      	cmp	r3, #112	; 0x70
 8004982:	d101      	bne.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004984:	2301      	movs	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 0207 	bic.w	r2, r3, #7
 8004990:	4909      	ldr	r1, [pc, #36]	; (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d001      	beq.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40022000 	.word	0x40022000

080049bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c8:	2300      	movs	r3, #0
 80049ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d031      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049e0:	d01a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049e6:	d814      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049f0:	d10f      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80049f2:	4bac      	ldr	r3, [pc, #688]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4aab      	ldr	r2, [pc, #684]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fe:	e00c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f9dc 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	74fb      	strb	r3, [r7, #19]
      break;
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a20:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	499d      	ldr	r1, [pc, #628]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8099 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a4e:	4b95      	ldr	r3, [pc, #596]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b8f      	ldr	r3, [pc, #572]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	4a8e      	ldr	r2, [pc, #568]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a70:	4b8c      	ldr	r3, [pc, #560]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a80:	4b89      	ldr	r3, [pc, #548]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a88      	ldr	r2, [pc, #544]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fdb6 	bl	80025fc <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a92:	e009      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a94:	f7fd fdb2 	bl	80025fc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	74fb      	strb	r3, [r7, #19]
        break;
 8004aa6:	e005      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aa8:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ef      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d155      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aba:	4b7a      	ldr	r3, [pc, #488]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01e      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d019      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ad6:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ae2:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b6c      	ldr	r3, [pc, #432]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	4a6a      	ldr	r2, [pc, #424]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b02:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd fd72 	bl	80025fc <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fd fd6e 	bl	80025fc <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d902      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	74fb      	strb	r3, [r7, #19]
            break;
 8004b32:	e006      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b34:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ec      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b48:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	4953      	ldr	r1, [pc, #332]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
 8004b64:	e001      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6a:	7c7b      	ldrb	r3, [r7, #17]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b88:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f023 0203 	bic.w	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4943      	ldr	r1, [pc, #268]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f023 020c 	bic.w	r2, r3, #12
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	493a      	ldr	r1, [pc, #232]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	4932      	ldr	r1, [pc, #200]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bee:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfc:	4929      	ldr	r1, [pc, #164]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	4921      	ldr	r1, [pc, #132]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c32:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4918      	ldr	r1, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02c      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c94:	d10a      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca0:	60d3      	str	r3, [r2, #12]
 8004ca2:	e015      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f881 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d028      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cdc:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	492d      	ldr	r1, [pc, #180]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a27      	ldr	r2, [pc, #156]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d06:	60d3      	str	r3, [r2, #12]
 8004d08:	e011      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d12:	d10c      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f852 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01c      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d48:	4915      	ldr	r1, [pc, #84]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f82f 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8e:	4904      	ldr	r1, [pc, #16]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d96:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000

08004da4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd2:	4b74      	ldr	r3, [pc, #464]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dde:	4b71      	ldr	r3, [pc, #452]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0203 	and.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d10d      	bne.n	8004e0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
       ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004df6:	4b6b      	ldr	r3, [pc, #428]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
       ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d047      	beq.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e044      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d018      	beq.n	8004e4a <RCCEx_PLLSAI1_Config+0x86>
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d825      	bhi.n	8004e68 <RCCEx_PLLSAI1_Config+0xa4>
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d002      	beq.n	8004e26 <RCCEx_PLLSAI1_Config+0x62>
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d009      	beq.n	8004e38 <RCCEx_PLLSAI1_Config+0x74>
 8004e24:	e020      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e26:	4b5f      	ldr	r3, [pc, #380]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11d      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e36:	e01a      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e38:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e48:	e013      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e56:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e66:	e006      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e004      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7e:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	430b      	orrs	r3, r1
 8004e94:	4943      	ldr	r1, [pc, #268]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d17c      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ea0:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fd fba6 	bl	80025fc <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb4:	f7fd fba2 	bl	80025fc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec6:	e005      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ef      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15f      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ee8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	0211      	lsls	r1, r2, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	492a      	ldr	r1, [pc, #168]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	610b      	str	r3, [r1, #16]
 8004f00:	e027      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d112      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f08:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	0211      	lsls	r1, r2, #8
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6912      	ldr	r2, [r2, #16]
 8004f1e:	0852      	lsrs	r2, r2, #1
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0552      	lsls	r2, r2, #21
 8004f24:	430a      	orrs	r2, r1
 8004f26:	491f      	ldr	r1, [pc, #124]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	610b      	str	r3, [r1, #16]
 8004f2c:	e011      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6892      	ldr	r2, [r2, #8]
 8004f3e:	0211      	lsls	r1, r2, #8
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6952      	ldr	r2, [r2, #20]
 8004f44:	0852      	lsrs	r2, r2, #1
 8004f46:	3a01      	subs	r2, #1
 8004f48:	0652      	lsls	r2, r2, #25
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	4915      	ldr	r1, [pc, #84]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fd fb4d 	bl	80025fc <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f64:	e009      	b.n	8004f7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f66:	f7fd fb49 	bl	80025fc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	73fb      	strb	r3, [r7, #15]
          break;
 8004f78:	e005      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e095      	b.n	80050e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fca:	d009      	beq.n	8004fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
 8004fd2:	e005      	b.n	8004fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fd56 	bl	8001aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005020:	d902      	bls.n	8005028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800502c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005036:	d007      	beq.n	8005048 <HAL_SPI_Init+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	ea42 0103 	orr.w	r1, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0204 	and.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b08a      	sub	sp, #40	; 0x28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x26>
 8005110:	2302      	movs	r3, #2
 8005112:	e1fb      	b.n	800550c <HAL_SPI_TransmitReceive+0x41e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511c:	f7fd fa6e 	bl	80025fc <HAL_GetTick>
 8005120:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005128:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005138:	7efb      	ldrb	r3, [r7, #27]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00e      	beq.n	800515c <HAL_SPI_TransmitReceive+0x6e>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005144:	d106      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x66>
 800514e:	7efb      	ldrb	r3, [r7, #27]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d003      	beq.n	800515c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800515a:	e1cd      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_SPI_TransmitReceive+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_SPI_TransmitReceive+0x80>
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005174:	e1c0      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b04      	cmp	r3, #4
 8005180:	d003      	beq.n	800518a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2205      	movs	r2, #5
 8005186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	887a      	ldrh	r2, [r7, #2]
 80051a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051cc:	d802      	bhi.n	80051d4 <HAL_SPI_TransmitReceive+0xe6>
 80051ce:	8a3b      	ldrh	r3, [r7, #16]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d908      	bls.n	80051e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	e007      	b.n	80051f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d007      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521c:	d97c      	bls.n	8005318 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SPI_TransmitReceive+0x13e>
 8005226:	8a7b      	ldrh	r3, [r7, #18]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d169      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005250:	e056      	b.n	8005300 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d11b      	bne.n	8005298 <HAL_SPI_TransmitReceive+0x1aa>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x1aa>
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2b01      	cmp	r3, #1
 800526e:	d113      	bne.n	8005298 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d11c      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1f2>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052dc:	2301      	movs	r3, #1
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052e0:	f7fd f98c 	bl	80025fc <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d807      	bhi.n	8005300 <HAL_SPI_TransmitReceive+0x212>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d003      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052fe:	e0fb      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1a3      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x164>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d19d      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x164>
 8005316:	e0df      	b.n	80054d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x23a>
 8005320:	8a7b      	ldrh	r3, [r7, #18]
 8005322:	2b01      	cmp	r3, #1
 8005324:	f040 80cb 	bne.w	80054be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d912      	bls.n	8005358 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b02      	subs	r3, #2
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005356:	e0b2      	b.n	80054be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537e:	e09e      	b.n	80054be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d134      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02f      	beq.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d12c      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d912      	bls.n	80053ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b02      	subs	r3, #2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053cc:	e012      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d148      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x3aa>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d042      	beq.n	8005498 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d923      	bls.n	8005466 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	b292      	uxth	r2, r2
 800542a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b02      	subs	r3, #2
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d81f      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	e016      	b.n	8005494 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f103 020c 	add.w	r2, r3, #12
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005494:	2301      	movs	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005498:	f7fd f8b0 	bl	80025fc <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d803      	bhi.n	80054b0 <HAL_SPI_TransmitReceive+0x3c2>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_TransmitReceive+0x3c8>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054bc:	e01c      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f47f af5b 	bne.w	8005380 <HAL_SPI_TransmitReceive+0x292>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f47f af54 	bne.w	8005380 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f937 	bl	8005750 <SPI_EndRxTxTransaction>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
 80054f4:	e000      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800550c:	4618      	mov	r0, r3
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005524:	f7fd f86a 	bl	80025fc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	4413      	add	r3, r2
 8005532:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005534:	f7fd f862 	bl	80025fc <HAL_GetTick>
 8005538:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	015b      	lsls	r3, r3, #5
 8005540:	0d1b      	lsrs	r3, r3, #20
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800554a:	e054      	b.n	80055f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d050      	beq.n	80055f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005554:	f7fd f852 	bl	80025fc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	429a      	cmp	r2, r3
 8005562:	d902      	bls.n	800556a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d13d      	bne.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d111      	bne.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	d004      	beq.n	8005598 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005596:	d107      	bne.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b0:	d10f      	bne.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e017      	b.n	8005616 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d19b      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	2000001c 	.word	0x2000001c

08005624 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005636:	f7fc ffe1 	bl	80025fc <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	4413      	add	r3, r2
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005646:	f7fc ffd9 	bl	80025fc <HAL_GetTick>
 800564a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005654:	4b3d      	ldr	r3, [pc, #244]	; (800574c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	0d1b      	lsrs	r3, r3, #20
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800566c:	e060      	b.n	8005730 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005674:	d107      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005684:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d050      	beq.n	8005730 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800568e:	f7fc ffb5 	bl	80025fc <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	429a      	cmp	r2, r3
 800569c:	d902      	bls.n	80056a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d13d      	bne.n	8005720 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056bc:	d111      	bne.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d004      	beq.n	80056d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d107      	bne.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ea:	d10f      	bne.n	800570c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800570a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e010      	b.n	8005742 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3b01      	subs	r3, #1
 800572e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d196      	bne.n	800566e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	2000001c 	.word	0x2000001c

08005750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff5b 	bl	8005624 <SPI_WaitFifoStateUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e027      	b.n	80057d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fec0 	bl	8005514 <SPI_WaitFlagStateUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	f043 0220 	orr.w	r2, r3, #32
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e014      	b.n	80057d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff ff34 	bl	8005624 <SPI_WaitFifoStateUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e000      	b.n	80057d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e049      	b.n	8005882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f841 	bl	800588a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f000 f9dc 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d001      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e03b      	b.n	8005930 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_TIM_Base_Start_IT+0x9c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_Base_Start_IT+0x4e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_Base_Start_IT+0x4e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_TIM_Base_Start_IT+0xa0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d115      	bne.n	800591a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	4b13      	ldr	r3, [pc, #76]	; (8005944 <HAL_TIM_Base_Start_IT+0xa4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d015      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x8c>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005906:	d011      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	e008      	b.n	800592c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e000      	b.n	800592e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40014000 	.word	0x40014000
 8005944:	00010007 	.word	0x00010007

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0202 	mvn.w	r2, #2
 8005974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f905 	bl	8005b9a <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8f7 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f908 	bl	8005bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0204 	mvn.w	r2, #4
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8db 	bl	8005b9a <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8cd 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8de 	bl	8005bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0208 	mvn.w	r2, #8
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8b1 	bl	8005b9a <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8a3 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8b4 	bl	8005bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0210 	mvn.w	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2208      	movs	r2, #8
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f887 	bl	8005b9a <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f879 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f88a 	bl	8005bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0201 	mvn.w	r2, #1
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb fe6c 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8de 	bl	8005cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d10e      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f8d1 	bl	8005cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d10e      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d107      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f838 	bl	8005bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d10e      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d107      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0220 	mvn.w	r2, #32
 8005b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f891 	bl	8005ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0xbc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x20>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a21      	ldr	r2, [pc, #132]	; (8005c94 <TIM_Base_SetConfig+0xbc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_Base_SetConfig+0x52>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d007      	beq.n	8005c2a <TIM_Base_SetConfig+0x52>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <TIM_Base_SetConfig+0xc0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_Base_SetConfig+0x52>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <TIM_Base_SetConfig+0xc4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a0c      	ldr	r2, [pc, #48]	; (8005c94 <TIM_Base_SetConfig+0xbc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_Base_SetConfig+0xa0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	; (8005c98 <TIM_Base_SetConfig+0xc0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0xa0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <TIM_Base_SetConfig+0xc4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d103      	bne.n	8005c80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	615a      	str	r2, [r3, #20]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400

08005ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e040      	b.n	8005d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fc fbbc 	bl	800247c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8c0 	bl	8005ea0 <UART_SetConfig>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e022      	b.n	8005d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fabe 	bl	80062b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fb45 	bl	80063f8 <UART_CheckIdleState>
 8005d6e:	4603      	mov	r3, r0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	f040 8082 	bne.w	8005e96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_UART_Transmit+0x26>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e07a      	b.n	8005e98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Transmit+0x38>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e073      	b.n	8005e98 <HAL_UART_Transmit+0x120>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2221      	movs	r2, #33	; 0x21
 8005dc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc6:	f7fc fc19 	bl	80025fc <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x80>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e08:	e02d      	b.n	8005e66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fb38 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e039      	b.n	8005e98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e36:	b292      	uxth	r2, r2
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e008      	b.n	8005e54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	b292      	uxth	r2, r2
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1cb      	bne.n	8005e0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2140      	movs	r1, #64	; 0x40
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb04 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e005      	b.n	8005e98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
  }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	b5b0      	push	{r4, r5, r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4baf      	ldr	r3, [pc, #700]	; (8006188 <UART_SetConfig+0x2e8>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	69f9      	ldr	r1, [r7, #28]
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4aa4      	ldr	r2, [pc, #656]	; (800618c <UART_SetConfig+0x2ec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a9b      	ldr	r2, [pc, #620]	; (8006190 <UART_SetConfig+0x2f0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d121      	bne.n	8005f6a <UART_SetConfig+0xca>
 8005f26:	4b9b      	ldr	r3, [pc, #620]	; (8006194 <UART_SetConfig+0x2f4>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d817      	bhi.n	8005f64 <UART_SetConfig+0xc4>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0x9c>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f53 	.word	0x08005f53
 8005f48:	08005f5f 	.word	0x08005f5f
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	76fb      	strb	r3, [r7, #27]
 8005f50:	e070      	b.n	8006034 <UART_SetConfig+0x194>
 8005f52:	2302      	movs	r3, #2
 8005f54:	76fb      	strb	r3, [r7, #27]
 8005f56:	e06d      	b.n	8006034 <UART_SetConfig+0x194>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	76fb      	strb	r3, [r7, #27]
 8005f5c:	e06a      	b.n	8006034 <UART_SetConfig+0x194>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	76fb      	strb	r3, [r7, #27]
 8005f62:	e067      	b.n	8006034 <UART_SetConfig+0x194>
 8005f64:	2310      	movs	r3, #16
 8005f66:	76fb      	strb	r3, [r7, #27]
 8005f68:	e064      	b.n	8006034 <UART_SetConfig+0x194>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a8a      	ldr	r2, [pc, #552]	; (8006198 <UART_SetConfig+0x2f8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d132      	bne.n	8005fda <UART_SetConfig+0x13a>
 8005f74:	4b87      	ldr	r3, [pc, #540]	; (8006194 <UART_SetConfig+0x2f4>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b0c      	cmp	r3, #12
 8005f80:	d828      	bhi.n	8005fd4 <UART_SetConfig+0x134>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0xe8>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fbd 	.word	0x08005fbd
 8005f8c:	08005fd5 	.word	0x08005fd5
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fd5 	.word	0x08005fd5
 8005f98:	08005fc9 	.word	0x08005fc9
 8005f9c:	08005fd5 	.word	0x08005fd5
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005fd5 	.word	0x08005fd5
 8005fa8:	08005fc3 	.word	0x08005fc3
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fcf 	.word	0x08005fcf
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	76fb      	strb	r3, [r7, #27]
 8005fc0:	e038      	b.n	8006034 <UART_SetConfig+0x194>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	76fb      	strb	r3, [r7, #27]
 8005fc6:	e035      	b.n	8006034 <UART_SetConfig+0x194>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	76fb      	strb	r3, [r7, #27]
 8005fcc:	e032      	b.n	8006034 <UART_SetConfig+0x194>
 8005fce:	2308      	movs	r3, #8
 8005fd0:	76fb      	strb	r3, [r7, #27]
 8005fd2:	e02f      	b.n	8006034 <UART_SetConfig+0x194>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	76fb      	strb	r3, [r7, #27]
 8005fd8:	e02c      	b.n	8006034 <UART_SetConfig+0x194>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6b      	ldr	r2, [pc, #428]	; (800618c <UART_SetConfig+0x2ec>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d125      	bne.n	8006030 <UART_SetConfig+0x190>
 8005fe4:	4b6b      	ldr	r3, [pc, #428]	; (8006194 <UART_SetConfig+0x2f4>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff2:	d017      	beq.n	8006024 <UART_SetConfig+0x184>
 8005ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff8:	d817      	bhi.n	800602a <UART_SetConfig+0x18a>
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffe:	d00b      	beq.n	8006018 <UART_SetConfig+0x178>
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006004:	d811      	bhi.n	800602a <UART_SetConfig+0x18a>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <UART_SetConfig+0x172>
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d006      	beq.n	800601e <UART_SetConfig+0x17e>
 8006010:	e00b      	b.n	800602a <UART_SetConfig+0x18a>
 8006012:	2300      	movs	r3, #0
 8006014:	76fb      	strb	r3, [r7, #27]
 8006016:	e00d      	b.n	8006034 <UART_SetConfig+0x194>
 8006018:	2302      	movs	r3, #2
 800601a:	76fb      	strb	r3, [r7, #27]
 800601c:	e00a      	b.n	8006034 <UART_SetConfig+0x194>
 800601e:	2304      	movs	r3, #4
 8006020:	76fb      	strb	r3, [r7, #27]
 8006022:	e007      	b.n	8006034 <UART_SetConfig+0x194>
 8006024:	2308      	movs	r3, #8
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e004      	b.n	8006034 <UART_SetConfig+0x194>
 800602a:	2310      	movs	r3, #16
 800602c:	76fb      	strb	r3, [r7, #27]
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x194>
 8006030:	2310      	movs	r3, #16
 8006032:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <UART_SetConfig+0x2ec>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d173      	bne.n	8006126 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800603e:	7efb      	ldrb	r3, [r7, #27]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d824      	bhi.n	800608e <UART_SetConfig+0x1ee>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x1ac>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006071 	.word	0x08006071
 8006050:	0800608f 	.word	0x0800608f
 8006054:	08006079 	.word	0x08006079
 8006058:	0800608f 	.word	0x0800608f
 800605c:	0800607f 	.word	0x0800607f
 8006060:	0800608f 	.word	0x0800608f
 8006064:	0800608f 	.word	0x0800608f
 8006068:	0800608f 	.word	0x0800608f
 800606c:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006070:	f7fe fbe6 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006074:	6178      	str	r0, [r7, #20]
        break;
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b48      	ldr	r3, [pc, #288]	; (800619c <UART_SetConfig+0x2fc>)
 800607a:	617b      	str	r3, [r7, #20]
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fe fb47 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8006082:	6178      	str	r0, [r7, #20]
        break;
 8006084:	e008      	b.n	8006098 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608a:	617b      	str	r3, [r7, #20]
        break;
 800608c:	e004      	b.n	8006098 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	76bb      	strb	r3, [r7, #26]
        break;
 8006096:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80fc 	beq.w	8006298 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d305      	bcc.n	80060bc <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	76bb      	strb	r3, [r7, #26]
 80060c0:	e0ea      	b.n	8006298 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	020b      	lsls	r3, r1, #8
 80060d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060d8:	0202      	lsls	r2, r0, #8
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	6849      	ldr	r1, [r1, #4]
 80060de:	0849      	lsrs	r1, r1, #1
 80060e0:	4608      	mov	r0, r1
 80060e2:	f04f 0100 	mov.w	r1, #0
 80060e6:	1814      	adds	r4, r2, r0
 80060e8:	eb43 0501 	adc.w	r5, r3, r1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	461a      	mov	r2, r3
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa fd55 	bl	8000ba8 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4613      	mov	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610c:	d308      	bcc.n	8006120 <UART_SetConfig+0x280>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006114:	d204      	bcs.n	8006120 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e0bb      	b.n	8006298 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	76bb      	strb	r3, [r7, #26]
 8006124:	e0b8      	b.n	8006298 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612e:	d167      	bne.n	8006200 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8006130:	7efb      	ldrb	r3, [r7, #27]
 8006132:	2b08      	cmp	r3, #8
 8006134:	d834      	bhi.n	80061a0 <UART_SetConfig+0x300>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x29c>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	080061a1 	.word	0x080061a1
 800614c:	08006177 	.word	0x08006177
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061a1 	.word	0x080061a1
 8006158:	080061a1 	.word	0x080061a1
 800615c:	0800617f 	.word	0x0800617f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7fe fb6e 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006164:	6178      	str	r0, [r7, #20]
        break;
 8006166:	e020      	b.n	80061aa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006168:	f7fe fb80 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 800616c:	6178      	str	r0, [r7, #20]
        break;
 800616e:	e01c      	b.n	80061aa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <UART_SetConfig+0x2fc>)
 8006172:	617b      	str	r3, [r7, #20]
        break;
 8006174:	e019      	b.n	80061aa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe facb 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 800617a:	6178      	str	r0, [r7, #20]
        break;
 800617c:	e015      	b.n	80061aa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006182:	617b      	str	r3, [r7, #20]
        break;
 8006184:	e011      	b.n	80061aa <UART_SetConfig+0x30a>
 8006186:	bf00      	nop
 8006188:	efff69f3 	.word	0xefff69f3
 800618c:	40008000 	.word	0x40008000
 8006190:	40013800 	.word	0x40013800
 8006194:	40021000 	.word	0x40021000
 8006198:	40004400 	.word	0x40004400
 800619c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	76bb      	strb	r3, [r7, #26]
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d073      	beq.n	8006298 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	005a      	lsls	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d916      	bls.n	80061fa <UART_SetConfig+0x35a>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d212      	bcs.n	80061fa <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f023 030f 	bic.w	r3, r3, #15
 80061dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	89fa      	ldrh	r2, [r7, #14]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e04e      	b.n	8006298 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	76bb      	strb	r3, [r7, #26]
 80061fe:	e04b      	b.n	8006298 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006200:	7efb      	ldrb	r3, [r7, #27]
 8006202:	2b08      	cmp	r3, #8
 8006204:	d827      	bhi.n	8006256 <UART_SetConfig+0x3b6>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x36c>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	08006257 	.word	0x08006257
 800621c:	08006247 	.word	0x08006247
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
 800622c:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe fb06 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006234:	6178      	str	r0, [r7, #20]
        break;
 8006236:	e013      	b.n	8006260 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe fb18 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 800623c:	6178      	str	r0, [r7, #20]
        break;
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <UART_SetConfig+0x410>)
 8006242:	617b      	str	r3, [r7, #20]
        break;
 8006244:	e00c      	b.n	8006260 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe fa63 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 800624a:	6178      	str	r0, [r7, #20]
        break;
 800624c:	e008      	b.n	8006260 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	e004      	b.n	8006260 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	76bb      	strb	r3, [r7, #26]
        break;
 800625e:	bf00      	nop
    }

    if (pclk != 0U)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085a      	lsrs	r2, r3, #1
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	441a      	add	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b0f      	cmp	r3, #15
 800627e:	d909      	bls.n	8006294 <UART_SetConfig+0x3f4>
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d205      	bcs.n	8006294 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e001      	b.n	8006298 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bdb0      	pop	{r4, r5, r7, pc}
 80062ae:	bf00      	nop
 80062b0:	00f42400 	.word	0x00f42400

080062b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d10a      	bne.n	80063ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006408:	f7fc f8f8 	bl	80025fc <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d10e      	bne.n	800643a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f82d 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e023      	b.n	8006482 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d10e      	bne.n	8006466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f817 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e00d      	b.n	8006482 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b09c      	sub	sp, #112	; 0x70
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	e0a5      	b.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	f000 80a1 	beq.w	80065e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fc f8a9 	bl	80025fc <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <UART_WaitOnFlagUntilTimeout+0x32>
 80064b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d13e      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064d0:	667b      	str	r3, [r7, #100]	; 0x64
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e6      	bne.n	80064bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3308      	adds	r3, #8
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	663b      	str	r3, [r7, #96]	; 0x60
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800650e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e067      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d04f      	beq.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006556:	d147      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006560:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006576:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
 8006582:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e6      	bne.n	8006562 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	613b      	str	r3, [r7, #16]
   return(result);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065b4:	623a      	str	r2, [r7, #32]
 80065b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	69f9      	ldr	r1, [r7, #28]
 80065ba:	6a3a      	ldr	r2, [r7, #32]
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e010      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4013      	ands	r3, r2
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	429a      	cmp	r2, r3
 8006604:	f43f af4a 	beq.w	800649c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3770      	adds	r7, #112	; 0x70
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006618:	4904      	ldr	r1, [pc, #16]	; (800662c <MX_FATFS_Init+0x18>)
 800661a:	4805      	ldr	r0, [pc, #20]	; (8006630 <MX_FATFS_Init+0x1c>)
 800661c:	f003 f860 	bl	80096e0 <FATFS_LinkDriver>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <MX_FATFS_Init+0x20>)
 8006626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006628:	bf00      	nop
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200086c0 	.word	0x200086c0
 8006630:	20000028 	.word	0x20000028
 8006634:	200086c4 	.word	0x200086c4

08006638 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800663c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800663e:	4618      	mov	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f9d7 	bl	8006a08 <USER_SPI_initialize>
 800665a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fab5 	bl	8006be0 <USER_SPI_status>
 8006676:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60b9      	str	r1, [r7, #8]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006690:	7bf8      	ldrb	r0, [r7, #15]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	f000 fab8 	bl	8006c0c <USER_SPI_read>
 800669c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80066b6:	7bf8      	ldrb	r0, [r7, #15]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	f000 fb0b 	bl	8006cd8 <USER_SPI_write>
 80066c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	603a      	str	r2, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
 80066d8:	460b      	mov	r3, r1
 80066da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80066dc:	79b9      	ldrb	r1, [r7, #6]
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb74 	bl	8006dd0 <USER_SPI_ioctl>
 80066e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80066fc:	f7fb ff7e 	bl	80025fc <HAL_GetTick>
 8006700:	4603      	mov	r3, r0
 8006702:	4a04      	ldr	r2, [pc, #16]	; (8006714 <SPI_Timer_On+0x20>)
 8006704:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006706:	4a04      	ldr	r2, [pc, #16]	; (8006718 <SPI_Timer_On+0x24>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6013      	str	r3, [r2, #0]
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20008b2c 	.word	0x20008b2c
 8006718:	20008b30 	.word	0x20008b30

0800671c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006720:	f7fb ff6c 	bl	80025fc <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <SPI_Timer_Status+0x24>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <SPI_Timer_Status+0x28>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	bf34      	ite	cc
 8006734:	2301      	movcc	r3, #1
 8006736:	2300      	movcs	r3, #0
 8006738:	b2db      	uxtb	r3, r3
}
 800673a:	4618      	mov	r0, r3
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20008b2c 	.word	0x20008b2c
 8006744:	20008b30 	.word	0x20008b30

08006748 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af02      	add	r7, sp, #8
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006752:	f107 020f 	add.w	r2, r7, #15
 8006756:	1df9      	adds	r1, r7, #7
 8006758:	2332      	movs	r3, #50	; 0x32
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2301      	movs	r3, #1
 800675e:	4804      	ldr	r0, [pc, #16]	; (8006770 <xchg_spi+0x28>)
 8006760:	f7fe fcc5 	bl	80050ee <HAL_SPI_TransmitReceive>
    return rxDat;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20008588 	.word	0x20008588

08006774 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e00a      	b.n	800679a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	18d4      	adds	r4, r2, r3
 800678a:	20ff      	movs	r0, #255	; 0xff
 800678c:	f7ff ffdc 	bl	8006748 <xchg_spi>
 8006790:	4603      	mov	r3, r0
 8006792:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3f0      	bcc.n	8006784 <rcvr_spi_multi+0x10>
	}
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd90      	pop	{r4, r7, pc}

080067ac <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e009      	b.n	80067d0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff ffbf 	bl	8006748 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3f1      	bcc.n	80067bc <xmit_spi_multi+0x10>
	}
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80067ea:	f7fb ff07 	bl	80025fc <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80067f4:	20ff      	movs	r0, #255	; 0xff
 80067f6:	f7ff ffa7 	bl	8006748 <xchg_spi>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2bff      	cmp	r3, #255	; 0xff
 8006802:	d007      	beq.n	8006814 <wait_ready+0x32>
 8006804:	f7fb fefa 	bl	80025fc <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d8ef      	bhi.n	80067f4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2bff      	cmp	r3, #255	; 0xff
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	b2db      	uxtb	r3, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800682c:	2201      	movs	r2, #1
 800682e:	2120      	movs	r1, #32
 8006830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006834:	f7fc f95e 	bl	8002af4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006838:	20ff      	movs	r0, #255	; 0xff
 800683a:	f7ff ff85 	bl	8006748 <xchg_spi>

}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}

08006842 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006842:	b580      	push	{r7, lr}
 8006844:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006846:	2200      	movs	r2, #0
 8006848:	2120      	movs	r1, #32
 800684a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800684e:	f7fc f951 	bl	8002af4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006852:	20ff      	movs	r0, #255	; 0xff
 8006854:	f7ff ff78 	bl	8006748 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800685c:	f7ff ffc1 	bl	80067e2 <wait_ready>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <spiselect+0x28>
 8006866:	2301      	movs	r3, #1
 8006868:	e002      	b.n	8006870 <spiselect+0x2e>

	despiselect();
 800686a:	f7ff ffdd 	bl	8006828 <despiselect>
	return 0;	/* Timeout */
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}

08006874 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800687e:	20c8      	movs	r0, #200	; 0xc8
 8006880:	f7ff ff38 	bl	80066f4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006884:	20ff      	movs	r0, #255	; 0xff
 8006886:	f7ff ff5f 	bl	8006748 <xchg_spi>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2bff      	cmp	r3, #255	; 0xff
 8006892:	d104      	bne.n	800689e <rcvr_datablock+0x2a>
 8006894:	f7ff ff42 	bl	800671c <SPI_Timer_Status>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f2      	bne.n	8006884 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2bfe      	cmp	r3, #254	; 0xfe
 80068a2:	d001      	beq.n	80068a8 <rcvr_datablock+0x34>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e00a      	b.n	80068be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ff62 	bl	8006774 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80068b0:	20ff      	movs	r0, #255	; 0xff
 80068b2:	f7ff ff49 	bl	8006748 <xchg_spi>
 80068b6:	20ff      	movs	r0, #255	; 0xff
 80068b8:	f7ff ff46 	bl	8006748 <xchg_spi>

	return 1;						/* Function succeeded */
 80068bc:	2301      	movs	r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80068d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068d6:	f7ff ff84 	bl	80067e2 <wait_ready>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <xmit_datablock+0x1e>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e01e      	b.n	8006922 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff ff2e 	bl	8006748 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	2bfd      	cmp	r3, #253	; 0xfd
 80068f0:	d016      	beq.n	8006920 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80068f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ff58 	bl	80067ac <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80068fc:	20ff      	movs	r0, #255	; 0xff
 80068fe:	f7ff ff23 	bl	8006748 <xchg_spi>
 8006902:	20ff      	movs	r0, #255	; 0xff
 8006904:	f7ff ff20 	bl	8006748 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006908:	20ff      	movs	r0, #255	; 0xff
 800690a:	f7ff ff1d 	bl	8006748 <xchg_spi>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2b05      	cmp	r3, #5
 800691a:	d001      	beq.n	8006920 <xmit_datablock+0x5a>
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <xmit_datablock+0x5c>
	}
	return 1;
 8006920:	2301      	movs	r3, #1
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	6039      	str	r1, [r7, #0]
 8006934:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da0e      	bge.n	800695c <send_cmd+0x32>
		cmd &= 0x7F;
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006944:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006946:	2100      	movs	r1, #0
 8006948:	2037      	movs	r0, #55	; 0x37
 800694a:	f7ff ffee 	bl	800692a <send_cmd>
 800694e:	4603      	mov	r3, r0
 8006950:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d901      	bls.n	800695c <send_cmd+0x32>
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	e051      	b.n	8006a00 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d008      	beq.n	8006974 <send_cmd+0x4a>
		despiselect();
 8006962:	f7ff ff61 	bl	8006828 <despiselect>
		if (!spiselect()) return 0xFF;
 8006966:	f7ff ff6c 	bl	8006842 <spiselect>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <send_cmd+0x4a>
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	e045      	b.n	8006a00 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fee3 	bl	8006748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	b2db      	uxtb	r3, r3
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fedd 	bl	8006748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	0c1b      	lsrs	r3, r3, #16
 8006992:	b2db      	uxtb	r3, r3
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fed7 	bl	8006748 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fed1 	bl	8006748 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fecc 	bl	8006748 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <send_cmd+0x94>
 80069ba:	2395      	movs	r3, #149	; 0x95
 80069bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d101      	bne.n	80069c8 <send_cmd+0x9e>
 80069c4:	2387      	movs	r3, #135	; 0x87
 80069c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff febc 	bl	8006748 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d102      	bne.n	80069dc <send_cmd+0xb2>
 80069d6:	20ff      	movs	r0, #255	; 0xff
 80069d8:	f7ff feb6 	bl	8006748 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80069dc:	230a      	movs	r3, #10
 80069de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80069e0:	20ff      	movs	r0, #255	; 0xff
 80069e2:	f7ff feb1 	bl	8006748 <xchg_spi>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80069ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da05      	bge.n	80069fe <send_cmd+0xd4>
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USER_SPI_initialize+0x14>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0d6      	b.n	8006bca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006a1c:	4b6d      	ldr	r3, [pc, #436]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <USER_SPI_initialize+0x2a>
 8006a2a:	4b6a      	ldr	r3, [pc, #424]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e0cb      	b.n	8006bca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006a32:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <USER_SPI_initialize+0x1d0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a3c:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <USER_SPI_initialize+0x1d0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006a44:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006a46:	230a      	movs	r3, #10
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	e005      	b.n	8006a58 <USER_SPI_initialize+0x50>
 8006a4c:	20ff      	movs	r0, #255	; 0xff
 8006a4e:	f7ff fe7b 	bl	8006748 <xchg_spi>
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f6      	bne.n	8006a4c <USER_SPI_initialize+0x44>

	ty = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006a62:	2100      	movs	r1, #0
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7ff ff60 	bl	800692a <send_cmd>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 808b 	bne.w	8006b88 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a76:	f7ff fe3d 	bl	80066f4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006a7a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a7e:	2008      	movs	r0, #8
 8006a80:	f7ff ff53 	bl	800692a <send_cmd>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d151      	bne.n	8006b2e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e00d      	b.n	8006aac <USER_SPI_initialize+0xa4>
 8006a90:	7bfc      	ldrb	r4, [r7, #15]
 8006a92:	20ff      	movs	r0, #255	; 0xff
 8006a94:	f7ff fe58 	bl	8006748 <xchg_spi>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	4423      	add	r3, r4
 8006aa2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d9ee      	bls.n	8006a90 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006ab2:	7abb      	ldrb	r3, [r7, #10]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d167      	bne.n	8006b88 <USER_SPI_initialize+0x180>
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	2baa      	cmp	r3, #170	; 0xaa
 8006abc:	d164      	bne.n	8006b88 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006abe:	bf00      	nop
 8006ac0:	f7ff fe2c 	bl	800671c <SPI_Timer_Status>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <USER_SPI_initialize+0xd2>
 8006aca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ace:	20a9      	movs	r0, #169	; 0xa9
 8006ad0:	f7ff ff2b 	bl	800692a <send_cmd>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f2      	bne.n	8006ac0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006ada:	f7ff fe1f 	bl	800671c <SPI_Timer_Status>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d051      	beq.n	8006b88 <USER_SPI_initialize+0x180>
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	203a      	movs	r0, #58	; 0x3a
 8006ae8:	f7ff ff1f 	bl	800692a <send_cmd>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d14a      	bne.n	8006b88 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	e00d      	b.n	8006b14 <USER_SPI_initialize+0x10c>
 8006af8:	7bfc      	ldrb	r4, [r7, #15]
 8006afa:	20ff      	movs	r0, #255	; 0xff
 8006afc:	f7ff fe24 	bl	8006748 <xchg_spi>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	f107 0310 	add.w	r3, r7, #16
 8006b08:	4423      	add	r3, r4
 8006b0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	3301      	adds	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d9ee      	bls.n	8006af8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006b1a:	7a3b      	ldrb	r3, [r7, #8]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <USER_SPI_initialize+0x120>
 8006b24:	230c      	movs	r3, #12
 8006b26:	e000      	b.n	8006b2a <USER_SPI_initialize+0x122>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	737b      	strb	r3, [r7, #13]
 8006b2c:	e02c      	b.n	8006b88 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006b2e:	2100      	movs	r1, #0
 8006b30:	20a9      	movs	r0, #169	; 0xa9
 8006b32:	f7ff fefa 	bl	800692a <send_cmd>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d804      	bhi.n	8006b46 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	737b      	strb	r3, [r7, #13]
 8006b40:	23a9      	movs	r3, #169	; 0xa9
 8006b42:	73bb      	strb	r3, [r7, #14]
 8006b44:	e003      	b.n	8006b4e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006b46:	2301      	movs	r3, #1
 8006b48:	737b      	strb	r3, [r7, #13]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006b4e:	bf00      	nop
 8006b50:	f7ff fde4 	bl	800671c <SPI_Timer_Status>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <USER_SPI_initialize+0x162>
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fee3 	bl	800692a <send_cmd>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f2      	bne.n	8006b50 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006b6a:	f7ff fdd7 	bl	800671c <SPI_Timer_Status>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <USER_SPI_initialize+0x17c>
 8006b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f7ff fed6 	bl	800692a <send_cmd>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <USER_SPI_initialize+0x180>
				ty = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006b88:	4a14      	ldr	r2, [pc, #80]	; (8006bdc <USER_SPI_initialize+0x1d4>)
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006b8e:	f7ff fe4b 	bl	8006828 <despiselect>

	if (ty) {			/* OK */
 8006b92:	7b7b      	ldrb	r3, [r7, #13]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d012      	beq.n	8006bbe <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <USER_SPI_initialize+0x1d0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <USER_SPI_initialize+0x1d0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0210 	orr.w	r2, r2, #16
 8006baa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e002      	b.n	8006bc4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <USER_SPI_initialize+0x1cc>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd90      	pop	{r4, r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2000003c 	.word	0x2000003c
 8006bd8:	20008588 	.word	0x20008588
 8006bdc:	200009f0 	.word	0x200009f0

08006be0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USER_SPI_status+0x14>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e002      	b.n	8006bfa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <USER_SPI_status+0x28>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b2db      	uxtb	r3, r3
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	2000003c 	.word	0x2000003c

08006c0c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <USER_SPI_read+0x1c>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USER_SPI_read+0x20>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	e04d      	b.n	8006cc8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <USER_SPI_read+0xc4>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <USER_SPI_read+0x32>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e044      	b.n	8006cc8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006c3e:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <USER_SPI_read+0xc8>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <USER_SPI_read+0x44>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	025b      	lsls	r3, r3, #9
 8006c4e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d111      	bne.n	8006c7a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	2011      	movs	r0, #17
 8006c5a:	f7ff fe66 	bl	800692a <send_cmd>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d129      	bne.n	8006cb8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7ff fe03 	bl	8006874 <rcvr_datablock>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d021      	beq.n	8006cb8 <USER_SPI_read+0xac>
			count = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	e01e      	b.n	8006cb8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	2012      	movs	r0, #18
 8006c7e:	f7ff fe54 	bl	800692a <send_cmd>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d117      	bne.n	8006cb8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c8c:	68b8      	ldr	r0, [r7, #8]
 8006c8e:	f7ff fdf1 	bl	8006874 <rcvr_datablock>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <USER_SPI_read+0xa2>
				buff += 512;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c9e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ed      	bne.n	8006c88 <USER_SPI_read+0x7c>
 8006cac:	e000      	b.n	8006cb0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006cae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	200c      	movs	r0, #12
 8006cb4:	f7ff fe39 	bl	800692a <send_cmd>
		}
	}
	despiselect();
 8006cb8:	f7ff fdb6 	bl	8006828 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	2000003c 	.word	0x2000003c
 8006cd4:	200009f0 	.word	0x200009f0

08006cd8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <USER_SPI_write+0x1c>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USER_SPI_write+0x20>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	e063      	b.n	8006dc0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006cf8:	4b33      	ldr	r3, [pc, #204]	; (8006dc8 <USER_SPI_write+0xf0>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USER_SPI_write+0x32>
 8006d06:	2303      	movs	r3, #3
 8006d08:	e05a      	b.n	8006dc0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006d0a:	4b2f      	ldr	r3, [pc, #188]	; (8006dc8 <USER_SPI_write+0xf0>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <USER_SPI_write+0x44>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e051      	b.n	8006dc0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006d1c:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <USER_SPI_write+0xf4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <USER_SPI_write+0x56>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	025b      	lsls	r3, r3, #9
 8006d2c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d110      	bne.n	8006d56 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	2018      	movs	r0, #24
 8006d38:	f7ff fdf7 	bl	800692a <send_cmd>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d136      	bne.n	8006db0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006d42:	21fe      	movs	r1, #254	; 0xfe
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f7ff fdbe 	bl	80068c6 <xmit_datablock>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02f      	beq.n	8006db0 <USER_SPI_write+0xd8>
			count = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	e02c      	b.n	8006db0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006d56:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <USER_SPI_write+0xf4>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0306 	and.w	r3, r3, #6
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <USER_SPI_write+0x92>
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	2097      	movs	r0, #151	; 0x97
 8006d66:	f7ff fde0 	bl	800692a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	2019      	movs	r0, #25
 8006d6e:	f7ff fddc 	bl	800692a <send_cmd>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11b      	bne.n	8006db0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006d78:	21fc      	movs	r1, #252	; 0xfc
 8006d7a:	68b8      	ldr	r0, [r7, #8]
 8006d7c:	f7ff fda3 	bl	80068c6 <xmit_datablock>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <USER_SPI_write+0xc4>
				buff += 512;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d8c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1ee      	bne.n	8006d78 <USER_SPI_write+0xa0>
 8006d9a:	e000      	b.n	8006d9e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006d9c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006d9e:	21fd      	movs	r1, #253	; 0xfd
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7ff fd90 	bl	80068c6 <xmit_datablock>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <USER_SPI_write+0xd8>
 8006dac:	2301      	movs	r3, #1
 8006dae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006db0:	f7ff fd3a 	bl	8006828 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf14      	ite	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	2300      	moveq	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	2000003c 	.word	0x2000003c
 8006dcc:	200009f0 	.word	0x200009f0

08006dd0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	603a      	str	r2, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <USER_SPI_ioctl+0x1a>
 8006de6:	2304      	movs	r3, #4
 8006de8:	e15a      	b.n	80070a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006dea:	4baf      	ldr	r3, [pc, #700]	; (80070a8 <USER_SPI_ioctl+0x2d8>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <USER_SPI_ioctl+0x2c>
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e151      	b.n	80070a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006e02:	79bb      	ldrb	r3, [r7, #6]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	f200 8136 	bhi.w	8007076 <USER_SPI_ioctl+0x2a6>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USER_SPI_ioctl+0x40>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e25 	.word	0x08006e25
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08007077 	.word	0x08007077
 8006e1c:	08006ee5 	.word	0x08006ee5
 8006e20:	08006fdb 	.word	0x08006fdb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006e24:	f7ff fd0d 	bl	8006842 <spiselect>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 8127 	beq.w	800707e <USER_SPI_ioctl+0x2ae>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006e36:	e122      	b.n	800707e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006e38:	2100      	movs	r1, #0
 8006e3a:	2009      	movs	r0, #9
 8006e3c:	f7ff fd75 	bl	800692a <send_cmd>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 811d 	bne.w	8007082 <USER_SPI_ioctl+0x2b2>
 8006e48:	f107 030c 	add.w	r3, r7, #12
 8006e4c:	2110      	movs	r1, #16
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff fd10 	bl	8006874 <rcvr_datablock>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8113 	beq.w	8007082 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006e5c:	7b3b      	ldrb	r3, [r7, #12]
 8006e5e:	099b      	lsrs	r3, r3, #6
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d111      	bne.n	8006e8a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006e66:	7d7b      	ldrb	r3, [r7, #21]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	7d3b      	ldrb	r3, [r7, #20]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	4413      	add	r3, r2
 8006e70:	461a      	mov	r2, r3
 8006e72:	7cfb      	ldrb	r3, [r7, #19]
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	029a      	lsls	r2, r3, #10
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e028      	b.n	8006edc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006e8a:	7c7b      	ldrb	r3, [r7, #17]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	7dbb      	ldrb	r3, [r7, #22]
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	7d7b      	ldrb	r3, [r7, #21]
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0306 	and.w	r3, r3, #6
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	3302      	adds	r3, #2
 8006eae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006eb2:	7d3b      	ldrb	r3, [r7, #20]
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	7cfb      	ldrb	r3, [r7, #19]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	7cbb      	ldrb	r3, [r7, #18]
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ec8:	4413      	add	r3, r2
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006ece:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ed2:	3b09      	subs	r3, #9
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006ee2:	e0ce      	b.n	8007082 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006ee4:	4b71      	ldr	r3, [pc, #452]	; (80070ac <USER_SPI_ioctl+0x2dc>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d031      	beq.n	8006f54 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	208d      	movs	r0, #141	; 0x8d
 8006ef4:	f7ff fd19 	bl	800692a <send_cmd>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 80c3 	bne.w	8007086 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006f00:	20ff      	movs	r0, #255	; 0xff
 8006f02:	f7ff fc21 	bl	8006748 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	2110      	movs	r1, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fcb1 	bl	8006874 <rcvr_datablock>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80b6 	beq.w	8007086 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006f1a:	2330      	movs	r3, #48	; 0x30
 8006f1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006f20:	e007      	b.n	8006f32 <USER_SPI_ioctl+0x162>
 8006f22:	20ff      	movs	r0, #255	; 0xff
 8006f24:	f7ff fc10 	bl	8006748 <xchg_spi>
 8006f28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006f32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f3      	bne.n	8006f22 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006f3a:	7dbb      	ldrb	r3, [r7, #22]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	2310      	movs	r3, #16
 8006f44:	fa03 f202 	lsl.w	r2, r3, r2
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006f52:	e098      	b.n	8007086 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006f54:	2100      	movs	r1, #0
 8006f56:	2009      	movs	r0, #9
 8006f58:	f7ff fce7 	bl	800692a <send_cmd>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8091 	bne.w	8007086 <USER_SPI_ioctl+0x2b6>
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	2110      	movs	r1, #16
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fc82 	bl	8006874 <rcvr_datablock>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8087 	beq.w	8007086 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006f78:	4b4c      	ldr	r3, [pc, #304]	; (80070ac <USER_SPI_ioctl+0x2dc>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d012      	beq.n	8006faa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006f84:	7dbb      	ldrb	r3, [r7, #22]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006f8c:	7dfa      	ldrb	r2, [r7, #23]
 8006f8e:	09d2      	lsrs	r2, r2, #7
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	4413      	add	r3, r2
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	7e7b      	ldrb	r3, [r7, #25]
 8006f98:	099b      	lsrs	r3, r3, #6
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e013      	b.n	8006fd2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006faa:	7dbb      	ldrb	r3, [r7, #22]
 8006fac:	109b      	asrs	r3, r3, #2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f003 031f 	and.w	r3, r3, #31
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	7dfa      	ldrb	r2, [r7, #23]
 8006fb8:	00d2      	lsls	r2, r2, #3
 8006fba:	f002 0218 	and.w	r2, r2, #24
 8006fbe:	7df9      	ldrb	r1, [r7, #23]
 8006fc0:	0949      	lsrs	r1, r1, #5
 8006fc2:	b2c9      	uxtb	r1, r1
 8006fc4:	440a      	add	r2, r1
 8006fc6:	3201      	adds	r2, #1
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006fd8:	e055      	b.n	8007086 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006fda:	4b34      	ldr	r3, [pc, #208]	; (80070ac <USER_SPI_ioctl+0x2dc>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0306 	and.w	r3, r3, #6
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d051      	beq.n	800708a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006fe6:	f107 020c 	add.w	r2, r7, #12
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	210b      	movs	r1, #11
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff feee 	bl	8006dd0 <USER_SPI_ioctl>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d149      	bne.n	800708e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006ffa:	7b3b      	ldrb	r3, [r7, #12]
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <USER_SPI_ioctl+0x23e>
 8007004:	7dbb      	ldrb	r3, [r7, #22]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d041      	beq.n	8007092 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800701e:	4b23      	ldr	r3, [pc, #140]	; (80070ac <USER_SPI_ioctl+0x2dc>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d105      	bne.n	8007036 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	025b      	lsls	r3, r3, #9
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007038:	2020      	movs	r0, #32
 800703a:	f7ff fc76 	bl	800692a <send_cmd>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d128      	bne.n	8007096 <USER_SPI_ioctl+0x2c6>
 8007044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007046:	2021      	movs	r0, #33	; 0x21
 8007048:	f7ff fc6f 	bl	800692a <send_cmd>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d121      	bne.n	8007096 <USER_SPI_ioctl+0x2c6>
 8007052:	2100      	movs	r1, #0
 8007054:	2026      	movs	r0, #38	; 0x26
 8007056:	f7ff fc68 	bl	800692a <send_cmd>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d11a      	bne.n	8007096 <USER_SPI_ioctl+0x2c6>
 8007060:	f247 5030 	movw	r0, #30000	; 0x7530
 8007064:	f7ff fbbd 	bl	80067e2 <wait_ready>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d013      	beq.n	8007096 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800706e:	2300      	movs	r3, #0
 8007070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007074:	e00f      	b.n	8007096 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007076:	2304      	movs	r3, #4
 8007078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800707c:	e00c      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		break;
 800707e:	bf00      	nop
 8007080:	e00a      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		break;
 8007082:	bf00      	nop
 8007084:	e008      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		break;
 8007086:	bf00      	nop
 8007088:	e006      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800708a:	bf00      	nop
 800708c:	e004      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800708e:	bf00      	nop
 8007090:	e002      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <USER_SPI_ioctl+0x2c8>
		break;
 8007096:	bf00      	nop
	}

	despiselect();
 8007098:	f7ff fbc6 	bl	8006828 <despiselect>

	return res;
 800709c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3730      	adds	r7, #48	; 0x30
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2000003c 	.word	0x2000003c
 80070ac:	200009f0 	.word	0x200009f0

080070b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <disk_status+0x30>)
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	4905      	ldr	r1, [pc, #20]	; (80070e0 <disk_status+0x30>)
 80070ca:	440a      	add	r2, r1
 80070cc:	7a12      	ldrb	r2, [r2, #8]
 80070ce:	4610      	mov	r0, r2
 80070d0:	4798      	blx	r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000a1c 	.word	0x20000a1c

080070e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	4a0d      	ldr	r2, [pc, #52]	; (800712c <disk_initialize+0x48>)
 80070f6:	5cd3      	ldrb	r3, [r2, r3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d111      	bne.n	8007120 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	4a0b      	ldr	r2, [pc, #44]	; (800712c <disk_initialize+0x48>)
 8007100:	2101      	movs	r1, #1
 8007102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <disk_initialize+0x48>)
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	79fa      	ldrb	r2, [r7, #7]
 8007112:	4906      	ldr	r1, [pc, #24]	; (800712c <disk_initialize+0x48>)
 8007114:	440a      	add	r2, r1
 8007116:	7a12      	ldrb	r2, [r2, #8]
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000a1c 	.word	0x20000a1c

08007130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <disk_read+0x3c>)
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	689c      	ldr	r4, [r3, #8]
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	4a07      	ldr	r2, [pc, #28]	; (800716c <disk_read+0x3c>)
 8007150:	4413      	add	r3, r2
 8007152:	7a18      	ldrb	r0, [r3, #8]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	47a0      	blx	r4
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd90      	pop	{r4, r7, pc}
 800716a:	bf00      	nop
 800716c:	20000a1c 	.word	0x20000a1c

08007170 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <disk_write+0x3c>)
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68dc      	ldr	r4, [r3, #12]
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4a07      	ldr	r2, [pc, #28]	; (80071ac <disk_write+0x3c>)
 8007190:	4413      	add	r3, r2
 8007192:	7a18      	ldrb	r0, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	47a0      	blx	r4
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]
  return res;
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd90      	pop	{r4, r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000a1c 	.word	0x20000a1c

080071b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	603a      	str	r2, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
 80071bc:	460b      	mov	r3, r1
 80071be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <disk_ioctl+0x38>)
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	79fa      	ldrb	r2, [r7, #7]
 80071ce:	4906      	ldr	r1, [pc, #24]	; (80071e8 <disk_ioctl+0x38>)
 80071d0:	440a      	add	r2, r1
 80071d2:	7a10      	ldrb	r0, [r2, #8]
 80071d4:	79b9      	ldrb	r1, [r7, #6]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4798      	blx	r3
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000a1c 	.word	0x20000a1c

080071ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3301      	adds	r3, #1
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80071fc:	89fb      	ldrh	r3, [r7, #14]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	b21a      	sxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b21b      	sxth	r3, r3
 8007208:	4313      	orrs	r3, r2
 800720a:	b21b      	sxth	r3, r3
 800720c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800720e:	89fb      	ldrh	r3, [r7, #14]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3303      	adds	r3, #3
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	3202      	adds	r2, #2
 8007234:	7812      	ldrb	r2, [r2, #0]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	3201      	adds	r2, #1
 8007242:	7812      	ldrb	r2, [r2, #0]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
	return rv;
 8007254:	68fb      	ldr	r3, [r7, #12]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	887a      	ldrh	r2, [r7, #2]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	887b      	ldrh	r3, [r7, #2]
 800727c:	0a1b      	lsrs	r3, r3, #8
 800727e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	0a1b      	lsrs	r3, r3, #8
 80072d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	1c53      	adds	r3, r2, #1
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	1c59      	adds	r1, r3, #1
 8007314:	6179      	str	r1, [r7, #20]
 8007316:	7812      	ldrb	r2, [r2, #0]
 8007318:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3b01      	subs	r3, #1
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f1      	bne.n	800730a <mem_cpy+0x1a>
	}
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	617a      	str	r2, [r7, #20]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f3      	bne.n	8007342 <mem_set+0x10>
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	1acb      	subs	r3, r1, r3
 8007394:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <mem_cmp+0x40>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0eb      	beq.n	8007380 <mem_cmp+0x18>

	return r;
 80073a8:	697b      	ldr	r3, [r7, #20]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3724      	adds	r7, #36	; 0x24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073c0:	e002      	b.n	80073c8 <chk_chr+0x12>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3301      	adds	r3, #1
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <chk_chr+0x26>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	4293      	cmp	r3, r2
 80073da:	d1f2      	bne.n	80073c2 <chk_chr+0xc>
	return *str;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	781b      	ldrb	r3, [r3, #0]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <lock_fs+0x22>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 f9a9 	bl	8009756 <ff_req_grant>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <lock_fs+0x22>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <lock_fs+0x24>
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <unlock_fs+0x2e>
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d00a      	beq.n	8007446 <unlock_fs+0x2e>
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	2b0b      	cmp	r3, #11
 8007434:	d007      	beq.n	8007446 <unlock_fs+0x2e>
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d004      	beq.n	8007446 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4618      	mov	r0, r3
 8007442:	f002 f99d 	bl	8009780 <ff_rel_grant>
	}
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800745a:	2300      	movs	r3, #0
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e029      	b.n	80074b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007464:	4a27      	ldr	r2, [pc, #156]	; (8007504 <chk_lock+0xb4>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	4413      	add	r3, r2
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007472:	4a24      	ldr	r2, [pc, #144]	; (8007504 <chk_lock+0xb4>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	4413      	add	r3, r2
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d116      	bne.n	80074b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007484:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <chk_lock+0xb4>)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	4413      	add	r3, r2
 800748c:	3304      	adds	r3, #4
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007494:	429a      	cmp	r2, r3
 8007496:	d10c      	bne.n	80074b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007498:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <chk_lock+0xb4>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4413      	add	r3, r2
 80074a0:	3308      	adds	r3, #8
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d102      	bne.n	80074b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074ac:	e007      	b.n	80074be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074ae:	2301      	movs	r3, #1
 80074b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d9d2      	bls.n	8007464 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d109      	bne.n	80074d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <chk_lock+0x80>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d101      	bne.n	80074d4 <chk_lock+0x84>
 80074d0:	2300      	movs	r3, #0
 80074d2:	e010      	b.n	80074f6 <chk_lock+0xa6>
 80074d4:	2312      	movs	r3, #18
 80074d6:	e00e      	b.n	80074f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d108      	bne.n	80074f0 <chk_lock+0xa0>
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <chk_lock+0xb4>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	330c      	adds	r3, #12
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d101      	bne.n	80074f4 <chk_lock+0xa4>
 80074f0:	2310      	movs	r3, #16
 80074f2:	e000      	b.n	80074f6 <chk_lock+0xa6>
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	200009fc 	.word	0x200009fc

08007508 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
 8007512:	e002      	b.n	800751a <enq_lock+0x12>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3301      	adds	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d806      	bhi.n	800752e <enq_lock+0x26>
 8007520:	4a09      	ldr	r2, [pc, #36]	; (8007548 <enq_lock+0x40>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4413      	add	r3, r2
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f2      	bne.n	8007514 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b02      	cmp	r3, #2
 8007532:	bf14      	ite	ne
 8007534:	2301      	movne	r3, #1
 8007536:	2300      	moveq	r3, #0
 8007538:	b2db      	uxtb	r3, r3
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	200009fc 	.word	0x200009fc

0800754c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e01f      	b.n	800759c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800755c:	4a41      	ldr	r2, [pc, #260]	; (8007664 <inc_lock+0x118>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	4413      	add	r3, r2
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d113      	bne.n	8007596 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800756e:	4a3d      	ldr	r2, [pc, #244]	; (8007664 <inc_lock+0x118>)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800757e:	429a      	cmp	r2, r3
 8007580:	d109      	bne.n	8007596 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007582:	4a38      	ldr	r2, [pc, #224]	; (8007664 <inc_lock+0x118>)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	4413      	add	r3, r2
 800758a:	3308      	adds	r3, #8
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007592:	429a      	cmp	r2, r3
 8007594:	d006      	beq.n	80075a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d9dc      	bls.n	800755c <inc_lock+0x10>
 80075a2:	e000      	b.n	80075a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d132      	bne.n	8007612 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e002      	b.n	80075b8 <inc_lock+0x6c>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d806      	bhi.n	80075cc <inc_lock+0x80>
 80075be:	4a29      	ldr	r2, [pc, #164]	; (8007664 <inc_lock+0x118>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f2      	bne.n	80075b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d101      	bne.n	80075d6 <inc_lock+0x8a>
 80075d2:	2300      	movs	r3, #0
 80075d4:	e040      	b.n	8007658 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4922      	ldr	r1, [pc, #136]	; (8007664 <inc_lock+0x118>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	440b      	add	r3, r1
 80075e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	491e      	ldr	r1, [pc, #120]	; (8007664 <inc_lock+0x118>)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	440b      	add	r3, r1
 80075f0:	3304      	adds	r3, #4
 80075f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695a      	ldr	r2, [r3, #20]
 80075f8:	491a      	ldr	r1, [pc, #104]	; (8007664 <inc_lock+0x118>)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	440b      	add	r3, r1
 8007600:	3308      	adds	r3, #8
 8007602:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <inc_lock+0x118>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	330c      	adds	r3, #12
 800760e:	2200      	movs	r2, #0
 8007610:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <inc_lock+0xe0>
 8007618:	4a12      	ldr	r2, [pc, #72]	; (8007664 <inc_lock+0x118>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	4413      	add	r3, r2
 8007620:	330c      	adds	r3, #12
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <inc_lock+0xe0>
 8007628:	2300      	movs	r3, #0
 800762a:	e015      	b.n	8007658 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d108      	bne.n	8007644 <inc_lock+0xf8>
 8007632:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <inc_lock+0x118>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	330c      	adds	r3, #12
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	3301      	adds	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	e001      	b.n	8007648 <inc_lock+0xfc>
 8007644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007648:	4906      	ldr	r1, [pc, #24]	; (8007664 <inc_lock+0x118>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	440b      	add	r3, r1
 8007650:	330c      	adds	r3, #12
 8007652:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	200009fc 	.word	0x200009fc

08007668 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3b01      	subs	r3, #1
 8007674:	607b      	str	r3, [r7, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d825      	bhi.n	80076c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800767c:	4a17      	ldr	r2, [pc, #92]	; (80076dc <dec_lock+0x74>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	4413      	add	r3, r2
 8007684:	330c      	adds	r3, #12
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800768a:	89fb      	ldrh	r3, [r7, #14]
 800768c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007690:	d101      	bne.n	8007696 <dec_lock+0x2e>
 8007692:	2300      	movs	r3, #0
 8007694:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007696:	89fb      	ldrh	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <dec_lock+0x3a>
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	3b01      	subs	r3, #1
 80076a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076a2:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <dec_lock+0x74>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	330c      	adds	r3, #12
 80076ac:	89fa      	ldrh	r2, [r7, #14]
 80076ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <dec_lock+0x5a>
 80076b6:	4a09      	ldr	r2, [pc, #36]	; (80076dc <dec_lock+0x74>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	737b      	strb	r3, [r7, #13]
 80076c6:	e001      	b.n	80076cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076c8:	2302      	movs	r3, #2
 80076ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	200009fc 	.word	0x200009fc

080076e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e010      	b.n	8007710 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076ee:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <clear_lock+0x44>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d105      	bne.n	800770a <clear_lock+0x2a>
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <clear_lock+0x44>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3301      	adds	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d9eb      	bls.n	80076ee <clear_lock+0xe>
	}
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	200009fc 	.word	0x200009fc

08007728 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	78db      	ldrb	r3, [r3, #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d034      	beq.n	80077a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7858      	ldrb	r0, [r3, #1]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800774c:	2301      	movs	r3, #1
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	f7ff fd0e 	bl	8007170 <disk_write>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <sync_window+0x38>
			res = FR_DISK_ERR;
 800775a:	2301      	movs	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e022      	b.n	80077a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	429a      	cmp	r2, r3
 8007774:	d217      	bcs.n	80077a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	789b      	ldrb	r3, [r3, #2]
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	e010      	b.n	80077a0 <sync_window+0x78>
					wsect += fs->fsize;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4413      	add	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7858      	ldrb	r0, [r3, #1]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007792:	2301      	movs	r3, #1
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	f7ff fceb 	bl	8007170 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d8eb      	bhi.n	800777e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d01b      	beq.n	8007800 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ffad 	bl	8007728 <sync_window>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d113      	bne.n	8007800 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7858      	ldrb	r0, [r3, #1]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077e2:	2301      	movs	r3, #1
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	f7ff fca3 	bl	8007130 <disk_read>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff87 	bl	8007728 <sync_window>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d158      	bne.n	80078d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d148      	bne.n	80078be <sync_fs+0xb2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	791b      	ldrb	r3, [r3, #4]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d144      	bne.n	80078be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3334      	adds	r3, #52	; 0x34
 8007838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fd77 	bl	8007332 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3334      	adds	r3, #52	; 0x34
 8007848:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800784c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff fd06 	bl	8007262 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3334      	adds	r3, #52	; 0x34
 800785a:	4921      	ldr	r1, [pc, #132]	; (80078e0 <sync_fs+0xd4>)
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fd1b 	bl	8007298 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3334      	adds	r3, #52	; 0x34
 8007866:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800786a:	491e      	ldr	r1, [pc, #120]	; (80078e4 <sync_fs+0xd8>)
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fd13 	bl	8007298 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3334      	adds	r3, #52	; 0x34
 8007876:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7ff fd09 	bl	8007298 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3334      	adds	r3, #52	; 0x34
 800788a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7ff fcff 	bl	8007298 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7858      	ldrb	r0, [r3, #1]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	2301      	movs	r3, #1
 80078b4:	f7ff fc5c 	bl	8007170 <disk_write>
			fs->fsi_flag = 0;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fc72 	bl	80071b0 <disk_ioctl>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <sync_fs+0xca>
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	41615252 	.word	0x41615252
 80078e4:	61417272 	.word	0x61417272

080078e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3b02      	subs	r3, #2
 80078f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	3b02      	subs	r3, #2
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d301      	bcc.n	8007908 <clust2sect+0x20>
 8007904:	2300      	movs	r3, #0
 8007906:	e008      	b.n	800791a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	895b      	ldrh	r3, [r3, #10]
 800790c:	461a      	mov	r2, r3
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	fb03 f202 	mul.w	r2, r3, r2
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4413      	add	r3, r2
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d904      	bls.n	8007946 <get_fat+0x20>
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d302      	bcc.n	800794c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e08f      	b.n	8007a6c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800794c:	f04f 33ff 	mov.w	r3, #4294967295
 8007950:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b03      	cmp	r3, #3
 8007958:	d062      	beq.n	8007a20 <get_fat+0xfa>
 800795a:	2b03      	cmp	r3, #3
 800795c:	dc7c      	bgt.n	8007a58 <get_fat+0x132>
 800795e:	2b01      	cmp	r3, #1
 8007960:	d002      	beq.n	8007968 <get_fat+0x42>
 8007962:	2b02      	cmp	r3, #2
 8007964:	d042      	beq.n	80079ec <get_fat+0xc6>
 8007966:	e077      	b.n	8007a58 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0a5b      	lsrs	r3, r3, #9
 800797e:	4413      	add	r3, r2
 8007980:	4619      	mov	r1, r3
 8007982:	6938      	ldr	r0, [r7, #16]
 8007984:	f7ff ff14 	bl	80077b0 <move_window>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d167      	bne.n	8007a5e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	60fa      	str	r2, [r7, #12]
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0a5b      	lsrs	r3, r3, #9
 80079aa:	4413      	add	r3, r2
 80079ac:	4619      	mov	r1, r3
 80079ae:	6938      	ldr	r0, [r7, #16]
 80079b0:	f7ff fefe 	bl	80077b0 <move_window>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d153      	bne.n	8007a62 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	461a      	mov	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <get_fat+0xbc>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	e002      	b.n	80079e8 <get_fat+0xc2>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e8:	617b      	str	r3, [r7, #20]
			break;
 80079ea:	e03f      	b.n	8007a6c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	4413      	add	r3, r2
 80079f6:	4619      	mov	r1, r3
 80079f8:	6938      	ldr	r0, [r7, #16]
 80079fa:	f7ff fed9 	bl	80077b0 <move_window>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d130      	bne.n	8007a66 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a12:	4413      	add	r3, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fbe9 	bl	80071ec <ld_word>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	617b      	str	r3, [r7, #20]
			break;
 8007a1e:	e025      	b.n	8007a6c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	09db      	lsrs	r3, r3, #7
 8007a28:	4413      	add	r3, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6938      	ldr	r0, [r7, #16]
 8007a2e:	f7ff febf 	bl	80077b0 <move_window>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d118      	bne.n	8007a6a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a46:	4413      	add	r3, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fbe7 	bl	800721c <ld_dword>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a54:	617b      	str	r3, [r7, #20]
			break;
 8007a56:	e009      	b.n	8007a6c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e006      	b.n	8007a6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a5e:	bf00      	nop
 8007a60:	e004      	b.n	8007a6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a62:	bf00      	nop
 8007a64:	e002      	b.n	8007a6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a66:	bf00      	nop
 8007a68:	e000      	b.n	8007a6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a6a:	bf00      	nop
		}
	}

	return val;
 8007a6c:	697b      	ldr	r3, [r7, #20]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a76:	b590      	push	{r4, r7, lr}
 8007a78:	b089      	sub	sp, #36	; 0x24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a82:	2302      	movs	r3, #2
 8007a84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	f240 80d2 	bls.w	8007c32 <put_fat+0x1bc>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f080 80cc 	bcs.w	8007c32 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	f000 8096 	beq.w	8007bd0 <put_fat+0x15a>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	f300 80cd 	bgt.w	8007c44 <put_fat+0x1ce>
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d002      	beq.n	8007ab4 <put_fat+0x3e>
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d06e      	beq.n	8007b90 <put_fat+0x11a>
 8007ab2:	e0c7      	b.n	8007c44 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	085b      	lsrs	r3, r3, #1
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	0a5b      	lsrs	r3, r3, #9
 8007aca:	4413      	add	r3, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff fe6e 	bl	80077b0 <move_window>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad8:	7ffb      	ldrb	r3, [r7, #31]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 80ab 	bne.w	8007c36 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	61b9      	str	r1, [r7, #24]
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	4413      	add	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <put_fat+0xa4>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	b25a      	sxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b25b      	sxtb	r3, r3
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	e001      	b.n	8007b1e <put_fat+0xa8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	4413      	add	r3, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fe3b 	bl	80077b0 <move_window>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b3e:	7ffb      	ldrb	r3, [r7, #31]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17a      	bne.n	8007c3a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b50:	4413      	add	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <put_fat+0xf0>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	e00e      	b.n	8007b84 <put_fat+0x10e>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	f023 030f 	bic.w	r3, r3, #15
 8007b70:	b25a      	sxtb	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	0a1b      	lsrs	r3, r3, #8
 8007b76:	b25b      	sxtb	r3, r3
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	70da      	strb	r2, [r3, #3]
			break;
 8007b8e:	e059      	b.n	8007c44 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	4413      	add	r3, r2
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff fe07 	bl	80077b0 <move_window>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ba6:	7ffb      	ldrb	r3, [r7, #31]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d148      	bne.n	8007c3e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007bba:	4413      	add	r3, r2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fb4d 	bl	8007262 <st_word>
			fs->wflag = 1;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	70da      	strb	r2, [r3, #3]
			break;
 8007bce:	e039      	b.n	8007c44 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	09db      	lsrs	r3, r3, #7
 8007bd8:	4413      	add	r3, r2
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff fde7 	bl	80077b0 <move_window>
 8007be2:	4603      	mov	r3, r0
 8007be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007be6:	7ffb      	ldrb	r3, [r7, #31]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d12a      	bne.n	8007c42 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c00:	4413      	add	r3, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fb0a 	bl	800721c <ld_dword>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c0e:	4323      	orrs	r3, r4
 8007c10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c20:	4413      	add	r3, r2
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fb37 	bl	8007298 <st_dword>
			fs->wflag = 1;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	70da      	strb	r2, [r3, #3]
			break;
 8007c30:	e008      	b.n	8007c44 <put_fat+0x1ce>
		}
	}
 8007c32:	bf00      	nop
 8007c34:	e006      	b.n	8007c44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c36:	bf00      	nop
 8007c38:	e004      	b.n	8007c44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c3a:	bf00      	nop
 8007c3c:	e002      	b.n	8007c44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c42:	bf00      	nop
	return res;
 8007c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3724      	adds	r7, #36	; 0x24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}

08007c4e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d904      	bls.n	8007c74 <remove_chain+0x26>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d301      	bcc.n	8007c78 <remove_chain+0x2a>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e04b      	b.n	8007d10 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	69b8      	ldr	r0, [r7, #24]
 8007c86:	f7ff fef6 	bl	8007a76 <put_fat>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007c8e:	7ffb      	ldrb	r3, [r7, #31]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <remove_chain+0x4a>
 8007c94:	7ffb      	ldrb	r3, [r7, #31]
 8007c96:	e03b      	b.n	8007d10 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fe43 	bl	8007926 <get_fat>
 8007ca0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d031      	beq.n	8007d0c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <remove_chain+0x64>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e02e      	b.n	8007d10 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d101      	bne.n	8007cbe <remove_chain+0x70>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e028      	b.n	8007d10 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	69b8      	ldr	r0, [r7, #24]
 8007cc4:	f7ff fed7 	bl	8007a76 <put_fat>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <remove_chain+0x88>
 8007cd2:	7ffb      	ldrb	r3, [r7, #31]
 8007cd4:	e01c      	b.n	8007d10 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	3b02      	subs	r3, #2
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d20b      	bcs.n	8007cfc <remove_chain+0xae>
			fs->free_clst++;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3c6      	bcc.n	8007c98 <remove_chain+0x4a>
 8007d0a:	e000      	b.n	8007d0e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d0c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10d      	bne.n	8007d4a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <create_chain+0x2c>
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d31b      	bcc.n	8007d7c <create_chain+0x64>
 8007d44:	2301      	movs	r3, #1
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	e018      	b.n	8007d7c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fdea 	bl	8007926 <get_fat>
 8007d52:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d801      	bhi.n	8007d5e <create_chain+0x46>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e070      	b.n	8007e40 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d101      	bne.n	8007d6a <create_chain+0x52>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	e06a      	b.n	8007e40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d201      	bcs.n	8007d78 <create_chain+0x60>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	e063      	b.n	8007e40 <create_chain+0x128>
		scl = clst;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	3301      	adds	r3, #1
 8007d84:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d307      	bcc.n	8007da0 <create_chain+0x88>
				ncl = 2;
 8007d90:	2302      	movs	r3, #2
 8007d92:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d901      	bls.n	8007da0 <create_chain+0x88>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e04f      	b.n	8007e40 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fdbf 	bl	8007926 <get_fat>
 8007da8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00e      	beq.n	8007dce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d003      	beq.n	8007dbe <create_chain+0xa6>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d101      	bne.n	8007dc2 <create_chain+0xaa>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	e03e      	b.n	8007e40 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d1da      	bne.n	8007d80 <create_chain+0x68>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e038      	b.n	8007e40 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007dce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd4:	69f9      	ldr	r1, [r7, #28]
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f7ff fe4d 	bl	8007a76 <put_fat>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <create_chain+0xe2>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6938      	ldr	r0, [r7, #16]
 8007df2:	f7ff fe40 	bl	8007a76 <put_fat>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d116      	bne.n	8007e2e <create_chain+0x116>
		fs->last_clst = ncl;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	3b02      	subs	r3, #2
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d804      	bhi.n	8007e1e <create_chain+0x106>
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	791b      	ldrb	r3, [r3, #4]
 8007e22:	f043 0301 	orr.w	r3, r3, #1
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	711a      	strb	r2, [r3, #4]
 8007e2c:	e007      	b.n	8007e3e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d102      	bne.n	8007e3a <create_chain+0x122>
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
 8007e38:	e000      	b.n	8007e3c <create_chain+0x124>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e3e:	69fb      	ldr	r3, [r7, #28]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	0a5b      	lsrs	r3, r3, #9
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	8952      	ldrh	r2, [r2, #10]
 8007e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1d1a      	adds	r2, r3, #4
 8007e72:	613a      	str	r2, [r7, #16]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <clmt_clust+0x3a>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e010      	b.n	8007ea4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d307      	bcc.n	8007e9a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	3304      	adds	r3, #4
 8007e96:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e98:	e7e9      	b.n	8007e6e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007e9a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4413      	add	r3, r2
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec6:	d204      	bcs.n	8007ed2 <dir_sdi+0x22>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e063      	b.n	8007f9e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <dir_sdi+0x46>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d902      	bls.n	8007ef6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	8912      	ldrh	r2, [r2, #8]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d301      	bcc.n	8007f0c <dir_sdi+0x5c>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e048      	b.n	8007f9e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	61da      	str	r2, [r3, #28]
 8007f14:	e029      	b.n	8007f6a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	895b      	ldrh	r3, [r3, #10]
 8007f1a:	025b      	lsls	r3, r3, #9
 8007f1c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f1e:	e019      	b.n	8007f54 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6979      	ldr	r1, [r7, #20]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fcfe 	bl	8007926 <get_fat>
 8007f2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d101      	bne.n	8007f38 <dir_sdi+0x88>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e032      	b.n	8007f9e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d904      	bls.n	8007f48 <dir_sdi+0x98>
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d301      	bcc.n	8007f4c <dir_sdi+0x9c>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e028      	b.n	8007f9e <dir_sdi+0xee>
			ofs -= csz;
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d2e1      	bcs.n	8007f20 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007f5c:	6979      	ldr	r1, [r7, #20]
 8007f5e:	6938      	ldr	r0, [r7, #16]
 8007f60:	f7ff fcc2 	bl	80078e8 <clust2sect>
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <dir_sdi+0xcc>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e010      	b.n	8007f9e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	0a5b      	lsrs	r3, r3, #9
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f96:	441a      	add	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	3320      	adds	r3, #32
 8007fbc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <dir_next+0x28>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fcc:	d301      	bcc.n	8007fd2 <dir_next+0x2c>
 8007fce:	2304      	movs	r3, #4
 8007fd0:	e0aa      	b.n	8008128 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 8098 	bne.w	800810e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	8912      	ldrh	r2, [r2, #8]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	f0c0 8088 	bcc.w	800810e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	61da      	str	r2, [r3, #28]
 8008004:	2304      	movs	r3, #4
 8008006:	e08f      	b.n	8008128 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	8952      	ldrh	r2, [r2, #10]
 8008010:	3a01      	subs	r2, #1
 8008012:	4013      	ands	r3, r2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d17a      	bne.n	800810e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7ff fc80 	bl	8007926 <get_fat>
 8008026:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d801      	bhi.n	8008032 <dir_next+0x8c>
 800802e:	2302      	movs	r3, #2
 8008030:	e07a      	b.n	8008128 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d101      	bne.n	800803e <dir_next+0x98>
 800803a:	2301      	movs	r3, #1
 800803c:	e074      	b.n	8008128 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	429a      	cmp	r2, r3
 8008046:	d358      	bcc.n	80080fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	61da      	str	r2, [r3, #28]
 8008054:	2304      	movs	r3, #4
 8008056:	e067      	b.n	8008128 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f7ff fe59 	bl	8007d18 <create_chain>
 8008066:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <dir_next+0xcc>
 800806e:	2307      	movs	r3, #7
 8008070:	e05a      	b.n	8008128 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <dir_next+0xd6>
 8008078:	2302      	movs	r3, #2
 800807a:	e055      	b.n	8008128 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d101      	bne.n	8008088 <dir_next+0xe2>
 8008084:	2301      	movs	r3, #1
 8008086:	e04f      	b.n	8008128 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff fb4d 	bl	8007728 <sync_window>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <dir_next+0xf2>
 8008094:	2301      	movs	r3, #1
 8008096:	e047      	b.n	8008128 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3334      	adds	r3, #52	; 0x34
 800809c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff f945 	bl	8007332 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	6979      	ldr	r1, [r7, #20]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fc1a 	bl	80078e8 <clust2sect>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
 80080ba:	e012      	b.n	80080e2 <dir_next+0x13c>
						fs->wflag = 1;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff fb30 	bl	8007728 <sync_window>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <dir_next+0x12c>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e02a      	b.n	8008128 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3301      	adds	r3, #1
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	895b      	ldrh	r3, [r3, #10]
 80080e6:	461a      	mov	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d3e6      	bcc.n	80080bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1ad2      	subs	r2, r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008100:	6979      	ldr	r1, [r7, #20]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fbf0 	bl	80078e8 <clust2sect>
 8008108:	4602      	mov	r2, r0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff feb4 	bl	8007eb0 <dir_sdi>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d12b      	bne.n	80081aa <dir_alloc+0x7a>
		n = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff fb27 	bl	80077b0 <move_window>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11d      	bne.n	80081a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2be5      	cmp	r3, #229	; 0xe5
 8008174:	d004      	beq.n	8008180 <dir_alloc+0x50>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d107      	bne.n	8008190 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	3301      	adds	r3, #1
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d102      	bne.n	8008194 <dir_alloc+0x64>
 800818e:	e00c      	b.n	80081aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008194:	2101      	movs	r1, #1
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff ff05 	bl	8007fa6 <dir_next>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0d7      	beq.n	8008156 <dir_alloc+0x26>
 80081a6:	e000      	b.n	80081aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80081a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d101      	bne.n	80081b4 <dir_alloc+0x84>
 80081b0:	2307      	movs	r3, #7
 80081b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	331a      	adds	r3, #26
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff f80d 	bl	80071ec <ld_word>
 80081d2:	4603      	mov	r3, r0
 80081d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d109      	bne.n	80081f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	3314      	adds	r3, #20
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff f802 	bl	80071ec <ld_word>
 80081e8:	4603      	mov	r3, r0
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	331a      	adds	r3, #26
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	b292      	uxth	r2, r2
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff f825 	bl	8007262 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d109      	bne.n	8008234 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f103 0214 	add.w	r2, r3, #20
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	b29b      	uxth	r3, r3
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7ff f817 	bl	8007262 <st_word>
	}
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800824a:	2100      	movs	r1, #0
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fe2f 	bl	8007eb0 <dir_sdi>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <dir_find+0x24>
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	e03e      	b.n	80082de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	4619      	mov	r1, r3
 8008266:	6938      	ldr	r0, [r7, #16]
 8008268:	f7ff faa2 	bl	80077b0 <move_window>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d12f      	bne.n	80082d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <dir_find+0x4e>
 8008284:	2304      	movs	r3, #4
 8008286:	75fb      	strb	r3, [r7, #23]
 8008288:	e028      	b.n	80082dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	330b      	adds	r3, #11
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008296:	b2da      	uxtb	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	330b      	adds	r3, #11
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <dir_find+0x86>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a18      	ldr	r0, [r3, #32]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	220b      	movs	r2, #11
 80082b6:	4619      	mov	r1, r3
 80082b8:	f7ff f856 	bl	8007368 <mem_cmp>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80082c2:	2100      	movs	r1, #0
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fe6e 	bl	8007fa6 <dir_next>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0c5      	beq.n	8008260 <dir_find+0x24>
 80082d4:	e002      	b.n	80082dc <dir_find+0xa0>
		if (res != FR_OK) break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80082da:	bf00      	nop

	return res;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80082f4:	2101      	movs	r1, #1
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ff1a 	bl	8008130 <dir_alloc>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d11c      	bne.n	8008340 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	4619      	mov	r1, r3
 800830c:	68b8      	ldr	r0, [r7, #8]
 800830e:	f7ff fa4f 	bl	80077b0 <move_window>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d111      	bne.n	8008340 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	2220      	movs	r2, #32
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff f804 	bl	8007332 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a18      	ldr	r0, [r3, #32]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3324      	adds	r3, #36	; 0x24
 8008332:	220b      	movs	r2, #11
 8008334:	4619      	mov	r1, r3
 8008336:	f7fe ffdb 	bl	80072f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2201      	movs	r2, #1
 800833e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008362:	220b      	movs	r2, #11
 8008364:	2120      	movs	r1, #32
 8008366:	68b8      	ldr	r0, [r7, #8]
 8008368:	f7fe ffe3 	bl	8007332 <mem_set>
	si = i = 0; ni = 8;
 800836c:	2300      	movs	r3, #0
 800836e:	613b      	str	r3, [r7, #16]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	61fb      	str	r3, [r7, #28]
 8008374:	2308      	movs	r3, #8
 8008376:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	61fa      	str	r2, [r7, #28]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008386:	7efb      	ldrb	r3, [r7, #27]
 8008388:	2b20      	cmp	r3, #32
 800838a:	d94e      	bls.n	800842a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800838c:	7efb      	ldrb	r3, [r7, #27]
 800838e:	2b2f      	cmp	r3, #47	; 0x2f
 8008390:	d006      	beq.n	80083a0 <create_name+0x54>
 8008392:	7efb      	ldrb	r3, [r7, #27]
 8008394:	2b5c      	cmp	r3, #92	; 0x5c
 8008396:	d110      	bne.n	80083ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008398:	e002      	b.n	80083a0 <create_name+0x54>
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3301      	adds	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b2f      	cmp	r3, #47	; 0x2f
 80083aa:	d0f6      	beq.n	800839a <create_name+0x4e>
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b5c      	cmp	r3, #92	; 0x5c
 80083b6:	d0f0      	beq.n	800839a <create_name+0x4e>
			break;
 80083b8:	e038      	b.n	800842c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80083ba:	7efb      	ldrb	r3, [r7, #27]
 80083bc:	2b2e      	cmp	r3, #46	; 0x2e
 80083be:	d003      	beq.n	80083c8 <create_name+0x7c>
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d30c      	bcc.n	80083e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b0b      	cmp	r3, #11
 80083cc:	d002      	beq.n	80083d4 <create_name+0x88>
 80083ce:	7efb      	ldrb	r3, [r7, #27]
 80083d0:	2b2e      	cmp	r3, #46	; 0x2e
 80083d2:	d001      	beq.n	80083d8 <create_name+0x8c>
 80083d4:	2306      	movs	r3, #6
 80083d6:	e044      	b.n	8008462 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80083d8:	2308      	movs	r3, #8
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	230b      	movs	r3, #11
 80083de:	617b      	str	r3, [r7, #20]
			continue;
 80083e0:	e022      	b.n	8008428 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80083e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da04      	bge.n	80083f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80083ea:	7efb      	ldrb	r3, [r7, #27]
 80083ec:	3b80      	subs	r3, #128	; 0x80
 80083ee:	4a1f      	ldr	r2, [pc, #124]	; (800846c <create_name+0x120>)
 80083f0:	5cd3      	ldrb	r3, [r2, r3]
 80083f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80083f4:	7efb      	ldrb	r3, [r7, #27]
 80083f6:	4619      	mov	r1, r3
 80083f8:	481d      	ldr	r0, [pc, #116]	; (8008470 <create_name+0x124>)
 80083fa:	f7fe ffdc 	bl	80073b6 <chk_chr>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <create_name+0xbc>
 8008404:	2306      	movs	r3, #6
 8008406:	e02c      	b.n	8008462 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008408:	7efb      	ldrb	r3, [r7, #27]
 800840a:	2b60      	cmp	r3, #96	; 0x60
 800840c:	d905      	bls.n	800841a <create_name+0xce>
 800840e:	7efb      	ldrb	r3, [r7, #27]
 8008410:	2b7a      	cmp	r3, #122	; 0x7a
 8008412:	d802      	bhi.n	800841a <create_name+0xce>
 8008414:	7efb      	ldrb	r3, [r7, #27]
 8008416:	3b20      	subs	r3, #32
 8008418:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	613a      	str	r2, [r7, #16]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	4413      	add	r3, r2
 8008424:	7efa      	ldrb	r2, [r7, #27]
 8008426:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008428:	e7a6      	b.n	8008378 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800842a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	441a      	add	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <create_name+0xf4>
 800843c:	2306      	movs	r3, #6
 800843e:	e010      	b.n	8008462 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2be5      	cmp	r3, #229	; 0xe5
 8008446:	d102      	bne.n	800844e <create_name+0x102>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2205      	movs	r2, #5
 800844c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800844e:	7efb      	ldrb	r3, [r7, #27]
 8008450:	2b20      	cmp	r3, #32
 8008452:	d801      	bhi.n	8008458 <create_name+0x10c>
 8008454:	2204      	movs	r2, #4
 8008456:	e000      	b.n	800845a <create_name+0x10e>
 8008458:	2200      	movs	r2, #0
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	330b      	adds	r3, #11
 800845e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008460:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008462:	4618      	mov	r0, r3
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	0801014c 	.word	0x0801014c
 8008470:	0800f350 	.word	0x0800f350

08008474 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008488:	e002      	b.n	8008490 <follow_path+0x1c>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b2f      	cmp	r3, #47	; 0x2f
 8008496:	d0f8      	beq.n	800848a <follow_path+0x16>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b5c      	cmp	r3, #92	; 0x5c
 800849e:	d0f4      	beq.n	800848a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2200      	movs	r2, #0
 80084a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b1f      	cmp	r3, #31
 80084ac:	d80a      	bhi.n	80084c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2280      	movs	r2, #128	; 0x80
 80084b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80084b6:	2100      	movs	r1, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fcf9 	bl	8007eb0 <dir_sdi>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]
 80084c2:	e043      	b.n	800854c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084c4:	463b      	mov	r3, r7
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ff3f 	bl	800834c <create_name>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d134      	bne.n	8008542 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff feaf 	bl	800823c <dir_find>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d127      	bne.n	8008546 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d122      	bne.n	8008546 <follow_path+0xd2>
 8008500:	2305      	movs	r3, #5
 8008502:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008504:	e01f      	b.n	8008546 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11c      	bne.n	800854a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	799b      	ldrb	r3, [r3, #6]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800851c:	2305      	movs	r3, #5
 800851e:	75fb      	strb	r3, [r7, #23]
 8008520:	e014      	b.n	800854c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	4413      	add	r3, r2
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fe42 	bl	80081be <ld_clust>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008540:	e7c0      	b.n	80084c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008542:	bf00      	nop
 8008544:	e002      	b.n	800854c <follow_path+0xd8>
				break;
 8008546:	bf00      	nop
 8008548:	e000      	b.n	800854c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800854a:	bf00      	nop
			}
		}
	}

	return res;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d031      	beq.n	80085d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	e002      	b.n	800857a <get_ldnumber+0x24>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	3301      	adds	r3, #1
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b20      	cmp	r3, #32
 8008580:	d903      	bls.n	800858a <get_ldnumber+0x34>
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b3a      	cmp	r3, #58	; 0x3a
 8008588:	d1f4      	bne.n	8008574 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b3a      	cmp	r3, #58	; 0x3a
 8008590:	d11c      	bne.n	80085cc <get_ldnumber+0x76>
			tp = *path;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	60fa      	str	r2, [r7, #12]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	3b30      	subs	r3, #48	; 0x30
 80085a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b09      	cmp	r3, #9
 80085a8:	d80e      	bhi.n	80085c8 <get_ldnumber+0x72>
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d10a      	bne.n	80085c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <get_ldnumber+0x72>
					vol = (int)i;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	3301      	adds	r3, #1
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	e002      	b.n	80085d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085cc:	2300      	movs	r3, #0
 80085ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085d0:	693b      	ldr	r3, [r7, #16]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	70da      	strb	r2, [r3, #3]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff f8d8 	bl	80077b0 <move_window>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <check_fs+0x2a>
 8008606:	2304      	movs	r3, #4
 8008608:	e038      	b.n	800867c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3334      	adds	r3, #52	; 0x34
 800860e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fdea 	bl	80071ec <ld_word>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <check_fs+0x48>
 8008624:	2303      	movs	r3, #3
 8008626:	e029      	b.n	800867c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800862e:	2be9      	cmp	r3, #233	; 0xe9
 8008630:	d009      	beq.n	8008646 <check_fs+0x66>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008638:	2beb      	cmp	r3, #235	; 0xeb
 800863a:	d11e      	bne.n	800867a <check_fs+0x9a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008642:	2b90      	cmp	r3, #144	; 0x90
 8008644:	d119      	bne.n	800867a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3334      	adds	r3, #52	; 0x34
 800864a:	3336      	adds	r3, #54	; 0x36
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe fde5 	bl	800721c <ld_dword>
 8008652:	4603      	mov	r3, r0
 8008654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008658:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <check_fs+0xa4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d101      	bne.n	8008662 <check_fs+0x82>
 800865e:	2300      	movs	r3, #0
 8008660:	e00c      	b.n	800867c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3334      	adds	r3, #52	; 0x34
 8008666:	3352      	adds	r3, #82	; 0x52
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fdd7 	bl	800721c <ld_dword>
 800866e:	4603      	mov	r3, r0
 8008670:	4a05      	ldr	r2, [pc, #20]	; (8008688 <check_fs+0xa8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d101      	bne.n	800867a <check_fs+0x9a>
 8008676:	2300      	movs	r3, #0
 8008678:	e000      	b.n	800867c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800867a:	2302      	movs	r3, #2
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	00544146 	.word	0x00544146
 8008688:	33544146 	.word	0x33544146

0800868c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b096      	sub	sp, #88	; 0x58
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff ff58 	bl	8008556 <get_ldnumber>
 80086a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80086a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da01      	bge.n	80086b2 <find_volume+0x26>
 80086ae:	230b      	movs	r3, #11
 80086b0:	e236      	b.n	8008b20 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80086b2:	4aac      	ldr	r2, [pc, #688]	; (8008964 <find_volume+0x2d8>)
 80086b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <find_volume+0x3a>
 80086c2:	230c      	movs	r3, #12
 80086c4:	e22c      	b.n	8008b20 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80086c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086c8:	f7fe fe90 	bl	80073ec <lock_fs>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <find_volume+0x4a>
 80086d2:	230f      	movs	r3, #15
 80086d4:	e224      	b.n	8008b20 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01a      	beq.n	8008722 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fcdd 	bl	80070b0 <disk_status>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10c      	bne.n	8008722 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <find_volume+0x92>
 800870e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800871a:	230a      	movs	r3, #10
 800871c:	e200      	b.n	8008b20 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800871e:	2300      	movs	r3, #0
 8008720:	e1fe      	b.n	8008b20 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fcd5 	bl	80070e4 <disk_initialize>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800874c:	2303      	movs	r3, #3
 800874e:	e1e7      	b.n	8008b20 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <find_volume+0xda>
 8008756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008762:	230a      	movs	r3, #10
 8008764:	e1dc      	b.n	8008b20 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800876a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800876c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800876e:	f7ff ff37 	bl	80085e0 <check_fs>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800877c:	2b02      	cmp	r3, #2
 800877e:	d14b      	bne.n	8008818 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008780:	2300      	movs	r3, #0
 8008782:	643b      	str	r3, [r7, #64]	; 0x40
 8008784:	e01f      	b.n	80087c6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008794:	4413      	add	r3, r2
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	3304      	adds	r3, #4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d006      	beq.n	80087b0 <find_volume+0x124>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	3308      	adds	r3, #8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fd38 	bl	800721c <ld_dword>
 80087ac:	4602      	mov	r2, r0
 80087ae:	e000      	b.n	80087b2 <find_volume+0x126>
 80087b0:	2200      	movs	r2, #0
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80087ba:	440b      	add	r3, r1
 80087bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c2:	3301      	adds	r3, #1
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
 80087c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d9dc      	bls.n	8008786 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80087cc:	2300      	movs	r3, #0
 80087ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80087d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <find_volume+0x150>
 80087d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d8:	3b01      	subs	r3, #1
 80087da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80087dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80087e4:	4413      	add	r3, r2
 80087e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80087ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <find_volume+0x172>
 80087f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087f6:	f7ff fef3 	bl	80085e0 <check_fs>
 80087fa:	4603      	mov	r3, r0
 80087fc:	e000      	b.n	8008800 <find_volume+0x174>
 80087fe:	2303      	movs	r3, #3
 8008800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008808:	2b01      	cmp	r3, #1
 800880a:	d905      	bls.n	8008818 <find_volume+0x18c>
 800880c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880e:	3301      	adds	r3, #1
 8008810:	643b      	str	r3, [r7, #64]	; 0x40
 8008812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008814:	2b03      	cmp	r3, #3
 8008816:	d9e1      	bls.n	80087dc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800881c:	2b04      	cmp	r3, #4
 800881e:	d101      	bne.n	8008824 <find_volume+0x198>
 8008820:	2301      	movs	r3, #1
 8008822:	e17d      	b.n	8008b20 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008828:	2b01      	cmp	r3, #1
 800882a:	d901      	bls.n	8008830 <find_volume+0x1a4>
 800882c:	230d      	movs	r3, #13
 800882e:	e177      	b.n	8008b20 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	3334      	adds	r3, #52	; 0x34
 8008834:	330b      	adds	r3, #11
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fcd8 	bl	80071ec <ld_word>
 800883c:	4603      	mov	r3, r0
 800883e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008842:	d001      	beq.n	8008848 <find_volume+0x1bc>
 8008844:	230d      	movs	r3, #13
 8008846:	e16b      	b.n	8008b20 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	3334      	adds	r3, #52	; 0x34
 800884c:	3316      	adds	r3, #22
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fccc 	bl	80071ec <ld_word>
 8008854:	4603      	mov	r3, r0
 8008856:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d106      	bne.n	800886c <find_volume+0x1e0>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	3334      	adds	r3, #52	; 0x34
 8008862:	3324      	adds	r3, #36	; 0x24
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fcd9 	bl	800721c <ld_dword>
 800886a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008870:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	789b      	ldrb	r3, [r3, #2]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d005      	beq.n	8008890 <find_volume+0x204>
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	789b      	ldrb	r3, [r3, #2]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d001      	beq.n	8008890 <find_volume+0x204>
 800888c:	230d      	movs	r3, #13
 800888e:	e147      	b.n	8008b20 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	789b      	ldrb	r3, [r3, #2]
 8008894:	461a      	mov	r2, r3
 8008896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	895b      	ldrh	r3, [r3, #10]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d008      	beq.n	80088c4 <find_volume+0x238>
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	895b      	ldrh	r3, [r3, #10]
 80088b6:	461a      	mov	r2, r3
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	895b      	ldrh	r3, [r3, #10]
 80088bc:	3b01      	subs	r3, #1
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <find_volume+0x23c>
 80088c4:	230d      	movs	r3, #13
 80088c6:	e12b      	b.n	8008b20 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	3334      	adds	r3, #52	; 0x34
 80088cc:	3311      	adds	r3, #17
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fc8c 	bl	80071ec <ld_word>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	891b      	ldrh	r3, [r3, #8]
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <find_volume+0x262>
 80088ea:	230d      	movs	r3, #13
 80088ec:	e118      	b.n	8008b20 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	3334      	adds	r3, #52	; 0x34
 80088f2:	3313      	adds	r3, #19
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fc79 	bl	80071ec <ld_word>
 80088fa:	4603      	mov	r3, r0
 80088fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80088fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <find_volume+0x286>
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	3334      	adds	r3, #52	; 0x34
 8008908:	3320      	adds	r3, #32
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fc86 	bl	800721c <ld_dword>
 8008910:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	3334      	adds	r3, #52	; 0x34
 8008916:	330e      	adds	r3, #14
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fc67 	bl	80071ec <ld_word>
 800891e:	4603      	mov	r3, r0
 8008920:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <find_volume+0x2a0>
 8008928:	230d      	movs	r3, #13
 800892a:	e0f9      	b.n	8008b20 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800892c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800892e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008930:	4413      	add	r3, r2
 8008932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008934:	8912      	ldrh	r2, [r2, #8]
 8008936:	0912      	lsrs	r2, r2, #4
 8008938:	b292      	uxth	r2, r2
 800893a:	4413      	add	r3, r2
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800893e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	429a      	cmp	r2, r3
 8008944:	d201      	bcs.n	800894a <find_volume+0x2be>
 8008946:	230d      	movs	r3, #13
 8008948:	e0ea      	b.n	8008b20 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800894a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008952:	8952      	ldrh	r2, [r2, #10]
 8008954:	fbb3 f3f2 	udiv	r3, r3, r2
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <find_volume+0x2dc>
 8008960:	230d      	movs	r3, #13
 8008962:	e0dd      	b.n	8008b20 <find_volume+0x494>
 8008964:	200009f4 	.word	0x200009f4
		fmt = FS_FAT32;
 8008968:	2303      	movs	r3, #3
 800896a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008974:	4293      	cmp	r3, r2
 8008976:	d802      	bhi.n	800897e <find_volume+0x2f2>
 8008978:	2302      	movs	r3, #2
 800897a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008984:	4293      	cmp	r3, r2
 8008986:	d802      	bhi.n	800898e <find_volume+0x302>
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	1c9a      	adds	r2, r3, #2
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800899a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800899c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	441a      	add	r2, r3
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80089a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	441a      	add	r2, r3
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80089b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d11e      	bne.n	80089f6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	3334      	adds	r3, #52	; 0x34
 80089bc:	332a      	adds	r3, #42	; 0x2a
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fc14 	bl	80071ec <ld_word>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <find_volume+0x342>
 80089ca:	230d      	movs	r3, #13
 80089cc:	e0a8      	b.n	8008b20 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	891b      	ldrh	r3, [r3, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <find_volume+0x34e>
 80089d6:	230d      	movs	r3, #13
 80089d8:	e0a2      	b.n	8008b20 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	3334      	adds	r3, #52	; 0x34
 80089de:	332c      	adds	r3, #44	; 0x2c
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fc1b 	bl	800721c <ld_dword>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	647b      	str	r3, [r7, #68]	; 0x44
 80089f4:	e01f      	b.n	8008a36 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	891b      	ldrh	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <find_volume+0x376>
 80089fe:	230d      	movs	r3, #13
 8008a00:	e08e      	b.n	8008b20 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a08:	441a      	add	r2, r3
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d103      	bne.n	8008a1e <find_volume+0x392>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	e00a      	b.n	8008a34 <find_volume+0x3a8>
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	4613      	mov	r3, r2
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	085a      	lsrs	r2, r3, #1
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a34:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008a40:	0a5b      	lsrs	r3, r3, #9
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d201      	bcs.n	8008a4a <find_volume+0x3be>
 8008a46:	230d      	movs	r3, #13
 8008a48:	e06a      	b.n	8008b20 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	615a      	str	r2, [r3, #20]
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	2280      	movs	r2, #128	; 0x80
 8008a5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d149      	bne.n	8008afc <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	3334      	adds	r3, #52	; 0x34
 8008a6c:	3330      	adds	r3, #48	; 0x30
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fbbc 	bl	80071ec <ld_word>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d140      	bne.n	8008afc <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a82:	f7fe fe95 	bl	80077b0 <move_window>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d137      	bne.n	8008afc <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	2200      	movs	r2, #0
 8008a90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	3334      	adds	r3, #52	; 0x34
 8008a96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fba6 	bl	80071ec <ld_word>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d127      	bne.n	8008afc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	3334      	adds	r3, #52	; 0x34
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fbb3 	bl	800721c <ld_dword>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <find_volume+0x49c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d11e      	bne.n	8008afc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	3334      	adds	r3, #52	; 0x34
 8008ac2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fba8 	bl	800721c <ld_dword>
 8008acc:	4603      	mov	r3, r0
 8008ace:	4a17      	ldr	r2, [pc, #92]	; (8008b2c <find_volume+0x4a0>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d113      	bne.n	8008afc <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	3334      	adds	r3, #52	; 0x34
 8008ad8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fb9d 	bl	800721c <ld_dword>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	3334      	adds	r3, #52	; 0x34
 8008aec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe fb93 	bl	800721c <ld_dword>
 8008af6:	4602      	mov	r2, r0
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <find_volume+0x4a4>)
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <find_volume+0x4a4>)
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <find_volume+0x4a4>)
 8008b12:	881a      	ldrh	r2, [r3, #0]
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b1a:	f7fe fde1 	bl	80076e0 <clear_lock>
#endif
	return FR_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3758      	adds	r7, #88	; 0x58
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	41615252 	.word	0x41615252
 8008b2c:	61417272 	.word	0x61417272
 8008b30:	200009f8 	.word	0x200009f8

08008b34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b3e:	2309      	movs	r3, #9
 8008b40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02e      	beq.n	8008ba6 <validate+0x72>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02a      	beq.n	8008ba6 <validate+0x72>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d025      	beq.n	8008ba6 <validate+0x72>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	889a      	ldrh	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	88db      	ldrh	r3, [r3, #6]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d11e      	bne.n	8008ba6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fc3d 	bl	80073ec <lock_fs>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d014      	beq.n	8008ba2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fa96 	bl	80070b0 <disk_status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <validate+0x60>
				res = FR_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
 8008b92:	e008      	b.n	8008ba6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fc3c 	bl	8007418 <unlock_fs>
 8008ba0:	e001      	b.n	8008ba6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008ba2:	230f      	movs	r3, #15
 8008ba4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <validate+0x7e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	e000      	b.n	8008bb4 <validate+0x80>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	6013      	str	r3, [r2, #0]
	return res;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008bd6:	f107 0310 	add.w	r3, r7, #16
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fcbb 	bl	8008556 <get_ldnumber>
 8008be0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	da01      	bge.n	8008bec <f_mount+0x28>
 8008be8:	230b      	movs	r3, #11
 8008bea:	e048      	b.n	8008c7e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008bec:	4a26      	ldr	r2, [pc, #152]	; (8008c88 <f_mount+0xc4>)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00f      	beq.n	8008c1c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f7fe fd6f 	bl	80076e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fd99 	bl	800973e <ff_del_syncobj>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <f_mount+0x52>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e033      	b.n	8008c7e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00f      	beq.n	8008c42 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	330c      	adds	r3, #12
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f000 fd63 	bl	80096fe <ff_cre_syncobj>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <f_mount+0x7e>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e01d      	b.n	8008c7e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4910      	ldr	r1, [pc, #64]	; (8008c88 <f_mount+0xc4>)
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <f_mount+0x94>
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d001      	beq.n	8008c5c <f_mount+0x98>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e010      	b.n	8008c7e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c5c:	f107 010c 	add.w	r1, r7, #12
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	2200      	movs	r2, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fd10 	bl	800868c <find_volume>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7dfa      	ldrb	r2, [r7, #23]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fbce 	bl	8007418 <unlock_fs>
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200009f4 	.word	0x200009f4

08008c8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b098      	sub	sp, #96	; 0x60
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4613      	mov	r3, r2
 8008c98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <f_open+0x18>
 8008ca0:	2309      	movs	r3, #9
 8008ca2:	e1b4      	b.n	800900e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008caa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008cac:	79fa      	ldrb	r2, [r7, #7]
 8008cae:	f107 0110 	add.w	r1, r7, #16
 8008cb2:	f107 0308 	add.w	r3, r7, #8
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fce8 	bl	800868c <find_volume>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8191 	bne.w	8008fee <f_open+0x362>
		dj.obj.fs = fs;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	f107 0314 	add.w	r3, r7, #20
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fbcb 	bl	8008474 <follow_path>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11a      	bne.n	8008d22 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008cec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008cf0:	b25b      	sxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da03      	bge.n	8008cfe <f_open+0x72>
				res = FR_INVALID_NAME;
 8008cf6:	2306      	movs	r3, #6
 8008cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cfc:	e011      	b.n	8008d22 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	f023 0301 	bic.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fb9a 	bl	8007450 <chk_lock>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	f003 031c 	and.w	r3, r3, #28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d07f      	beq.n	8008e2c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d017      	beq.n	8008d64 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d10e      	bne.n	8008d5a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d3c:	f7fe fbe4 	bl	8007508 <enq_lock>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <f_open+0xc8>
 8008d46:	f107 0314 	add.w	r3, r7, #20
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff facb 	bl	80082e6 <dir_register>
 8008d50:	4603      	mov	r3, r0
 8008d52:	e000      	b.n	8008d56 <f_open+0xca>
 8008d54:	2312      	movs	r3, #18
 8008d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	f043 0308 	orr.w	r3, r3, #8
 8008d60:	71fb      	strb	r3, [r7, #7]
 8008d62:	e010      	b.n	8008d86 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d64:	7ebb      	ldrb	r3, [r7, #26]
 8008d66:	f003 0311 	and.w	r3, r3, #17
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <f_open+0xea>
					res = FR_DENIED;
 8008d6e:	2307      	movs	r3, #7
 8008d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d74:	e007      	b.n	8008d86 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <f_open+0xfa>
 8008d80:	2308      	movs	r3, #8
 8008d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d168      	bne.n	8008e60 <f_open+0x1d4>
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d063      	beq.n	8008e60 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008d98:	f7fd fc4e 	bl	8006638 <get_fattime>
 8008d9c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	330e      	adds	r3, #14
 8008da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fa77 	bl	8007298 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	3316      	adds	r3, #22
 8008dae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fa71 	bl	8007298 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	330b      	adds	r3, #11
 8008dba:	2220      	movs	r2, #32
 8008dbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff f9fa 	bl	80081be <ld_clust>
 8008dca:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff fa12 	bl	80081fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	331c      	adds	r3, #28
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fa5a 	bl	8007298 <st_dword>
					fs->wflag = 1;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2201      	movs	r2, #1
 8008de8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d037      	beq.n	8008e60 <f_open+0x1d4>
						dw = fs->winsect;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008df6:	f107 0314 	add.w	r3, r7, #20
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe ff25 	bl	8007c4e <remove_chain>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d126      	bne.n	8008e60 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fcca 	bl	80077b0 <move_window>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e26:	3a01      	subs	r2, #1
 8008e28:	611a      	str	r2, [r3, #16]
 8008e2a:	e019      	b.n	8008e60 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d115      	bne.n	8008e60 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e34:	7ebb      	ldrb	r3, [r7, #26]
 8008e36:	f003 0310 	and.w	r3, r3, #16
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008e3e:	2304      	movs	r3, #4
 8008e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e44:	e00c      	b.n	8008e60 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <f_open+0x1d4>
 8008e50:	7ebb      	ldrb	r3, [r7, #26]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <f_open+0x1d4>
						res = FR_DENIED;
 8008e5a:	2307      	movs	r3, #7
 8008e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d128      	bne.n	8008eba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	f023 0301 	bic.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f107 0314 	add.w	r3, r7, #20
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fb53 	bl	800754c <inc_lock>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <f_open+0x22e>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 8095 	bne.w	8008fee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff f977 	bl	80081be <ld_clust>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	331c      	adds	r3, #28
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe f99e 	bl	800721c <ld_dword>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	88da      	ldrh	r2, [r3, #6]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	79fa      	ldrb	r2, [r7, #7]
 8008efe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3330      	adds	r3, #48	; 0x30
 8008f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fa08 	bl	8007332 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d060      	beq.n	8008fee <f_open+0x362>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d05c      	beq.n	8008fee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	895b      	ldrh	r3, [r3, #10]
 8008f40:	025b      	lsls	r3, r3, #9
 8008f42:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f50:	e016      	b.n	8008f80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fce5 	bl	8007926 <get_fat>
 8008f5c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d802      	bhi.n	8008f6a <f_open+0x2de>
 8008f64:	2302      	movs	r3, #2
 8008f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f70:	d102      	bne.n	8008f78 <f_open+0x2ec>
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <f_open+0x304>
 8008f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d8e0      	bhi.n	8008f52 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d127      	bne.n	8008fee <f_open+0x362>
 8008f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d022      	beq.n	8008fee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fc9b 	bl	80078e8 <clust2sect>
 8008fb2:	6478      	str	r0, [r7, #68]	; 0x44
 8008fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <f_open+0x336>
						res = FR_INT_ERR;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fc0:	e015      	b.n	8008fee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc4:	0a5a      	lsrs	r2, r3, #9
 8008fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc8:	441a      	add	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	7858      	ldrb	r0, [r3, #1]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1a      	ldr	r2, [r3, #32]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f7fe f8a7 	bl	8007130 <disk_read>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <f_open+0x362>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008fee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <f_open+0x370>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fa07 	bl	8007418 <unlock_fs>
 800900a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800900e:	4618      	mov	r0, r3
 8009010:	3760      	adds	r7, #96	; 0x60
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b08c      	sub	sp, #48	; 0x30
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
 8009022:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f107 0210 	add.w	r2, r7, #16
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fd7c 	bl	8008b34 <validate>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009046:	2b00      	cmp	r3, #0
 8009048:	d107      	bne.n	800905a <f_write+0x44>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	7d5b      	ldrb	r3, [r3, #21]
 800904e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <f_write+0x58>
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe f9d8 	bl	8007418 <unlock_fs>
 8009068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800906c:	e173      	b.n	8009356 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	7d1b      	ldrb	r3, [r3, #20]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <f_write+0x72>
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2107      	movs	r1, #7
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe f9ca 	bl	8007418 <unlock_fs>
 8009084:	2307      	movs	r3, #7
 8009086:	e166      	b.n	8009356 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	699a      	ldr	r2, [r3, #24]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	441a      	add	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	429a      	cmp	r2, r3
 8009096:	f080 814b 	bcs.w	8009330 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	43db      	mvns	r3, r3
 80090a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80090a2:	e145      	b.n	8009330 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 8101 	bne.w	80092b4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	0a5b      	lsrs	r3, r3, #9
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	8952      	ldrh	r2, [r2, #10]
 80090bc:	3a01      	subs	r2, #1
 80090be:	4013      	ands	r3, r2
 80090c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d14d      	bne.n	8009164 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10c      	bne.n	80090ea <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11a      	bne.n	8009112 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fe19 	bl	8007d18 <create_chain>
 80090e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80090e8:	e013      	b.n	8009112 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7fe fea5 	bl	8007e48 <clmt_clust>
 80090fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8009100:	e007      	b.n	8009112 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fe04 	bl	8007d18 <create_chain>
 8009110:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8110 	beq.w	800933a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	2b01      	cmp	r3, #1
 800911e:	d109      	bne.n	8009134 <f_write+0x11e>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2202      	movs	r2, #2
 8009124:	755a      	strb	r2, [r3, #21]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2102      	movs	r1, #2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe f974 	bl	8007418 <unlock_fs>
 8009130:	2302      	movs	r3, #2
 8009132:	e110      	b.n	8009356 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d109      	bne.n	8009150 <f_write+0x13a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	755a      	strb	r2, [r3, #21]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2101      	movs	r1, #1
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f966 	bl	8007418 <unlock_fs>
 800914c:	2301      	movs	r3, #1
 800914e:	e102      	b.n	8009356 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009154:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <f_write+0x14e>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009162:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	7d1b      	ldrb	r3, [r3, #20]
 8009168:	b25b      	sxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	da1d      	bge.n	80091aa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	7858      	ldrb	r0, [r3, #1]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a1a      	ldr	r2, [r3, #32]
 800917c:	2301      	movs	r3, #1
 800917e:	f7fd fff7 	bl	8007170 <disk_write>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <f_write+0x186>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	755a      	strb	r2, [r3, #21]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2101      	movs	r1, #1
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f940 	bl	8007418 <unlock_fs>
 8009198:	2301      	movs	r3, #1
 800919a:	e0dc      	b.n	8009356 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe fb98 	bl	80078e8 <clust2sect>
 80091b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <f_write+0x1be>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2202      	movs	r2, #2
 80091c4:	755a      	strb	r2, [r3, #21]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2102      	movs	r1, #2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe f924 	bl	8007418 <unlock_fs>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e0c0      	b.n	8009356 <f_write+0x340>
			sect += csect;
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	4413      	add	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	0a5b      	lsrs	r3, r3, #9
 80091e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d041      	beq.n	800926c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	4413      	add	r3, r2
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	8952      	ldrh	r2, [r2, #10]
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d905      	bls.n	8009202 <f_write+0x1ec>
					cc = fs->csize - csect;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	895b      	ldrh	r3, [r3, #10]
 80091fa:	461a      	mov	r2, r3
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	7858      	ldrb	r0, [r3, #1]
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	69f9      	ldr	r1, [r7, #28]
 800920c:	f7fd ffb0 	bl	8007170 <disk_write>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <f_write+0x214>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	755a      	strb	r2, [r3, #21]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2101      	movs	r1, #1
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe f8f9 	bl	8007418 <unlock_fs>
 8009226:	2301      	movs	r3, #1
 8009228:	e095      	b.n	8009356 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	6a3a      	ldr	r2, [r7, #32]
 8009234:	429a      	cmp	r2, r3
 8009236:	d915      	bls.n	8009264 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1a      	ldr	r2, [r3, #32]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	025b      	lsls	r3, r3, #9
 8009248:	69fa      	ldr	r2, [r7, #28]
 800924a:	4413      	add	r3, r2
 800924c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009250:	4619      	mov	r1, r3
 8009252:	f7fe f84d 	bl	80072f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	7d1b      	ldrb	r3, [r3, #20]
 800925a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925e:	b2da      	uxtb	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	025b      	lsls	r3, r3, #9
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800926a:	e044      	b.n	80092f6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	429a      	cmp	r2, r3
 8009274:	d01b      	beq.n	80092ae <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800927e:	429a      	cmp	r2, r3
 8009280:	d215      	bcs.n	80092ae <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	7858      	ldrb	r0, [r3, #1]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800928c:	2301      	movs	r3, #1
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	f7fd ff4e 	bl	8007130 <disk_read>
 8009294:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	755a      	strb	r2, [r3, #21]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2101      	movs	r1, #1
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe f8b7 	bl	8007418 <unlock_fs>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e053      	b.n	8009356 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80092c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d901      	bls.n	80092ce <f_write+0x2b8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092dc:	4413      	add	r3, r2
 80092de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e0:	69f9      	ldr	r1, [r7, #28]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe f804 	bl	80072f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	4413      	add	r3, r2
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	441a      	add	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	619a      	str	r2, [r3, #24]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	429a      	cmp	r2, r3
 8009314:	bf38      	it	cc
 8009316:	461a      	movcc	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	60da      	str	r2, [r3, #12]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	441a      	add	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f aeb6 	bne.w	80090a4 <f_write+0x8e>
 8009338:	e000      	b.n	800933c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800933a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	7d1b      	ldrb	r3, [r3, #20]
 8009340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009344:	b2da      	uxtb	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe f862 	bl	8007418 <unlock_fs>
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3730      	adds	r7, #48	; 0x30
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f107 0208 	add.w	r2, r7, #8
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fbe0 	bl	8008b34 <validate>
 8009374:	4603      	mov	r3, r0
 8009376:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d16d      	bne.n	800945a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7d1b      	ldrb	r3, [r3, #20]
 8009382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d067      	beq.n	800945a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7d1b      	ldrb	r3, [r3, #20]
 800938e:	b25b      	sxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	da1a      	bge.n	80093ca <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	7858      	ldrb	r0, [r3, #1]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1a      	ldr	r2, [r3, #32]
 80093a2:	2301      	movs	r3, #1
 80093a4:	f7fd fee4 	bl	8007170 <disk_write>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <f_sync+0x5e>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2101      	movs	r1, #1
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe f830 	bl	8007418 <unlock_fs>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e055      	b.n	8009468 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7d1b      	ldrb	r3, [r3, #20]
 80093c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80093ca:	f7fd f935 	bl	8006638 <get_fattime>
 80093ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7fe f9e9 	bl	80077b0 <move_window>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d138      	bne.n	800945a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	330b      	adds	r3, #11
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	330b      	adds	r3, #11
 80093f8:	f042 0220 	orr.w	r2, r2, #32
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	461a      	mov	r2, r3
 800940a:	68f9      	ldr	r1, [r7, #12]
 800940c:	f7fe fef6 	bl	80081fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f103 021c 	add.w	r2, r3, #28
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fd ff3b 	bl	8007298 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3316      	adds	r3, #22
 8009426:	6939      	ldr	r1, [r7, #16]
 8009428:	4618      	mov	r0, r3
 800942a:	f7fd ff35 	bl	8007298 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3312      	adds	r3, #18
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd ff14 	bl	8007262 <st_word>
					fs->wflag = 1;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2201      	movs	r2, #1
 800943e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe f9e2 	bl	800780c <sync_fs>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7d1b      	ldrb	r3, [r3, #20]
 8009450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009454:	b2da      	uxtb	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	7dfa      	ldrb	r2, [r7, #23]
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7fd ffd9 	bl	8007418 <unlock_fs>
 8009466:	7dfb      	ldrb	r3, [r7, #23]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ff70 	bl	800935e <f_sync>
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d11d      	bne.n	80094c4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f107 0208 	add.w	r2, r7, #8
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff fb4f 	bl	8008b34 <validate>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d111      	bne.n	80094c4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe f8df 	bl	8007668 <dec_lock>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd ffaa 	bl	8007418 <unlock_fs>
#endif
		}
	}
	return res;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b092      	sub	sp, #72	; 0x48
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80094da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	2200      	movs	r2, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff f8d1 	bl	800868c <find_volume>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80094f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f040 8099 	bne.w	800962c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80094fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	3b02      	subs	r3, #2
 800950a:	429a      	cmp	r2, r3
 800950c:	d804      	bhi.n	8009518 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	695a      	ldr	r2, [r3, #20]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e089      	b.n	800962c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d128      	bne.n	8009576 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009524:	2302      	movs	r3, #2
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe f9f7 	bl	8007926 <get_fat>
 8009538:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009540:	d103      	bne.n	800954a <f_getfree+0x7c>
 8009542:	2301      	movs	r3, #1
 8009544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009548:	e063      	b.n	8009612 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d103      	bne.n	8009558 <f_getfree+0x8a>
 8009550:	2302      	movs	r3, #2
 8009552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009556:	e05c      	b.n	8009612 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <f_getfree+0x96>
 800955e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009560:	3301      	adds	r3, #1
 8009562:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009566:	3301      	adds	r3, #1
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009570:	429a      	cmp	r2, r3
 8009572:	d3db      	bcc.n	800952c <f_getfree+0x5e>
 8009574:	e04d      	b.n	8009612 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	637b      	str	r3, [r7, #52]	; 0x34
 8009586:	2300      	movs	r3, #0
 8009588:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800958a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958c:	2b00      	cmp	r3, #0
 800958e:	d113      	bne.n	80095b8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	63ba      	str	r2, [r7, #56]	; 0x38
 8009598:	4619      	mov	r1, r3
 800959a:	f7fe f909 	bl	80077b0 <move_window>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80095a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d131      	bne.n	8009610 <f_getfree+0x142>
							p = fs->win;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	3334      	adds	r3, #52	; 0x34
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80095b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d10f      	bne.n	80095e0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80095c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095c2:	f7fd fe13 	bl	80071ec <ld_word>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <f_getfree+0x104>
 80095cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ce:	3301      	adds	r3, #1
 80095d0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	3302      	adds	r3, #2
 80095d6:	633b      	str	r3, [r7, #48]	; 0x30
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	3b02      	subs	r3, #2
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
 80095de:	e010      	b.n	8009602 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80095e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095e2:	f7fd fe1b 	bl	800721c <ld_dword>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <f_getfree+0x128>
 80095f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f2:	3301      	adds	r3, #1
 80095f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	3304      	adds	r3, #4
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
 80095fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fe:	3b04      	subs	r3, #4
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	3b01      	subs	r3, #1
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1bd      	bne.n	800958a <f_getfree+0xbc>
 800960e:	e000      	b.n	8009612 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009610:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009616:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	791a      	ldrb	r2, [r3, #4]
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	f042 0201 	orr.w	r2, r2, #1
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd feef 	bl	8007418 <unlock_fs>
 800963a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800963e:	4618      	mov	r0, r3
 8009640:	3748      	adds	r7, #72	; 0x48
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800965e:	4b1f      	ldr	r3, [pc, #124]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009660:	7a5b      	ldrb	r3, [r3, #9]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d131      	bne.n	80096cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 800966a:	7a5b      	ldrb	r3, [r3, #9]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009672:	2100      	movs	r1, #0
 8009674:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009676:	4b19      	ldr	r3, [pc, #100]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009678:	7a5b      	ldrb	r3, [r3, #9]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	4a17      	ldr	r2, [pc, #92]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009686:	4b15      	ldr	r3, [pc, #84]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009688:	7a5b      	ldrb	r3, [r3, #9]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	461a      	mov	r2, r3
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009690:	4413      	add	r3, r2
 8009692:	79fa      	ldrb	r2, [r7, #7]
 8009694:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 8009698:	7a5b      	ldrb	r3, [r3, #9]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	b2d1      	uxtb	r1, r2
 80096a0:	4a0e      	ldr	r2, [pc, #56]	; (80096dc <FATFS_LinkDriverEx+0x94>)
 80096a2:	7251      	strb	r1, [r2, #9]
 80096a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096a6:	7dbb      	ldrb	r3, [r7, #22]
 80096a8:	3330      	adds	r3, #48	; 0x30
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3301      	adds	r3, #1
 80096b4:	223a      	movs	r2, #58	; 0x3a
 80096b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3302      	adds	r3, #2
 80096bc:	222f      	movs	r2, #47	; 0x2f
 80096be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3303      	adds	r3, #3
 80096c4:	2200      	movs	r2, #0
 80096c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20000a1c 	.word	0x20000a1c

080096e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096ea:	2200      	movs	r2, #0
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ffaa 	bl	8009648 <FATFS_LinkDriverEx>
 80096f4:	4603      	mov	r3, r0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	4603      	mov	r3, r0
 8009706:	6039      	str	r1, [r7, #0]
 8009708:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	2300      	movs	r3, #0
 8009710:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009712:	f107 030c 	add.w	r3, r7, #12
 8009716:	2101      	movs	r1, #1
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f8d9 	bl	80098d0 <osSemaphoreCreate>
 800971e:	4602      	mov	r2, r0
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bf14      	ite	ne
 800972c:	2301      	movne	r3, #1
 800972e:	2300      	moveq	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	617b      	str	r3, [r7, #20]

    return ret;
 8009734:	697b      	ldr	r3, [r7, #20]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f978 	bl	8009a3c <osSemaphoreDelete>
#endif
    return 1;
 800974c:	2301      	movs	r3, #1
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009762:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f8e4 	bl	8009934 <osSemaphoreWait>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009772:	2301      	movs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009776:	68fb      	ldr	r3, [r7, #12]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f921 	bl	80099d0 <osSemaphoreRelease>
#endif
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	4603      	mov	r3, r0
 800979e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097a8:	2b84      	cmp	r3, #132	; 0x84
 80097aa:	d005      	beq.n	80097b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	3303      	adds	r3, #3
 80097b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097b8:	68fb      	ldr	r3, [r7, #12]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097cc:	f3ef 8305 	mrs	r3, IPSR
 80097d0:	607b      	str	r3, [r7, #4]
  return(result);
 80097d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
}
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097ee:	f001 fa23 	bl	800ac38 <vTaskStartScheduler>
  
  return osOK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fa:	b089      	sub	sp, #36	; 0x24
 80097fc:	af04      	add	r7, sp, #16
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d020      	beq.n	800984c <osThreadCreate+0x54>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01c      	beq.n	800984c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685c      	ldr	r4, [r3, #4]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681d      	ldr	r5, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691e      	ldr	r6, [r3, #16]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff ffb6 	bl	8009796 <makeFreeRtosPriority>
 800982a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009834:	9202      	str	r2, [sp, #8]
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	9100      	str	r1, [sp, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	4632      	mov	r2, r6
 800983e:	4629      	mov	r1, r5
 8009840:	4620      	mov	r0, r4
 8009842:	f000 ff8b 	bl	800a75c <xTaskCreateStatic>
 8009846:	4603      	mov	r3, r0
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e01c      	b.n	8009886 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685c      	ldr	r4, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009858:	b29e      	uxth	r6, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ff98 	bl	8009796 <makeFreeRtosPriority>
 8009866:	4602      	mov	r2, r0
 8009868:	f107 030c 	add.w	r3, r7, #12
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	9200      	str	r2, [sp, #0]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	4632      	mov	r2, r6
 8009874:	4629      	mov	r1, r5
 8009876:	4620      	mov	r0, r4
 8009878:	f000 ffcd 	bl	800a816 <xTaskCreate>
 800987c:	4603      	mov	r3, r0
 800987e:	2b01      	cmp	r3, #1
 8009880:	d001      	beq.n	8009886 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009886:	68fb      	ldr	r3, [r7, #12]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009890 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 f909 	bl	800aab0 <vTaskDelete>
  return osOK;
 800989e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <osDelay+0x16>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	e000      	b.n	80098c0 <osDelay+0x18>
 80098be:	2301      	movs	r3, #1
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 f985 	bl	800abd0 <vTaskDelay>
  
  return osOK;
 80098c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00f      	beq.n	8009902 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d10a      	bne.n	80098fe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2203      	movs	r2, #3
 80098ee:	9200      	str	r2, [sp, #0]
 80098f0:	2200      	movs	r2, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	2001      	movs	r0, #1
 80098f6:	f000 f9d1 	bl	8009c9c <xQueueGenericCreateStatic>
 80098fa:	4603      	mov	r3, r0
 80098fc:	e016      	b.n	800992c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	e014      	b.n	800992c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d110      	bne.n	800992a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009908:	2203      	movs	r2, #3
 800990a:	2100      	movs	r1, #0
 800990c:	2001      	movs	r0, #1
 800990e:	f000 fa3d 	bl	8009d8c <xQueueGenericCreate>
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <osSemaphoreCreate+0x56>
 800991a:	2300      	movs	r3, #0
 800991c:	2200      	movs	r2, #0
 800991e:	2100      	movs	r1, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fa8d 	bl	8009e40 <xQueueGenericSend>
      return sema;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	e000      	b.n	800992c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800992a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800993e:	2300      	movs	r3, #0
 8009940:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009948:	2380      	movs	r3, #128	; 0x80
 800994a:	e03a      	b.n	80099c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009956:	d103      	bne.n	8009960 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009958:	f04f 33ff 	mov.w	r3, #4294967295
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e009      	b.n	8009974 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d006      	beq.n	8009974 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <osSemaphoreWait+0x40>
      ticks = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009974:	f7ff ff27 	bl	80097c6 <inHandlerMode>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d017      	beq.n	80099ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800997e:	f107 0308 	add.w	r3, r7, #8
 8009982:	461a      	mov	r2, r3
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fcf2 	bl	800a370 <xQueueReceiveFromISR>
 800998c:	4603      	mov	r3, r0
 800998e:	2b01      	cmp	r3, #1
 8009990:	d001      	beq.n	8009996 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009992:	23ff      	movs	r3, #255	; 0xff
 8009994:	e015      	b.n	80099c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d011      	beq.n	80099c0 <osSemaphoreWait+0x8c>
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <osSemaphoreWait+0x98>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	e008      	b.n	80099c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fbd1 	bl	800a158 <xQueueSemaphoreTake>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d001      	beq.n	80099c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80099bc:	23ff      	movs	r3, #255	; 0xff
 80099be:	e000      	b.n	80099c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80099e0:	f7ff fef1 	bl	80097c6 <inHandlerMode>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d016      	beq.n	8009a18 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb23 	bl	800a03c <xQueueGiveFromISR>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d001      	beq.n	8009a00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80099fc:	23ff      	movs	r3, #255	; 0xff
 80099fe:	e017      	b.n	8009a30 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d013      	beq.n	8009a2e <osSemaphoreRelease+0x5e>
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <osSemaphoreRelease+0x68>)
 8009a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	e00a      	b.n	8009a2e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa0e 	bl	8009e40 <xQueueGenericSend>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d001      	beq.n	8009a2e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009a2a:	23ff      	movs	r3, #255	; 0xff
 8009a2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009a44:	f7ff febf 	bl	80097c6 <inHandlerMode>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009a4e:	2382      	movs	r3, #130	; 0x82
 8009a50:	e003      	b.n	8009a5a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fd0c 	bl	800a470 <vQueueDelete>

  return osOK; 
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f103 0208 	add.w	r2, r3, #8
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f103 0208 	add.w	r2, r3, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f103 0208 	add.w	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d103      	bne.n	8009b24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e00c      	b.n	8009b3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3308      	adds	r3, #8
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e002      	b.n	8009b32 <vListInsert+0x2e>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d2f6      	bcs.n	8009b2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	601a      	str	r2, [r3, #0]
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6892      	ldr	r2, [r2, #8]
 8009b8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6852      	ldr	r2, [r2, #4]
 8009b96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d103      	bne.n	8009baa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	1e5a      	subs	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bf6:	f001 ff8d 	bl	800bb14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c06:	fb01 f303 	mul.w	r3, r1, r3
 8009c0a:	441a      	add	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c26:	3b01      	subs	r3, #1
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	441a      	add	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	22ff      	movs	r2, #255	; 0xff
 8009c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d114      	bne.n	8009c76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01a      	beq.n	8009c8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3310      	adds	r3, #16
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 fa4f 	bl	800b0fc <xTaskRemoveFromEventList>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d012      	beq.n	8009c8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c64:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <xQueueGenericReset+0xcc>)
 8009c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	e009      	b.n	8009c8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3310      	adds	r3, #16
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fef1 	bl	8009a62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff feec 	bl	8009a62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c8a:	f001 ff73 	bl	800bb74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c8e:	2301      	movs	r3, #1
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <xQueueGenericCreateStatic+0x52>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <xQueueGenericCreateStatic+0x56>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <xQueueGenericCreateStatic+0x58>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	623b      	str	r3, [r7, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d102      	bne.n	8009d1a <xQueueGenericCreateStatic+0x7e>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <xQueueGenericCreateStatic+0x82>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e000      	b.n	8009d20 <xQueueGenericCreateStatic+0x84>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	61fb      	str	r3, [r7, #28]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d3a:	2348      	movs	r3, #72	; 0x48
 8009d3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b48      	cmp	r3, #72	; 0x48
 8009d42:	d00a      	beq.n	8009d5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	61bb      	str	r3, [r7, #24]
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00d      	beq.n	8009d82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	4613      	mov	r3, r2
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	68b9      	ldr	r1, [r7, #8]
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f83f 	bl	8009e00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3730      	adds	r7, #48	; 0x30
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	fb02 f303 	mul.w	r3, r2, r3
 8009dbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	3348      	adds	r3, #72	; 0x48
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 ffc7 	bl	800bd58 <pvPortMalloc>
 8009dca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d011      	beq.n	8009df6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	3348      	adds	r3, #72	; 0x48
 8009dda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009de4:	79fa      	ldrb	r2, [r7, #7]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	4613      	mov	r3, r2
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f805 	bl	8009e00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009df6:	69bb      	ldr	r3, [r7, #24]
	}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d103      	bne.n	8009e1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	e002      	b.n	8009e22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e2e:	2101      	movs	r1, #1
 8009e30:	69b8      	ldr	r0, [r7, #24]
 8009e32:	f7ff fecb 	bl	8009bcc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08e      	sub	sp, #56	; 0x38
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xQueueGenericSend+0x32>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <xQueueGenericSend+0x40>
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <xQueueGenericSend+0x44>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <xQueueGenericSend+0x46>
 8009e84:	2300      	movs	r3, #0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <xQueueGenericSend+0x60>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSend+0x6e>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <xQueueGenericSend+0x72>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueGenericSend+0x74>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <xQueueGenericSend+0x8e>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	623b      	str	r3, [r7, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ece:	f001 fad5 	bl	800b47c <xTaskGetSchedulerState>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <xQueueGenericSend+0x9e>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <xQueueGenericSend+0xa2>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <xQueueGenericSend+0xa4>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xQueueGenericSend+0xbe>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61fb      	str	r3, [r7, #28]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009efe:	f001 fe09 	bl	800bb14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d302      	bcc.n	8009f14 <xQueueGenericSend+0xd4>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d129      	bne.n	8009f68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1a:	f000 fae4 	bl	800a4e6 <prvCopyDataToQueue>
 8009f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d010      	beq.n	8009f4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	3324      	adds	r3, #36	; 0x24
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f8e5 	bl	800b0fc <xTaskRemoveFromEventList>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d013      	beq.n	8009f60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f38:	4b3f      	ldr	r3, [pc, #252]	; (800a038 <xQueueGenericSend+0x1f8>)
 8009f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	e00a      	b.n	8009f60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f50:	4b39      	ldr	r3, [pc, #228]	; (800a038 <xQueueGenericSend+0x1f8>)
 8009f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f60:	f001 fe08 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e063      	b.n	800a030 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d103      	bne.n	8009f76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f6e:	f001 fe01 	bl	800bb74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e05c      	b.n	800a030 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f7c:	f107 0314 	add.w	r3, r7, #20
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 f91d 	bl	800b1c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f86:	2301      	movs	r3, #1
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f8a:	f001 fdf3 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f8e:	f000 febd 	bl	800ad0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f92:	f001 fdbf 	bl	800bb14 <vPortEnterCritical>
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f9c:	b25b      	sxtb	r3, r3
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d103      	bne.n	8009fac <xQueueGenericSend+0x16c>
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fb2:	b25b      	sxtb	r3, r3
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d103      	bne.n	8009fc2 <xQueueGenericSend+0x182>
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fc2:	f001 fdd7 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fc6:	1d3a      	adds	r2, r7, #4
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 f90c 	bl	800b1ec <xTaskCheckForTimeOut>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d124      	bne.n	800a024 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fdc:	f000 fb7b 	bl	800a6d6 <prvIsQueueFull>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d018      	beq.n	800a018 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	3310      	adds	r3, #16
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f860 	bl	800b0b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ff6:	f000 fb06 	bl	800a606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ffa:	f000 fe95 	bl	800ad28 <xTaskResumeAll>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f af7c 	bne.w	8009efe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <xQueueGenericSend+0x1f8>)
 800a008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	e772      	b.n	8009efe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01a:	f000 faf4 	bl	800a606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a01e:	f000 fe83 	bl	800ad28 <xTaskResumeAll>
 800a022:	e76c      	b.n	8009efe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a026:	f000 faee 	bl	800a606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a02a:	f000 fe7d 	bl	800ad28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a02e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a030:	4618      	mov	r0, r3
 800a032:	3738      	adds	r7, #56	; 0x38
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	; 0x38
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	623b      	str	r3, [r7, #32]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	61fb      	str	r3, [r7, #28]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <xQueueGiveFromISR+0x58>
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <xQueueGiveFromISR+0x5c>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <xQueueGiveFromISR+0x5e>
 800a098:	2300      	movs	r3, #0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	61bb      	str	r3, [r7, #24]
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0b4:	f001 fe10 	bl	800bcd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0b8:	f3ef 8211 	mrs	r2, BASEPRI
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	617a      	str	r2, [r7, #20]
 800a0ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d22b      	bcs.n	800a13c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d112      	bne.n	800a126 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d016      	beq.n	800a136 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	3324      	adds	r3, #36	; 0x24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fff5 	bl	800b0fc <xTaskRemoveFromEventList>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00e      	beq.n	800a136 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e007      	b.n	800a136 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a12a:	3301      	adds	r3, #1
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	b25a      	sxtb	r2, r3
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a136:	2301      	movs	r3, #1
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
 800a13a:	e001      	b.n	800a140 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	637b      	str	r3, [r7, #52]	; 0x34
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a14a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3738      	adds	r7, #56	; 0x38
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a162:	2300      	movs	r3, #0
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	623b      	str	r3, [r7, #32]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61fb      	str	r3, [r7, #28]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a8:	f001 f968 	bl	800b47c <xTaskGetSchedulerState>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <xQueueSemaphoreTake+0x60>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <xQueueSemaphoreTake+0x64>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <xQueueSemaphoreTake+0x66>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	61bb      	str	r3, [r7, #24]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d8:	f001 fc9c 	bl	800bb14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d024      	beq.n	800a232 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1f8:	f001 fae8 	bl	800b7cc <pvTaskIncrementMutexHeldCount>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00f      	beq.n	800a22a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	3310      	adds	r3, #16
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 ff74 	bl	800b0fc <xTaskRemoveFromEventList>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a21a:	4b54      	ldr	r3, [pc, #336]	; (800a36c <xQueueSemaphoreTake+0x214>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a22a:	f001 fca3 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 800a22e:	2301      	movs	r3, #1
 800a230:	e097      	b.n	800a362 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d111      	bne.n	800a25c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	617b      	str	r3, [r7, #20]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a254:	f001 fc8e 	bl	800bb74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a258:	2300      	movs	r3, #0
 800a25a:	e082      	b.n	800a362 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	4618      	mov	r0, r3
 800a268:	f000 ffaa 	bl	800b1c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a26c:	2301      	movs	r3, #1
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a270:	f001 fc80 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a274:	f000 fd4a 	bl	800ad0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a278:	f001 fc4c 	bl	800bb14 <vPortEnterCritical>
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a282:	b25b      	sxtb	r3, r3
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d103      	bne.n	800a292 <xQueueSemaphoreTake+0x13a>
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a298:	b25b      	sxtb	r3, r3
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29e:	d103      	bne.n	800a2a8 <xQueueSemaphoreTake+0x150>
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2a8:	f001 fc64 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ac:	463a      	mov	r2, r7
 800a2ae:	f107 030c 	add.w	r3, r7, #12
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 ff99 	bl	800b1ec <xTaskCheckForTimeOut>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d132      	bne.n	800a326 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2c2:	f000 f9f2 	bl	800a6aa <prvIsQueueEmpty>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d026      	beq.n	800a31a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d109      	bne.n	800a2e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a2d4:	f001 fc1e 	bl	800bb14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f001 f8eb 	bl	800b4b8 <xTaskPriorityInherit>
 800a2e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a2e4:	f001 fc46 	bl	800bb74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	3324      	adds	r3, #36	; 0x24
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fedf 	bl	800b0b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2f8:	f000 f985 	bl	800a606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2fc:	f000 fd14 	bl	800ad28 <xTaskResumeAll>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	f47f af68 	bne.w	800a1d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a308:	4b18      	ldr	r3, [pc, #96]	; (800a36c <xQueueSemaphoreTake+0x214>)
 800a30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	e75e      	b.n	800a1d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a31c:	f000 f973 	bl	800a606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a320:	f000 fd02 	bl	800ad28 <xTaskResumeAll>
 800a324:	e758      	b.n	800a1d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a328:	f000 f96d 	bl	800a606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a32c:	f000 fcfc 	bl	800ad28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a332:	f000 f9ba 	bl	800a6aa <prvIsQueueEmpty>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f43f af4d 	beq.w	800a1d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a344:	f001 fbe6 	bl	800bb14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a34a:	f000 f8b4 	bl	800a4b6 <prvGetDisinheritPriorityAfterTimeout>
 800a34e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a356:	4618      	mov	r0, r3
 800a358:	f001 f9aa 	bl	800b6b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a35c:	f001 fc0a 	bl	800bb74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a362:	4618      	mov	r0, r3
 800a364:	3738      	adds	r7, #56	; 0x38
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	; 0x38
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	623b      	str	r3, [r7, #32]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <xQueueReceiveFromISR+0x3a>
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <xQueueReceiveFromISR+0x3e>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e000      	b.n	800a3b0 <xQueueReceiveFromISR+0x40>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	61fb      	str	r3, [r7, #28]
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ca:	f001 fc85 	bl	800bcd8 <vPortValidateInterruptPriority>
	__asm volatile
 800a3ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	61ba      	str	r2, [r7, #24]
 800a3e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02f      	beq.n	800a456 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a404:	f000 f8d9 	bl	800a5ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d112      	bne.n	800a440 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d016      	beq.n	800a450 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	3310      	adds	r3, #16
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fe68 	bl	800b0fc <xTaskRemoveFromEventList>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e007      	b.n	800a450 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a444:	3301      	adds	r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	b25a      	sxtb	r2, r3
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a450:	2301      	movs	r3, #1
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
 800a454:	e001      	b.n	800a45a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a456:	2300      	movs	r3, #0
 800a458:	637b      	str	r3, [r7, #52]	; 0x34
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f383 8811 	msr	BASEPRI, r3
}
 800a464:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3738      	adds	r7, #56	; 0x38
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <vQueueDelete+0x28>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60bb      	str	r3, [r7, #8]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f935 	bl	800a708 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f001 fd21 	bl	800bef0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d006      	beq.n	800a4d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f1c3 0307 	rsb	r3, r3, #7
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	e001      	b.n	800a4d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
	}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10d      	bne.n	800a520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d14d      	bne.n	800a5a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	4618      	mov	r0, r3
 800a512:	f001 f847 	bl	800b5a4 <xTaskPriorityDisinherit>
 800a516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	609a      	str	r2, [r3, #8]
 800a51e:	e043      	b.n	800a5a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d119      	bne.n	800a55a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6858      	ldr	r0, [r3, #4]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	461a      	mov	r2, r3
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	f001 ff4e 	bl	800c3d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53e:	441a      	add	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d32b      	bcc.n	800a5a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	605a      	str	r2, [r3, #4]
 800a558:	e026      	b.n	800a5a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	68d8      	ldr	r0, [r3, #12]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	461a      	mov	r2, r3
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	f001 ff34 	bl	800c3d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68da      	ldr	r2, [r3, #12]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a572:	425b      	negs	r3, r3
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d207      	bcs.n	800a596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	425b      	negs	r3, r3
 800a590:	441a      	add	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d105      	bne.n	800a5a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5b0:	697b      	ldr	r3, [r7, #20]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d018      	beq.n	800a5fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d4:	441a      	add	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d303      	bcc.n	800a5ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68d9      	ldr	r1, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6838      	ldr	r0, [r7, #0]
 800a5fa:	f001 feea 	bl	800c3d2 <memcpy>
	}
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a60e:	f001 fa81 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a61a:	e011      	b.n	800a640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d012      	beq.n	800a64a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fd67 	bl	800b0fc <xTaskRemoveFromEventList>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a634:	f000 fe3c 	bl	800b2b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	dce9      	bgt.n	800a61c <prvUnlockQueue+0x16>
 800a648:	e000      	b.n	800a64c <prvUnlockQueue+0x46>
					break;
 800a64a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	22ff      	movs	r2, #255	; 0xff
 800a650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a654:	f001 fa8e 	bl	800bb74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a658:	f001 fa5c 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a664:	e011      	b.n	800a68a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d012      	beq.n	800a694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fd42 	bl	800b0fc <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a67e:	f000 fe17 	bl	800b2b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	3b01      	subs	r3, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a68a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dce9      	bgt.n	800a666 <prvUnlockQueue+0x60>
 800a692:	e000      	b.n	800a696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	22ff      	movs	r2, #255	; 0xff
 800a69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a69e:	f001 fa69 	bl	800bb74 <vPortExitCritical>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6b2:	f001 fa2f 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	e001      	b.n	800a6c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6c8:	f001 fa54 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6de:	f001 fa19 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d102      	bne.n	800a6f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	e001      	b.n	800a6f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6f8:	f001 fa3c 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e016      	b.n	800a744 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a716:	4a10      	ldr	r2, [pc, #64]	; (800a758 <vQueueUnregisterQueue+0x50>)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	4413      	add	r3, r2
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d10b      	bne.n	800a73e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a726:	4a0c      	ldr	r2, [pc, #48]	; (800a758 <vQueueUnregisterQueue+0x50>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2100      	movs	r1, #0
 800a72c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a730:	4a09      	ldr	r2, [pc, #36]	; (800a758 <vQueueUnregisterQueue+0x50>)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4413      	add	r3, r2
 800a738:	2200      	movs	r2, #0
 800a73a:	605a      	str	r2, [r3, #4]
				break;
 800a73c:	e006      	b.n	800a74c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b07      	cmp	r3, #7
 800a748:	d9e5      	bls.n	800a716 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	20008b34 	.word	0x20008b34

0800a75c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af04      	add	r7, sp, #16
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
 800a768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	623b      	str	r3, [r7, #32]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	61fb      	str	r3, [r7, #28]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7a2:	23b4      	movs	r3, #180	; 0xb4
 800a7a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2bb4      	cmp	r3, #180	; 0xb4
 800a7aa:	d00a      	beq.n	800a7c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	61bb      	str	r3, [r7, #24]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a7c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01e      	beq.n	800a808 <xTaskCreateStatic+0xac>
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01b      	beq.n	800a808 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	2202      	movs	r2, #2
 800a7de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	f107 0314 	add.w	r3, r7, #20
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	68b9      	ldr	r1, [r7, #8]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 f850 	bl	800a8a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a802:	f000 f8eb 	bl	800a9dc <prvAddNewTaskToReadyList>
 800a806:	e001      	b.n	800a80c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a80c:	697b      	ldr	r3, [r7, #20]
	}
 800a80e:	4618      	mov	r0, r3
 800a810:	3728      	adds	r7, #40	; 0x28
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a816:	b580      	push	{r7, lr}
 800a818:	b08c      	sub	sp, #48	; 0x30
 800a81a:	af04      	add	r7, sp, #16
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fa94 	bl	800bd58 <pvPortMalloc>
 800a830:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a838:	20b4      	movs	r0, #180	; 0xb4
 800a83a:	f001 fa8d 	bl	800bd58 <pvPortMalloc>
 800a83e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30
 800a84c:	e005      	b.n	800a85a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	f001 fb4e 	bl	800bef0 <vPortFree>
 800a854:	e001      	b.n	800a85a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d017      	beq.n	800a890 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a868:	88fa      	ldrh	r2, [r7, #6]
 800a86a:	2300      	movs	r3, #0
 800a86c:	9303      	str	r3, [sp, #12]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f80e 	bl	800a8a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a884:	69f8      	ldr	r0, [r7, #28]
 800a886:	f000 f8a9 	bl	800a9dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a88a:	2301      	movs	r3, #1
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	e002      	b.n	800a896 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a890:	f04f 33ff 	mov.w	r3, #4294967295
 800a894:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a896:	69bb      	ldr	r3, [r7, #24]
	}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	f023 0307 	bic.w	r3, r3, #7
 800a8c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	f003 0307 	and.w	r3, r3, #7
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00a      	beq.n	800a8e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	617b      	str	r3, [r7, #20]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d01f      	beq.n	800a92e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e012      	b.n	800a91a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	7819      	ldrb	r1, [r3, #0]
 800a8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	4413      	add	r3, r2
 800a902:	3334      	adds	r3, #52	; 0x34
 800a904:	460a      	mov	r2, r1
 800a906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	4413      	add	r3, r2
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	3301      	adds	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	2b0f      	cmp	r3, #15
 800a91e:	d9e9      	bls.n	800a8f4 <prvInitialiseNewTask+0x54>
 800a920:	e000      	b.n	800a924 <prvInitialiseNewTask+0x84>
			{
				break;
 800a922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a92c:	e003      	b.n	800a936 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	2b06      	cmp	r3, #6
 800a93a:	d901      	bls.n	800a940 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a93c:	2306      	movs	r3, #6
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	2200      	movs	r2, #0
 800a950:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	3304      	adds	r3, #4
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff f8a3 	bl	8009aa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	3318      	adds	r3, #24
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff f89e 	bl	8009aa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	f1c3 0207 	rsb	r2, r3, #7
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a97a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	2200      	movs	r2, #0
 800a988:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	334c      	adds	r3, #76	; 0x4c
 800a990:	2260      	movs	r2, #96	; 0x60
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f001 fd44 	bl	800c422 <memset>
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <prvInitialiseNewTask+0x130>)
 800a99e:	651a      	str	r2, [r3, #80]	; 0x50
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	4a0c      	ldr	r2, [pc, #48]	; (800a9d4 <prvInitialiseNewTask+0x134>)
 800a9a4:	655a      	str	r2, [r3, #84]	; 0x54
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <prvInitialiseNewTask+0x138>)
 800a9aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	69b8      	ldr	r0, [r7, #24]
 800a9b2:	f000 ff85 	bl	800b8c0 <pxPortInitialiseStack>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9c8:	bf00      	nop
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	08010228 	.word	0x08010228
 800a9d4:	08010248 	.word	0x08010248
 800a9d8:	08010208 	.word	0x08010208

0800a9dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9e4:	f001 f896 	bl	800bb14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9e8:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <prvAddNewTaskToReadyList+0xb8>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	4a29      	ldr	r2, [pc, #164]	; (800aa94 <prvAddNewTaskToReadyList+0xb8>)
 800a9f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9f2:	4b29      	ldr	r3, [pc, #164]	; (800aa98 <prvAddNewTaskToReadyList+0xbc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9fa:	4a27      	ldr	r2, [pc, #156]	; (800aa98 <prvAddNewTaskToReadyList+0xbc>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa00:	4b24      	ldr	r3, [pc, #144]	; (800aa94 <prvAddNewTaskToReadyList+0xb8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d110      	bne.n	800aa2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa08:	f000 fc76 	bl	800b2f8 <prvInitialiseTaskLists>
 800aa0c:	e00d      	b.n	800aa2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa0e:	4b23      	ldr	r3, [pc, #140]	; (800aa9c <prvAddNewTaskToReadyList+0xc0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d109      	bne.n	800aa2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa16:	4b20      	ldr	r3, [pc, #128]	; (800aa98 <prvAddNewTaskToReadyList+0xbc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d802      	bhi.n	800aa2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa24:	4a1c      	ldr	r2, [pc, #112]	; (800aa98 <prvAddNewTaskToReadyList+0xbc>)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <prvAddNewTaskToReadyList+0xc4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	4a1b      	ldr	r2, [pc, #108]	; (800aaa0 <prvAddNewTaskToReadyList+0xc4>)
 800aa32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	2201      	movs	r2, #1
 800aa3a:	409a      	lsls	r2, r3
 800aa3c:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <prvAddNewTaskToReadyList+0xc8>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <prvAddNewTaskToReadyList+0xc8>)
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4a15      	ldr	r2, [pc, #84]	; (800aaa8 <prvAddNewTaskToReadyList+0xcc>)
 800aa54:	441a      	add	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f7ff f82d 	bl	8009abc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa62:	f001 f887 	bl	800bb74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa66:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <prvAddNewTaskToReadyList+0xc0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <prvAddNewTaskToReadyList+0xbc>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d207      	bcs.n	800aa8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <prvAddNewTaskToReadyList+0xd0>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000b28 	.word	0x20000b28
 800aa98:	20000a28 	.word	0x20000a28
 800aa9c:	20000b34 	.word	0x20000b34
 800aaa0:	20000b44 	.word	0x20000b44
 800aaa4:	20000b30 	.word	0x20000b30
 800aaa8:	20000a2c 	.word	0x20000a2c
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aab8:	f001 f82c 	bl	800bb14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <vTaskDelete+0x18>
 800aac2:	4b39      	ldr	r3, [pc, #228]	; (800aba8 <vTaskDelete+0xf8>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	e000      	b.n	800aaca <vTaskDelete+0x1a>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3304      	adds	r3, #4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff f850 	bl	8009b76 <uxListRemove>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d115      	bne.n	800ab08 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	4932      	ldr	r1, [pc, #200]	; (800abac <vTaskDelete+0xfc>)
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <vTaskDelete+0x58>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	43da      	mvns	r2, r3
 800aafe:	4b2c      	ldr	r3, [pc, #176]	; (800abb0 <vTaskDelete+0x100>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4013      	ands	r3, r2
 800ab04:	4a2a      	ldr	r2, [pc, #168]	; (800abb0 <vTaskDelete+0x100>)
 800ab06:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d004      	beq.n	800ab1a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3318      	adds	r3, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff f82e 	bl	8009b76 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ab1a:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <vTaskDelete+0x104>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	4a24      	ldr	r2, [pc, #144]	; (800abb4 <vTaskDelete+0x104>)
 800ab22:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ab24:	4b20      	ldr	r3, [pc, #128]	; (800aba8 <vTaskDelete+0xf8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d10b      	bne.n	800ab46 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4619      	mov	r1, r3
 800ab34:	4820      	ldr	r0, [pc, #128]	; (800abb8 <vTaskDelete+0x108>)
 800ab36:	f7fe ffc1 	bl	8009abc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ab3a:	4b20      	ldr	r3, [pc, #128]	; (800abbc <vTaskDelete+0x10c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	4a1e      	ldr	r2, [pc, #120]	; (800abbc <vTaskDelete+0x10c>)
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	e009      	b.n	800ab5a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ab46:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <vTaskDelete+0x110>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <vTaskDelete+0x110>)
 800ab4e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fc3f 	bl	800b3d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ab56:	f000 fc71 	bl	800b43c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ab5a:	f001 f80b 	bl	800bb74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ab5e:	4b19      	ldr	r3, [pc, #100]	; (800abc4 <vTaskDelete+0x114>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ab66:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <vTaskDelete+0xf8>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d116      	bne.n	800ab9e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ab70:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <vTaskDelete+0x118>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <vTaskDelete+0xde>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	60bb      	str	r3, [r7, #8]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <vTaskDelete+0x11c>)
 800ab90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab9e:	bf00      	nop
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20000a28 	.word	0x20000a28
 800abac:	20000a2c 	.word	0x20000a2c
 800abb0:	20000b30 	.word	0x20000b30
 800abb4:	20000b44 	.word	0x20000b44
 800abb8:	20000afc 	.word	0x20000afc
 800abbc:	20000b10 	.word	0x20000b10
 800abc0:	20000b28 	.word	0x20000b28
 800abc4:	20000b34 	.word	0x20000b34
 800abc8:	20000b50 	.word	0x20000b50
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d017      	beq.n	800ac12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <vTaskDelay+0x60>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <vTaskDelay+0x30>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60bb      	str	r3, [r7, #8]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac00:	f000 f884 	bl	800ad0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac04:	2100      	movs	r1, #0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fdf4 	bl	800b7f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac0c:	f000 f88c 	bl	800ad28 <xTaskResumeAll>
 800ac10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d107      	bne.n	800ac28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac18:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <vTaskDelay+0x64>)
 800ac1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000b50 	.word	0x20000b50
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac46:	463a      	mov	r2, r7
 800ac48:	1d39      	adds	r1, r7, #4
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f6 fab6 	bl	80011c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	9202      	str	r2, [sp, #8]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	460a      	mov	r2, r1
 800ac66:	4921      	ldr	r1, [pc, #132]	; (800acec <vTaskStartScheduler+0xb4>)
 800ac68:	4821      	ldr	r0, [pc, #132]	; (800acf0 <vTaskStartScheduler+0xb8>)
 800ac6a:	f7ff fd77 	bl	800a75c <xTaskCreateStatic>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4a20      	ldr	r2, [pc, #128]	; (800acf4 <vTaskStartScheduler+0xbc>)
 800ac72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac74:	4b1f      	ldr	r3, [pc, #124]	; (800acf4 <vTaskStartScheduler+0xbc>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e001      	b.n	800ac86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d11b      	bne.n	800acc4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	613b      	str	r3, [r7, #16]
}
 800ac9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aca0:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <vTaskStartScheduler+0xc0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	334c      	adds	r3, #76	; 0x4c
 800aca6:	4a15      	ldr	r2, [pc, #84]	; (800acfc <vTaskStartScheduler+0xc4>)
 800aca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acaa:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <vTaskStartScheduler+0xc8>)
 800acac:	f04f 32ff 	mov.w	r2, #4294967295
 800acb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <vTaskStartScheduler+0xcc>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acb8:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <vTaskStartScheduler+0xd0>)
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acbe:	f000 fe87 	bl	800b9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acc2:	e00e      	b.n	800ace2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d10a      	bne.n	800ace2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60fb      	str	r3, [r7, #12]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <vTaskStartScheduler+0xa8>
}
 800ace2:	bf00      	nop
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	0800f394 	.word	0x0800f394
 800acf0:	0800b2c9 	.word	0x0800b2c9
 800acf4:	20000b4c 	.word	0x20000b4c
 800acf8:	20000a28 	.word	0x20000a28
 800acfc:	20000044 	.word	0x20000044
 800ad00:	20000b48 	.word	0x20000b48
 800ad04:	20000b34 	.word	0x20000b34
 800ad08:	20000b2c 	.word	0x20000b2c

0800ad0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad10:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <vTaskSuspendAll+0x18>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3301      	adds	r3, #1
 800ad16:	4a03      	ldr	r2, [pc, #12]	; (800ad24 <vTaskSuspendAll+0x18>)
 800ad18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad1a:	bf00      	nop
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000b50 	.word	0x20000b50

0800ad28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad36:	4b41      	ldr	r3, [pc, #260]	; (800ae3c <xTaskResumeAll+0x114>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	603b      	str	r3, [r7, #0]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad54:	f000 fede 	bl	800bb14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad58:	4b38      	ldr	r3, [pc, #224]	; (800ae3c <xTaskResumeAll+0x114>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	4a37      	ldr	r2, [pc, #220]	; (800ae3c <xTaskResumeAll+0x114>)
 800ad60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad62:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <xTaskResumeAll+0x114>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d161      	bne.n	800ae2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad6a:	4b35      	ldr	r3, [pc, #212]	; (800ae40 <xTaskResumeAll+0x118>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d05d      	beq.n	800ae2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad72:	e02e      	b.n	800add2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad74:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <xTaskResumeAll+0x11c>)
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3318      	adds	r3, #24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fef8 	bl	8009b76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fef3 	bl	8009b76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad94:	2201      	movs	r2, #1
 800ad96:	409a      	lsls	r2, r3
 800ad98:	4b2b      	ldr	r3, [pc, #172]	; (800ae48 <xTaskResumeAll+0x120>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	4a2a      	ldr	r2, [pc, #168]	; (800ae48 <xTaskResumeAll+0x120>)
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4a27      	ldr	r2, [pc, #156]	; (800ae4c <xTaskResumeAll+0x124>)
 800adb0:	441a      	add	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7fe fe7f 	bl	8009abc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <xTaskResumeAll+0x128>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d302      	bcc.n	800add2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800adcc:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <xTaskResumeAll+0x12c>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <xTaskResumeAll+0x11c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1cc      	bne.n	800ad74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ade0:	f000 fb2c 	bl	800b43c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ade4:	4b1c      	ldr	r3, [pc, #112]	; (800ae58 <xTaskResumeAll+0x130>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adf0:	f000 f836 	bl	800ae60 <xTaskIncrementTick>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <xTaskResumeAll+0x12c>)
 800adfc:	2201      	movs	r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1f1      	bne.n	800adf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ae0c:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <xTaskResumeAll+0x130>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae12:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <xTaskResumeAll+0x12c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d009      	beq.n	800ae2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <xTaskResumeAll+0x134>)
 800ae20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae2e:	f000 fea1 	bl	800bb74 <vPortExitCritical>

	return xAlreadyYielded;
 800ae32:	68bb      	ldr	r3, [r7, #8]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000b50 	.word	0x20000b50
 800ae40:	20000b28 	.word	0x20000b28
 800ae44:	20000ae8 	.word	0x20000ae8
 800ae48:	20000b30 	.word	0x20000b30
 800ae4c:	20000a2c 	.word	0x20000a2c
 800ae50:	20000a28 	.word	0x20000a28
 800ae54:	20000b3c 	.word	0x20000b3c
 800ae58:	20000b38 	.word	0x20000b38
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae6a:	4b4e      	ldr	r3, [pc, #312]	; (800afa4 <xTaskIncrementTick+0x144>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f040 808e 	bne.w	800af90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae74:	4b4c      	ldr	r3, [pc, #304]	; (800afa8 <xTaskIncrementTick+0x148>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae7c:	4a4a      	ldr	r2, [pc, #296]	; (800afa8 <xTaskIncrementTick+0x148>)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d120      	bne.n	800aeca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae88:	4b48      	ldr	r3, [pc, #288]	; (800afac <xTaskIncrementTick+0x14c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	603b      	str	r3, [r7, #0]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xTaskIncrementTick+0x46>
 800aea8:	4b40      	ldr	r3, [pc, #256]	; (800afac <xTaskIncrementTick+0x14c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	4b40      	ldr	r3, [pc, #256]	; (800afb0 <xTaskIncrementTick+0x150>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a3e      	ldr	r2, [pc, #248]	; (800afac <xTaskIncrementTick+0x14c>)
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	4a3e      	ldr	r2, [pc, #248]	; (800afb0 <xTaskIncrementTick+0x150>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	4b3d      	ldr	r3, [pc, #244]	; (800afb4 <xTaskIncrementTick+0x154>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3301      	adds	r3, #1
 800aec2:	4a3c      	ldr	r2, [pc, #240]	; (800afb4 <xTaskIncrementTick+0x154>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	f000 fab9 	bl	800b43c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aeca:	4b3b      	ldr	r3, [pc, #236]	; (800afb8 <xTaskIncrementTick+0x158>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d348      	bcc.n	800af66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed4:	4b35      	ldr	r3, [pc, #212]	; (800afac <xTaskIncrementTick+0x14c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d104      	bne.n	800aee8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aede:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <xTaskIncrementTick+0x158>)
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	601a      	str	r2, [r3, #0]
					break;
 800aee6:	e03e      	b.n	800af66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee8:	4b30      	ldr	r3, [pc, #192]	; (800afac <xTaskIncrementTick+0x14c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d203      	bcs.n	800af08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af00:	4a2d      	ldr	r2, [pc, #180]	; (800afb8 <xTaskIncrementTick+0x158>)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af06:	e02e      	b.n	800af66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fe32 	bl	8009b76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	3318      	adds	r3, #24
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fe29 	bl	8009b76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	2201      	movs	r2, #1
 800af2a:	409a      	lsls	r2, r3
 800af2c:	4b23      	ldr	r3, [pc, #140]	; (800afbc <xTaskIncrementTick+0x15c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4313      	orrs	r3, r2
 800af32:	4a22      	ldr	r2, [pc, #136]	; (800afbc <xTaskIncrementTick+0x15c>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4a1f      	ldr	r2, [pc, #124]	; (800afc0 <xTaskIncrementTick+0x160>)
 800af44:	441a      	add	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7fe fdb5 	bl	8009abc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af56:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <xTaskIncrementTick+0x164>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d3b9      	bcc.n	800aed4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af64:	e7b6      	b.n	800aed4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af66:	4b17      	ldr	r3, [pc, #92]	; (800afc4 <xTaskIncrementTick+0x164>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4914      	ldr	r1, [pc, #80]	; (800afc0 <xTaskIncrementTick+0x160>)
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d901      	bls.n	800af82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af82:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <xTaskIncrementTick+0x168>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d007      	beq.n	800af9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800af8a:	2301      	movs	r3, #1
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	e004      	b.n	800af9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af90:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <xTaskIncrementTick+0x16c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <xTaskIncrementTick+0x16c>)
 800af98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af9a:	697b      	ldr	r3, [r7, #20]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20000b50 	.word	0x20000b50
 800afa8:	20000b2c 	.word	0x20000b2c
 800afac:	20000ae0 	.word	0x20000ae0
 800afb0:	20000ae4 	.word	0x20000ae4
 800afb4:	20000b40 	.word	0x20000b40
 800afb8:	20000b48 	.word	0x20000b48
 800afbc:	20000b30 	.word	0x20000b30
 800afc0:	20000a2c 	.word	0x20000a2c
 800afc4:	20000a28 	.word	0x20000a28
 800afc8:	20000b3c 	.word	0x20000b3c
 800afcc:	20000b38 	.word	0x20000b38

0800afd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afd6:	4b31      	ldr	r3, [pc, #196]	; (800b09c <vTaskSwitchContext+0xcc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afde:	4b30      	ldr	r3, [pc, #192]	; (800b0a0 <vTaskSwitchContext+0xd0>)
 800afe0:	2201      	movs	r2, #1
 800afe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afe4:	e055      	b.n	800b092 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800afe6:	4b2e      	ldr	r3, [pc, #184]	; (800b0a0 <vTaskSwitchContext+0xd0>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800afec:	4b2d      	ldr	r3, [pc, #180]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4b2c      	ldr	r3, [pc, #176]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff8:	429a      	cmp	r2, r3
 800affa:	d808      	bhi.n	800b00e <vTaskSwitchContext+0x3e>
 800affc:	4b29      	ldr	r3, [pc, #164]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3334      	adds	r3, #52	; 0x34
 800b006:	4619      	mov	r1, r3
 800b008:	4610      	mov	r0, r2
 800b00a:	f7f5 ff49 	bl	8000ea0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00e:	4b26      	ldr	r3, [pc, #152]	; (800b0a8 <vTaskSwitchContext+0xd8>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	fab3 f383 	clz	r3, r3
 800b01a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	f1c3 031f 	rsb	r3, r3, #31
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	4921      	ldr	r1, [pc, #132]	; (800b0ac <vTaskSwitchContext+0xdc>)
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <vTaskSwitchContext+0x7e>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	607b      	str	r3, [r7, #4]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <vTaskSwitchContext+0x7c>
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4a14      	ldr	r2, [pc, #80]	; (800b0ac <vTaskSwitchContext+0xdc>)
 800b05a:	4413      	add	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	605a      	str	r2, [r3, #4]
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	3308      	adds	r3, #8
 800b070:	429a      	cmp	r2, r3
 800b072:	d104      	bne.n	800b07e <vTaskSwitchContext+0xae>
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	605a      	str	r2, [r3, #4]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	4a07      	ldr	r2, [pc, #28]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800b086:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <vTaskSwitchContext+0xd4>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	334c      	adds	r3, #76	; 0x4c
 800b08e:	4a08      	ldr	r2, [pc, #32]	; (800b0b0 <vTaskSwitchContext+0xe0>)
 800b090:	6013      	str	r3, [r2, #0]
}
 800b092:	bf00      	nop
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000b50 	.word	0x20000b50
 800b0a0:	20000b3c 	.word	0x20000b3c
 800b0a4:	20000a28 	.word	0x20000a28
 800b0a8:	20000b30 	.word	0x20000b30
 800b0ac:	20000a2c 	.word	0x20000a2c
 800b0b0:	20000044 	.word	0x20000044

0800b0b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	60fb      	str	r3, [r7, #12]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0da:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <vTaskPlaceOnEventList+0x44>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3318      	adds	r3, #24
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fe fd0e 	bl	8009b04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6838      	ldr	r0, [r7, #0]
 800b0ec:	f000 fb82 	bl	800b7f4 <prvAddCurrentTaskToDelayedList>
}
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000a28 	.word	0x20000a28

0800b0fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	60fb      	str	r3, [r7, #12]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3318      	adds	r3, #24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fd22 	bl	8009b76 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <xTaskRemoveFromEventList+0xac>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d11c      	bne.n	800b174 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fd19 	bl	8009b76 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	2201      	movs	r2, #1
 800b14a:	409a      	lsls	r2, r3
 800b14c:	4b17      	ldr	r3, [pc, #92]	; (800b1ac <xTaskRemoveFromEventList+0xb0>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4313      	orrs	r3, r2
 800b152:	4a16      	ldr	r2, [pc, #88]	; (800b1ac <xTaskRemoveFromEventList+0xb0>)
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <xTaskRemoveFromEventList+0xb4>)
 800b164:	441a      	add	r2, r3
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fe fca5 	bl	8009abc <vListInsertEnd>
 800b172:	e005      	b.n	800b180 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	3318      	adds	r3, #24
 800b178:	4619      	mov	r1, r3
 800b17a:	480e      	ldr	r0, [pc, #56]	; (800b1b4 <xTaskRemoveFromEventList+0xb8>)
 800b17c:	f7fe fc9e 	bl	8009abc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <xTaskRemoveFromEventList+0xbc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d905      	bls.n	800b19a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b18e:	2301      	movs	r3, #1
 800b190:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b192:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <xTaskRemoveFromEventList+0xc0>)
 800b194:	2201      	movs	r2, #1
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e001      	b.n	800b19e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b19e:	697b      	ldr	r3, [r7, #20]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20000b50 	.word	0x20000b50
 800b1ac:	20000b30 	.word	0x20000b30
 800b1b0:	20000a2c 	.word	0x20000a2c
 800b1b4:	20000ae8 	.word	0x20000ae8
 800b1b8:	20000a28 	.word	0x20000a28
 800b1bc:	20000b3c 	.word	0x20000b3c

0800b1c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1c8:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <vTaskInternalSetTimeOutState+0x24>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <vTaskInternalSetTimeOutState+0x28>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	605a      	str	r2, [r3, #4]
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	20000b40 	.word	0x20000b40
 800b1e8:	20000b2c 	.word	0x20000b2c

0800b1ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	613b      	str	r3, [r7, #16]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10a      	bne.n	800b22e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	60fb      	str	r3, [r7, #12]
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b22e:	f000 fc71 	bl	800bb14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b232:	4b1d      	ldr	r3, [pc, #116]	; (800b2a8 <xTaskCheckForTimeOut+0xbc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24a:	d102      	bne.n	800b252 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	61fb      	str	r3, [r7, #28]
 800b250:	e023      	b.n	800b29a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <xTaskCheckForTimeOut+0xc0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d007      	beq.n	800b26e <xTaskCheckForTimeOut+0x82>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	61fb      	str	r3, [r7, #28]
 800b26c:	e015      	b.n	800b29a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	429a      	cmp	r2, r3
 800b276:	d20b      	bcs.n	800b290 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	1ad2      	subs	r2, r2, r3
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff ff9b 	bl	800b1c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
 800b28e:	e004      	b.n	800b29a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b296:	2301      	movs	r3, #1
 800b298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b29a:	f000 fc6b 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800b29e:	69fb      	ldr	r3, [r7, #28]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	20000b2c 	.word	0x20000b2c
 800b2ac:	20000b40 	.word	0x20000b40

0800b2b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2b4:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <vTaskMissedYield+0x14>)
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	20000b3c 	.word	0x20000b3c

0800b2c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b2d0:	f000 f852 	bl	800b378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b2d4:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <prvIdleTask+0x28>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d9f9      	bls.n	800b2d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <prvIdleTask+0x2c>)
 800b2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b2ec:	e7f0      	b.n	800b2d0 <prvIdleTask+0x8>
 800b2ee:	bf00      	nop
 800b2f0:	20000a2c 	.word	0x20000a2c
 800b2f4:	e000ed04 	.word	0xe000ed04

0800b2f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2fe:	2300      	movs	r3, #0
 800b300:	607b      	str	r3, [r7, #4]
 800b302:	e00c      	b.n	800b31e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4a12      	ldr	r2, [pc, #72]	; (800b358 <prvInitialiseTaskLists+0x60>)
 800b310:	4413      	add	r3, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fba5 	bl	8009a62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3301      	adds	r3, #1
 800b31c:	607b      	str	r3, [r7, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b06      	cmp	r3, #6
 800b322:	d9ef      	bls.n	800b304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b324:	480d      	ldr	r0, [pc, #52]	; (800b35c <prvInitialiseTaskLists+0x64>)
 800b326:	f7fe fb9c 	bl	8009a62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b32a:	480d      	ldr	r0, [pc, #52]	; (800b360 <prvInitialiseTaskLists+0x68>)
 800b32c:	f7fe fb99 	bl	8009a62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b330:	480c      	ldr	r0, [pc, #48]	; (800b364 <prvInitialiseTaskLists+0x6c>)
 800b332:	f7fe fb96 	bl	8009a62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b336:	480c      	ldr	r0, [pc, #48]	; (800b368 <prvInitialiseTaskLists+0x70>)
 800b338:	f7fe fb93 	bl	8009a62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b33c:	480b      	ldr	r0, [pc, #44]	; (800b36c <prvInitialiseTaskLists+0x74>)
 800b33e:	f7fe fb90 	bl	8009a62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b342:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <prvInitialiseTaskLists+0x78>)
 800b344:	4a05      	ldr	r2, [pc, #20]	; (800b35c <prvInitialiseTaskLists+0x64>)
 800b346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <prvInitialiseTaskLists+0x7c>)
 800b34a:	4a05      	ldr	r2, [pc, #20]	; (800b360 <prvInitialiseTaskLists+0x68>)
 800b34c:	601a      	str	r2, [r3, #0]
}
 800b34e:	bf00      	nop
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20000a2c 	.word	0x20000a2c
 800b35c:	20000ab8 	.word	0x20000ab8
 800b360:	20000acc 	.word	0x20000acc
 800b364:	20000ae8 	.word	0x20000ae8
 800b368:	20000afc 	.word	0x20000afc
 800b36c:	20000b14 	.word	0x20000b14
 800b370:	20000ae0 	.word	0x20000ae0
 800b374:	20000ae4 	.word	0x20000ae4

0800b378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b37e:	e019      	b.n	800b3b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b380:	f000 fbc8 	bl	800bb14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b384:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <prvCheckTasksWaitingTermination+0x50>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3304      	adds	r3, #4
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe fbf0 	bl	8009b76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <prvCheckTasksWaitingTermination+0x54>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	4a0b      	ldr	r2, [pc, #44]	; (800b3cc <prvCheckTasksWaitingTermination+0x54>)
 800b39e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <prvCheckTasksWaitingTermination+0x58>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	4a0a      	ldr	r2, [pc, #40]	; (800b3d0 <prvCheckTasksWaitingTermination+0x58>)
 800b3a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3aa:	f000 fbe3 	bl	800bb74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f810 	bl	800b3d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvCheckTasksWaitingTermination+0x58>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e1      	bne.n	800b380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20000afc 	.word	0x20000afc
 800b3cc:	20000b28 	.word	0x20000b28
 800b3d0:	20000b10 	.word	0x20000b10

0800b3d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	334c      	adds	r3, #76	; 0x4c
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f001 fe6b 	bl	800d0bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d108      	bne.n	800b402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fd7b 	bl	800bef0 <vPortFree>
				vPortFree( pxTCB );
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fd78 	bl	800bef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b400:	e018      	b.n	800b434 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d103      	bne.n	800b414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fd6f 	bl	800bef0 <vPortFree>
	}
 800b412:	e00f      	b.n	800b434 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d00a      	beq.n	800b434 <prvDeleteTCB+0x60>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60fb      	str	r3, [r7, #12]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <prvDeleteTCB+0x5e>
	}
 800b434:	bf00      	nop
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b442:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <prvResetNextTaskUnblockTime+0x38>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <prvResetNextTaskUnblockTime+0x3c>)
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b454:	e008      	b.n	800b468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b456:	4b07      	ldr	r3, [pc, #28]	; (800b474 <prvResetNextTaskUnblockTime+0x38>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	4a04      	ldr	r2, [pc, #16]	; (800b478 <prvResetNextTaskUnblockTime+0x3c>)
 800b466:	6013      	str	r3, [r2, #0]
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	20000ae0 	.word	0x20000ae0
 800b478:	20000b48 	.word	0x20000b48

0800b47c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b482:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <xTaskGetSchedulerState+0x34>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d102      	bne.n	800b490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b48a:	2301      	movs	r3, #1
 800b48c:	607b      	str	r3, [r7, #4]
 800b48e:	e008      	b.n	800b4a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b490:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <xTaskGetSchedulerState+0x38>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b498:	2302      	movs	r3, #2
 800b49a:	607b      	str	r3, [r7, #4]
 800b49c:	e001      	b.n	800b4a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4a2:	687b      	ldr	r3, [r7, #4]
	}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20000b34 	.word	0x20000b34
 800b4b4:	20000b50 	.word	0x20000b50

0800b4b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d05e      	beq.n	800b58c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d2:	4b31      	ldr	r3, [pc, #196]	; (800b598 <xTaskPriorityInherit+0xe0>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d24e      	bcs.n	800b57a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	db06      	blt.n	800b4f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e4:	4b2c      	ldr	r3, [pc, #176]	; (800b598 <xTaskPriorityInherit+0xe0>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ea:	f1c3 0207 	rsb	r2, r3, #7
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6959      	ldr	r1, [r3, #20]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4a26      	ldr	r2, [pc, #152]	; (800b59c <xTaskPriorityInherit+0xe4>)
 800b504:	4413      	add	r3, r2
 800b506:	4299      	cmp	r1, r3
 800b508:	d12f      	bne.n	800b56a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe fb31 	bl	8009b76 <uxListRemove>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	2201      	movs	r2, #1
 800b520:	fa02 f303 	lsl.w	r3, r2, r3
 800b524:	43da      	mvns	r2, r3
 800b526:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <xTaskPriorityInherit+0xe8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4013      	ands	r3, r2
 800b52c:	4a1c      	ldr	r2, [pc, #112]	; (800b5a0 <xTaskPriorityInherit+0xe8>)
 800b52e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b530:	4b19      	ldr	r3, [pc, #100]	; (800b598 <xTaskPriorityInherit+0xe0>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	2201      	movs	r2, #1
 800b540:	409a      	lsls	r2, r3
 800b542:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <xTaskPriorityInherit+0xe8>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4313      	orrs	r3, r2
 800b548:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <xTaskPriorityInherit+0xe8>)
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	4613      	mov	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4a10      	ldr	r2, [pc, #64]	; (800b59c <xTaskPriorityInherit+0xe4>)
 800b55a:	441a      	add	r2, r3
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	3304      	adds	r3, #4
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f7fe faaa 	bl	8009abc <vListInsertEnd>
 800b568:	e004      	b.n	800b574 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b56a:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <xTaskPriorityInherit+0xe0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b574:	2301      	movs	r3, #1
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e008      	b.n	800b58c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <xTaskPriorityInherit+0xe0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	429a      	cmp	r2, r3
 800b586:	d201      	bcs.n	800b58c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b588:	2301      	movs	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b58c:	68fb      	ldr	r3, [r7, #12]
	}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000a28 	.word	0x20000a28
 800b59c:	20000a2c 	.word	0x20000a2c
 800b5a0:	20000b30 	.word	0x20000b30

0800b5a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d06e      	beq.n	800b698 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5ba:	4b3a      	ldr	r3, [pc, #232]	; (800b6a4 <xTaskPriorityDisinherit+0x100>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d00a      	beq.n	800b5da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	60fb      	str	r3, [r7, #12]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	60bb      	str	r3, [r7, #8]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d044      	beq.n	800b698 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b612:	2b00      	cmp	r3, #0
 800b614:	d140      	bne.n	800b698 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	3304      	adds	r3, #4
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe faab 	bl	8009b76 <uxListRemove>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d115      	bne.n	800b652 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	491f      	ldr	r1, [pc, #124]	; (800b6a8 <xTaskPriorityDisinherit+0x104>)
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <xTaskPriorityDisinherit+0xae>
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	2201      	movs	r2, #1
 800b642:	fa02 f303 	lsl.w	r3, r2, r3
 800b646:	43da      	mvns	r2, r3
 800b648:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <xTaskPriorityDisinherit+0x108>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4013      	ands	r3, r2
 800b64e:	4a17      	ldr	r2, [pc, #92]	; (800b6ac <xTaskPriorityDisinherit+0x108>)
 800b650:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65e:	f1c3 0207 	rsb	r2, r3, #7
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66a:	2201      	movs	r2, #1
 800b66c:	409a      	lsls	r2, r3
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <xTaskPriorityDisinherit+0x108>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4313      	orrs	r3, r2
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <xTaskPriorityDisinherit+0x108>)
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4a08      	ldr	r2, [pc, #32]	; (800b6a8 <xTaskPriorityDisinherit+0x104>)
 800b686:	441a      	add	r2, r3
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4619      	mov	r1, r3
 800b68e:	4610      	mov	r0, r2
 800b690:	f7fe fa14 	bl	8009abc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b694:	2301      	movs	r3, #1
 800b696:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b698:	697b      	ldr	r3, [r7, #20]
	}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000a28 	.word	0x20000a28
 800b6a8:	20000a2c 	.word	0x20000a2c
 800b6ac:	20000b30 	.word	0x20000b30

0800b6b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d077      	beq.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10a      	bne.n	800b6e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d902      	bls.n	800b6f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	61fb      	str	r3, [r7, #28]
 800b6f4:	e002      	b.n	800b6fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	69fa      	ldr	r2, [r7, #28]
 800b702:	429a      	cmp	r2, r3
 800b704:	d058      	beq.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d153      	bne.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b710:	4b2b      	ldr	r3, [pc, #172]	; (800b7c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69ba      	ldr	r2, [r7, #24]
 800b716:	429a      	cmp	r2, r3
 800b718:	d10a      	bne.n	800b730 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	60bb      	str	r3, [r7, #8]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db04      	blt.n	800b74e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	f1c3 0207 	rsb	r2, r3, #7
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	6959      	ldr	r1, [r3, #20]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4a19      	ldr	r2, [pc, #100]	; (800b7c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b75e:	4413      	add	r3, r2
 800b760:	4299      	cmp	r1, r3
 800b762:	d129      	bne.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	3304      	adds	r3, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe fa04 	bl	8009b76 <uxListRemove>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	2201      	movs	r2, #1
 800b77a:	fa02 f303 	lsl.w	r3, r2, r3
 800b77e:	43da      	mvns	r2, r3
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4013      	ands	r3, r2
 800b786:	4a10      	ldr	r2, [pc, #64]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b788:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78e:	2201      	movs	r2, #1
 800b790:	409a      	lsls	r2, r3
 800b792:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4313      	orrs	r3, r2
 800b798:	4a0b      	ldr	r2, [pc, #44]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4a06      	ldr	r2, [pc, #24]	; (800b7c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b7aa:	441a      	add	r2, r3
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe f982 	bl	8009abc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7b8:	bf00      	nop
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000a28 	.word	0x20000a28
 800b7c4:	20000a2c 	.word	0x20000a2c
 800b7c8:	20000b30 	.word	0x20000b30

0800b7cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7de:	3201      	adds	r2, #1
 800b7e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b7e2:	4b03      	ldr	r3, [pc, #12]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
	}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20000a28 	.word	0x20000a28

0800b7f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7fe:	4b29      	ldr	r3, [pc, #164]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b804:	4b28      	ldr	r3, [pc, #160]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe f9b3 	bl	8009b76 <uxListRemove>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b816:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	2201      	movs	r2, #1
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	43da      	mvns	r2, r3
 800b824:	4b21      	ldr	r3, [pc, #132]	; (800b8ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4013      	ands	r3, r2
 800b82a:	4a20      	ldr	r2, [pc, #128]	; (800b8ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b82c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d10a      	bne.n	800b84c <prvAddCurrentTaskToDelayedList+0x58>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3304      	adds	r3, #4
 800b842:	4619      	mov	r1, r3
 800b844:	481a      	ldr	r0, [pc, #104]	; (800b8b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b846:	f7fe f939 	bl	8009abc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b84a:	e026      	b.n	800b89a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4413      	add	r3, r2
 800b852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b854:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	429a      	cmp	r2, r3
 800b862:	d209      	bcs.n	800b878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b864:	4b13      	ldr	r3, [pc, #76]	; (800b8b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fe f947 	bl	8009b04 <vListInsert>
}
 800b876:	e010      	b.n	800b89a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b878:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3304      	adds	r3, #4
 800b882:	4619      	mov	r1, r3
 800b884:	4610      	mov	r0, r2
 800b886:	f7fe f93d 	bl	8009b04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	d202      	bcs.n	800b89a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b894:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6013      	str	r3, [r2, #0]
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000b2c 	.word	0x20000b2c
 800b8a8:	20000a28 	.word	0x20000a28
 800b8ac:	20000b30 	.word	0x20000b30
 800b8b0:	20000b14 	.word	0x20000b14
 800b8b4:	20000ae4 	.word	0x20000ae4
 800b8b8:	20000ae0 	.word	0x20000ae0
 800b8bc:	20000b48 	.word	0x20000b48

0800b8c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3b04      	subs	r3, #4
 800b8d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3b04      	subs	r3, #4
 800b8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f023 0201 	bic.w	r2, r3, #1
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3b04      	subs	r3, #4
 800b8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8f0:	4a0c      	ldr	r2, [pc, #48]	; (800b924 <pxPortInitialiseStack+0x64>)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3b14      	subs	r3, #20
 800b8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3b04      	subs	r3, #4
 800b906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f06f 0202 	mvn.w	r2, #2
 800b90e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3b20      	subs	r3, #32
 800b914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	0800b929 	.word	0x0800b929

0800b928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b932:	4b12      	ldr	r3, [pc, #72]	; (800b97c <prvTaskExitError+0x54>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93a:	d00a      	beq.n	800b952 <prvTaskExitError+0x2a>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <prvTaskExitError+0x28>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	60bb      	str	r3, [r7, #8]
}
 800b964:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b966:	bf00      	nop
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0fc      	beq.n	800b968 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	20000040 	.word	0x20000040

0800b980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <pxCurrentTCBConst2>)
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	6808      	ldr	r0, [r1, #0]
 800b986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98a:	f380 8809 	msr	PSP, r0
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f04f 0000 	mov.w	r0, #0
 800b996:	f380 8811 	msr	BASEPRI, r0
 800b99a:	4770      	bx	lr
 800b99c:	f3af 8000 	nop.w

0800b9a0 <pxCurrentTCBConst2>:
 800b9a0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop

0800b9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9a8:	4808      	ldr	r0, [pc, #32]	; (800b9cc <prvPortStartFirstTask+0x24>)
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f380 8808 	msr	MSP, r0
 800b9b2:	f04f 0000 	mov.w	r0, #0
 800b9b6:	f380 8814 	msr	CONTROL, r0
 800b9ba:	b662      	cpsie	i
 800b9bc:	b661      	cpsie	f
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	df00      	svc	0
 800b9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ca:	bf00      	nop
 800b9cc:	e000ed08 	.word	0xe000ed08

0800b9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9d6:	4b46      	ldr	r3, [pc, #280]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a46      	ldr	r2, [pc, #280]	; (800baf4 <xPortStartScheduler+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d10a      	bne.n	800b9f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	613b      	str	r3, [r7, #16]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9f6:	4b3e      	ldr	r3, [pc, #248]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a3f      	ldr	r2, [pc, #252]	; (800baf8 <xPortStartScheduler+0x128>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10a      	bne.n	800ba16 <xPortStartScheduler+0x46>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba16:	4b39      	ldr	r3, [pc, #228]	; (800bafc <xPortStartScheduler+0x12c>)
 800ba18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b31      	ldr	r3, [pc, #196]	; (800bb00 <xPortStartScheduler+0x130>)
 800ba3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba3e:	4b31      	ldr	r3, [pc, #196]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba40:	2207      	movs	r2, #7
 800ba42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba44:	e009      	b.n	800ba5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba46:	4b2f      	ldr	r3, [pc, #188]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4a2d      	ldr	r2, [pc, #180]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba62:	2b80      	cmp	r3, #128	; 0x80
 800ba64:	d0ef      	beq.n	800ba46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba66:	4b27      	ldr	r3, [pc, #156]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f1c3 0307 	rsb	r3, r3, #7
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d00a      	beq.n	800ba88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	60bb      	str	r3, [r7, #8]
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba88:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba92:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba9a:	4a1a      	ldr	r2, [pc, #104]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <xPortStartScheduler+0x138>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a17      	ldr	r2, [pc, #92]	; (800bb08 <xPortStartScheduler+0x138>)
 800baac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a14      	ldr	r2, [pc, #80]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800babc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800babe:	f000 f8dd 	bl	800bc7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bac2:	4b12      	ldr	r3, [pc, #72]	; (800bb0c <xPortStartScheduler+0x13c>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bac8:	f000 f8fc 	bl	800bcc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xPortStartScheduler+0x140>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a0f      	ldr	r2, [pc, #60]	; (800bb10 <xPortStartScheduler+0x140>)
 800bad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bad8:	f7ff ff66 	bl	800b9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800badc:	f7ff fa78 	bl	800afd0 <vTaskSwitchContext>
	prvTaskExitError();
 800bae0:	f7ff ff22 	bl	800b928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	e000ed00 	.word	0xe000ed00
 800baf4:	410fc271 	.word	0x410fc271
 800baf8:	410fc270 	.word	0x410fc270
 800bafc:	e000e400 	.word	0xe000e400
 800bb00:	20000b54 	.word	0x20000b54
 800bb04:	20000b58 	.word	0x20000b58
 800bb08:	e000ed20 	.word	0xe000ed20
 800bb0c:	20000040 	.word	0x20000040
 800bb10:	e000ef34 	.word	0xe000ef34

0800bb14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	607b      	str	r3, [r7, #4]
}
 800bb2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb38:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10f      	bne.n	800bb60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <vPortEnterCritical+0x5c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	603b      	str	r3, [r7, #0]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <vPortEnterCritical+0x4a>
	}
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20000040 	.word	0x20000040
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb7a:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <vPortExitCritical+0x24>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	607b      	str	r3, [r7, #4]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bba2:	4b08      	ldr	r3, [pc, #32]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d105      	bne.n	800bbb6 <vPortExitCritical+0x42>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f383 8811 	msr	BASEPRI, r3
}
 800bbb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20000040 	.word	0x20000040
	...

0800bbd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbd0:	f3ef 8009 	mrs	r0, PSP
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <pxCurrentTCBConst>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	f01e 0f10 	tst.w	lr, #16
 800bbe0:	bf08      	it	eq
 800bbe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	6010      	str	r0, [r2, #0]
 800bbec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbf4:	f380 8811 	msr	BASEPRI, r0
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f7ff f9e6 	bl	800afd0 <vTaskSwitchContext>
 800bc04:	f04f 0000 	mov.w	r0, #0
 800bc08:	f380 8811 	msr	BASEPRI, r0
 800bc0c:	bc09      	pop	{r0, r3}
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	6808      	ldr	r0, [r1, #0]
 800bc12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc16:	f01e 0f10 	tst.w	lr, #16
 800bc1a:	bf08      	it	eq
 800bc1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc20:	f380 8809 	msr	PSP, r0
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst>:
 800bc30:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc52:	f7ff f905 	bl	800ae60 <xTaskIncrementTick>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc5c:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <SysTick_Handler+0x40>)
 800bc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	2300      	movs	r3, #0
 800bc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
}
 800bc6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc86:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <vPortSetupTimerInterrupt+0x38>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <vPortSetupTimerInterrupt+0x3c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a0a      	ldr	r2, [pc, #40]	; (800bcbc <vPortSetupTimerInterrupt+0x40>)
 800bc92:	fba2 2303 	umull	r2, r3, r2, r3
 800bc96:	099b      	lsrs	r3, r3, #6
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <vPortSetupTimerInterrupt+0x44>)
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc9e:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	e000e010 	.word	0xe000e010
 800bcb4:	e000e018 	.word	0xe000e018
 800bcb8:	2000001c 	.word	0x2000001c
 800bcbc:	10624dd3 	.word	0x10624dd3
 800bcc0:	e000e014 	.word	0xe000e014

0800bcc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcd4 <vPortEnableVFP+0x10>
 800bcc8:	6801      	ldr	r1, [r0, #0]
 800bcca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcce:	6001      	str	r1, [r0, #0]
 800bcd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcd2:	bf00      	nop
 800bcd4:	e000ed88 	.word	0xe000ed88

0800bcd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcde:	f3ef 8305 	mrs	r3, IPSR
 800bce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b0f      	cmp	r3, #15
 800bce8:	d914      	bls.n	800bd14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <vPortValidateInterruptPriority+0x70>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcf4:	4b15      	ldr	r3, [pc, #84]	; (800bd4c <vPortValidateInterruptPriority+0x74>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	7afa      	ldrb	r2, [r7, #11]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d20a      	bcs.n	800bd14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	607b      	str	r3, [r7, #4]
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd14:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <vPortValidateInterruptPriority+0x78>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <vPortValidateInterruptPriority+0x7c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d90a      	bls.n	800bd3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	603b      	str	r3, [r7, #0]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <vPortValidateInterruptPriority+0x60>
	}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	e000e3f0 	.word	0xe000e3f0
 800bd4c:	20000b54 	.word	0x20000b54
 800bd50:	e000ed0c 	.word	0xe000ed0c
 800bd54:	20000b58 	.word	0x20000b58

0800bd58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd64:	f7fe ffd2 	bl	800ad0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd68:	4b5b      	ldr	r3, [pc, #364]	; (800bed8 <pvPortMalloc+0x180>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd70:	f000 f920 	bl	800bfb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd74:	4b59      	ldr	r3, [pc, #356]	; (800bedc <pvPortMalloc+0x184>)
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8093 	bne.w	800bea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01d      	beq.n	800bdc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd88:	2208      	movs	r2, #8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f003 0307 	and.w	r3, r3, #7
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d014      	beq.n	800bdc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	3308      	adds	r3, #8
 800bda2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f003 0307 	and.w	r3, r3, #7
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <pvPortMalloc+0x6c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	617b      	str	r3, [r7, #20]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d06e      	beq.n	800bea8 <pvPortMalloc+0x150>
 800bdca:	4b45      	ldr	r3, [pc, #276]	; (800bee0 <pvPortMalloc+0x188>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d869      	bhi.n	800bea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdd4:	4b43      	ldr	r3, [pc, #268]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdd8:	4b42      	ldr	r3, [pc, #264]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdde:	e004      	b.n	800bdea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d903      	bls.n	800bdfc <pvPortMalloc+0xa4>
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f1      	bne.n	800bde0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdfc:	4b36      	ldr	r3, [pc, #216]	; (800bed8 <pvPortMalloc+0x180>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be02:	429a      	cmp	r2, r3
 800be04:	d050      	beq.n	800bea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2208      	movs	r2, #8
 800be0c:	4413      	add	r3, r2
 800be0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	2308      	movs	r3, #8
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	429a      	cmp	r2, r3
 800be26:	d91f      	bls.n	800be68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <pvPortMalloc+0xf8>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	613b      	str	r3, [r7, #16]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	1ad2      	subs	r2, r2, r3
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be62:	69b8      	ldr	r0, [r7, #24]
 800be64:	f000 f908 	bl	800c078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be68:	4b1d      	ldr	r3, [pc, #116]	; (800bee0 <pvPortMalloc+0x188>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <pvPortMalloc+0x188>)
 800be74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be76:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <pvPortMalloc+0x188>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <pvPortMalloc+0x190>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d203      	bcs.n	800be8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be82:	4b17      	ldr	r3, [pc, #92]	; (800bee0 <pvPortMalloc+0x188>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a18      	ldr	r2, [pc, #96]	; (800bee8 <pvPortMalloc+0x190>)
 800be88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <pvPortMalloc+0x184>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	431a      	orrs	r2, r3
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <pvPortMalloc+0x194>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	4a11      	ldr	r2, [pc, #68]	; (800beec <pvPortMalloc+0x194>)
 800bea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bea8:	f7fe ff3e 	bl	800ad28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <pvPortMalloc+0x174>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	60fb      	str	r3, [r7, #12]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <pvPortMalloc+0x172>
	return pvReturn;
 800becc:	69fb      	ldr	r3, [r7, #28]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3728      	adds	r7, #40	; 0x28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20008094 	.word	0x20008094
 800bedc:	200080a8 	.word	0x200080a8
 800bee0:	20008098 	.word	0x20008098
 800bee4:	2000808c 	.word	0x2000808c
 800bee8:	2000809c 	.word	0x2000809c
 800beec:	200080a0 	.word	0x200080a0

0800bef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d04d      	beq.n	800bf9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf02:	2308      	movs	r3, #8
 800bf04:	425b      	negs	r3, r3
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <vPortFree+0xb8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4013      	ands	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <vPortFree+0x44>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	60fb      	str	r3, [r7, #12]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <vPortFree+0x62>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60bb      	str	r3, [r7, #8]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	4b14      	ldr	r3, [pc, #80]	; (800bfa8 <vPortFree+0xb8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d01e      	beq.n	800bf9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d11a      	bne.n	800bf9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <vPortFree+0xb8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	43db      	mvns	r3, r3
 800bf72:	401a      	ands	r2, r3
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf78:	f7fe fec8 	bl	800ad0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <vPortFree+0xbc>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4413      	add	r3, r2
 800bf86:	4a09      	ldr	r2, [pc, #36]	; (800bfac <vPortFree+0xbc>)
 800bf88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf8a:	6938      	ldr	r0, [r7, #16]
 800bf8c:	f000 f874 	bl	800c078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <vPortFree+0xc0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	4a06      	ldr	r2, [pc, #24]	; (800bfb0 <vPortFree+0xc0>)
 800bf98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf9a:	f7fe fec5 	bl	800ad28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf9e:	bf00      	nop
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200080a8 	.word	0x200080a8
 800bfac:	20008098 	.word	0x20008098
 800bfb0:	200080a4 	.word	0x200080a4

0800bfb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfba:	f247 5330 	movw	r3, #30000	; 0x7530
 800bfbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfc0:	4b27      	ldr	r3, [pc, #156]	; (800c060 <prvHeapInit+0xac>)
 800bfc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	4a1f      	ldr	r2, [pc, #124]	; (800c060 <prvHeapInit+0xac>)
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfec:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <prvHeapInit+0xb0>)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bff2:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <prvHeapInit+0xb0>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4413      	add	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c000:	2208      	movs	r2, #8
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4a15      	ldr	r2, [pc, #84]	; (800c068 <prvHeapInit+0xb4>)
 800c014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c016:	4b14      	ldr	r3, [pc, #80]	; (800c068 <prvHeapInit+0xb4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <prvHeapInit+0xb4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c034:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <prvHeapInit+0xb4>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4a0a      	ldr	r2, [pc, #40]	; (800c06c <prvHeapInit+0xb8>)
 800c042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	4a09      	ldr	r2, [pc, #36]	; (800c070 <prvHeapInit+0xbc>)
 800c04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <prvHeapInit+0xc0>)
 800c04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c052:	601a      	str	r2, [r3, #0]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	20000b5c 	.word	0x20000b5c
 800c064:	2000808c 	.word	0x2000808c
 800c068:	20008094 	.word	0x20008094
 800c06c:	2000809c 	.word	0x2000809c
 800c070:	20008098 	.word	0x20008098
 800c074:	200080a8 	.word	0x200080a8

0800c078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <prvInsertBlockIntoFreeList+0xac>)
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e002      	b.n	800c08c <prvInsertBlockIntoFreeList+0x14>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d8f7      	bhi.n	800c086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d108      	bne.n	800c0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	441a      	add	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d118      	bne.n	800c100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d00d      	beq.n	800c0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	441a      	add	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	e008      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e003      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d002      	beq.n	800c116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	2000808c 	.word	0x2000808c
 800c128:	20008094 	.word	0x20008094

0800c12c <__assert_func>:
 800c12c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c12e:	4614      	mov	r4, r2
 800c130:	461a      	mov	r2, r3
 800c132:	4b09      	ldr	r3, [pc, #36]	; (800c158 <__assert_func+0x2c>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4605      	mov	r5, r0
 800c138:	68d8      	ldr	r0, [r3, #12]
 800c13a:	b14c      	cbz	r4, 800c150 <__assert_func+0x24>
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <__assert_func+0x30>)
 800c13e:	9100      	str	r1, [sp, #0]
 800c140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c144:	4906      	ldr	r1, [pc, #24]	; (800c160 <__assert_func+0x34>)
 800c146:	462b      	mov	r3, r5
 800c148:	f000 f8ea 	bl	800c320 <fiprintf>
 800c14c:	f001 f9a6 	bl	800d49c <abort>
 800c150:	4b04      	ldr	r3, [pc, #16]	; (800c164 <__assert_func+0x38>)
 800c152:	461c      	mov	r4, r3
 800c154:	e7f3      	b.n	800c13e <__assert_func+0x12>
 800c156:	bf00      	nop
 800c158:	20000044 	.word	0x20000044
 800c15c:	080101cc 	.word	0x080101cc
 800c160:	080101d9 	.word	0x080101d9
 800c164:	08010207 	.word	0x08010207

0800c168 <__errno>:
 800c168:	4b01      	ldr	r3, [pc, #4]	; (800c170 <__errno+0x8>)
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	20000044 	.word	0x20000044

0800c174 <std>:
 800c174:	2300      	movs	r3, #0
 800c176:	b510      	push	{r4, lr}
 800c178:	4604      	mov	r4, r0
 800c17a:	e9c0 3300 	strd	r3, r3, [r0]
 800c17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c182:	6083      	str	r3, [r0, #8]
 800c184:	8181      	strh	r1, [r0, #12]
 800c186:	6643      	str	r3, [r0, #100]	; 0x64
 800c188:	81c2      	strh	r2, [r0, #14]
 800c18a:	6183      	str	r3, [r0, #24]
 800c18c:	4619      	mov	r1, r3
 800c18e:	2208      	movs	r2, #8
 800c190:	305c      	adds	r0, #92	; 0x5c
 800c192:	f000 f946 	bl	800c422 <memset>
 800c196:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <std+0x38>)
 800c198:	6263      	str	r3, [r4, #36]	; 0x24
 800c19a:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <std+0x3c>)
 800c19c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c19e:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <std+0x40>)
 800c1a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1a2:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <std+0x44>)
 800c1a4:	6224      	str	r4, [r4, #32]
 800c1a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0800d1fd 	.word	0x0800d1fd
 800c1b0:	0800d21f 	.word	0x0800d21f
 800c1b4:	0800d257 	.word	0x0800d257
 800c1b8:	0800d27b 	.word	0x0800d27b

0800c1bc <_cleanup_r>:
 800c1bc:	4901      	ldr	r1, [pc, #4]	; (800c1c4 <_cleanup_r+0x8>)
 800c1be:	f000 b8c1 	b.w	800c344 <_fwalk_reent>
 800c1c2:	bf00      	nop
 800c1c4:	0800e2cd 	.word	0x0800e2cd

0800c1c8 <__sfmoreglue>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	1e4a      	subs	r2, r1, #1
 800c1cc:	2568      	movs	r5, #104	; 0x68
 800c1ce:	4355      	muls	r5, r2
 800c1d0:	460e      	mov	r6, r1
 800c1d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1d6:	f000 f92d 	bl	800c434 <_malloc_r>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b140      	cbz	r0, 800c1f0 <__sfmoreglue+0x28>
 800c1de:	2100      	movs	r1, #0
 800c1e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c1e4:	300c      	adds	r0, #12
 800c1e6:	60a0      	str	r0, [r4, #8]
 800c1e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1ec:	f000 f919 	bl	800c422 <memset>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}

0800c1f4 <__sfp_lock_acquire>:
 800c1f4:	4801      	ldr	r0, [pc, #4]	; (800c1fc <__sfp_lock_acquire+0x8>)
 800c1f6:	f000 b8ea 	b.w	800c3ce <__retarget_lock_acquire_recursive>
 800c1fa:	bf00      	nop
 800c1fc:	20008b7c 	.word	0x20008b7c

0800c200 <__sfp_lock_release>:
 800c200:	4801      	ldr	r0, [pc, #4]	; (800c208 <__sfp_lock_release+0x8>)
 800c202:	f000 b8e5 	b.w	800c3d0 <__retarget_lock_release_recursive>
 800c206:	bf00      	nop
 800c208:	20008b7c 	.word	0x20008b7c

0800c20c <__sinit_lock_acquire>:
 800c20c:	4801      	ldr	r0, [pc, #4]	; (800c214 <__sinit_lock_acquire+0x8>)
 800c20e:	f000 b8de 	b.w	800c3ce <__retarget_lock_acquire_recursive>
 800c212:	bf00      	nop
 800c214:	20008b77 	.word	0x20008b77

0800c218 <__sinit_lock_release>:
 800c218:	4801      	ldr	r0, [pc, #4]	; (800c220 <__sinit_lock_release+0x8>)
 800c21a:	f000 b8d9 	b.w	800c3d0 <__retarget_lock_release_recursive>
 800c21e:	bf00      	nop
 800c220:	20008b77 	.word	0x20008b77

0800c224 <__sinit>:
 800c224:	b510      	push	{r4, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	f7ff fff0 	bl	800c20c <__sinit_lock_acquire>
 800c22c:	69a3      	ldr	r3, [r4, #24]
 800c22e:	b11b      	cbz	r3, 800c238 <__sinit+0x14>
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f7ff bff0 	b.w	800c218 <__sinit_lock_release>
 800c238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c23c:	6523      	str	r3, [r4, #80]	; 0x50
 800c23e:	4b13      	ldr	r3, [pc, #76]	; (800c28c <__sinit+0x68>)
 800c240:	4a13      	ldr	r2, [pc, #76]	; (800c290 <__sinit+0x6c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	62a2      	str	r2, [r4, #40]	; 0x28
 800c246:	42a3      	cmp	r3, r4
 800c248:	bf04      	itt	eq
 800c24a:	2301      	moveq	r3, #1
 800c24c:	61a3      	streq	r3, [r4, #24]
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 f820 	bl	800c294 <__sfp>
 800c254:	6060      	str	r0, [r4, #4]
 800c256:	4620      	mov	r0, r4
 800c258:	f000 f81c 	bl	800c294 <__sfp>
 800c25c:	60a0      	str	r0, [r4, #8]
 800c25e:	4620      	mov	r0, r4
 800c260:	f000 f818 	bl	800c294 <__sfp>
 800c264:	2200      	movs	r2, #0
 800c266:	60e0      	str	r0, [r4, #12]
 800c268:	2104      	movs	r1, #4
 800c26a:	6860      	ldr	r0, [r4, #4]
 800c26c:	f7ff ff82 	bl	800c174 <std>
 800c270:	68a0      	ldr	r0, [r4, #8]
 800c272:	2201      	movs	r2, #1
 800c274:	2109      	movs	r1, #9
 800c276:	f7ff ff7d 	bl	800c174 <std>
 800c27a:	68e0      	ldr	r0, [r4, #12]
 800c27c:	2202      	movs	r2, #2
 800c27e:	2112      	movs	r1, #18
 800c280:	f7ff ff78 	bl	800c174 <std>
 800c284:	2301      	movs	r3, #1
 800c286:	61a3      	str	r3, [r4, #24]
 800c288:	e7d2      	b.n	800c230 <__sinit+0xc>
 800c28a:	bf00      	nop
 800c28c:	08010268 	.word	0x08010268
 800c290:	0800c1bd 	.word	0x0800c1bd

0800c294 <__sfp>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	4607      	mov	r7, r0
 800c298:	f7ff ffac 	bl	800c1f4 <__sfp_lock_acquire>
 800c29c:	4b1e      	ldr	r3, [pc, #120]	; (800c318 <__sfp+0x84>)
 800c29e:	681e      	ldr	r6, [r3, #0]
 800c2a0:	69b3      	ldr	r3, [r6, #24]
 800c2a2:	b913      	cbnz	r3, 800c2aa <__sfp+0x16>
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff ffbd 	bl	800c224 <__sinit>
 800c2aa:	3648      	adds	r6, #72	; 0x48
 800c2ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	d503      	bpl.n	800c2bc <__sfp+0x28>
 800c2b4:	6833      	ldr	r3, [r6, #0]
 800c2b6:	b30b      	cbz	r3, 800c2fc <__sfp+0x68>
 800c2b8:	6836      	ldr	r6, [r6, #0]
 800c2ba:	e7f7      	b.n	800c2ac <__sfp+0x18>
 800c2bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2c0:	b9d5      	cbnz	r5, 800c2f8 <__sfp+0x64>
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <__sfp+0x88>)
 800c2c4:	60e3      	str	r3, [r4, #12]
 800c2c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c2cc:	f000 f87e 	bl	800c3cc <__retarget_lock_init_recursive>
 800c2d0:	f7ff ff96 	bl	800c200 <__sfp_lock_release>
 800c2d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2dc:	6025      	str	r5, [r4, #0]
 800c2de:	61a5      	str	r5, [r4, #24]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2e8:	f000 f89b 	bl	800c422 <memset>
 800c2ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f8:	3468      	adds	r4, #104	; 0x68
 800c2fa:	e7d9      	b.n	800c2b0 <__sfp+0x1c>
 800c2fc:	2104      	movs	r1, #4
 800c2fe:	4638      	mov	r0, r7
 800c300:	f7ff ff62 	bl	800c1c8 <__sfmoreglue>
 800c304:	4604      	mov	r4, r0
 800c306:	6030      	str	r0, [r6, #0]
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1d5      	bne.n	800c2b8 <__sfp+0x24>
 800c30c:	f7ff ff78 	bl	800c200 <__sfp_lock_release>
 800c310:	230c      	movs	r3, #12
 800c312:	603b      	str	r3, [r7, #0]
 800c314:	e7ee      	b.n	800c2f4 <__sfp+0x60>
 800c316:	bf00      	nop
 800c318:	08010268 	.word	0x08010268
 800c31c:	ffff0001 	.word	0xffff0001

0800c320 <fiprintf>:
 800c320:	b40e      	push	{r1, r2, r3}
 800c322:	b503      	push	{r0, r1, lr}
 800c324:	4601      	mov	r1, r0
 800c326:	ab03      	add	r3, sp, #12
 800c328:	4805      	ldr	r0, [pc, #20]	; (800c340 <fiprintf+0x20>)
 800c32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c32e:	6800      	ldr	r0, [r0, #0]
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	f000 f903 	bl	800c53c <_vfiprintf_r>
 800c336:	b002      	add	sp, #8
 800c338:	f85d eb04 	ldr.w	lr, [sp], #4
 800c33c:	b003      	add	sp, #12
 800c33e:	4770      	bx	lr
 800c340:	20000044 	.word	0x20000044

0800c344 <_fwalk_reent>:
 800c344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c348:	4606      	mov	r6, r0
 800c34a:	4688      	mov	r8, r1
 800c34c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c350:	2700      	movs	r7, #0
 800c352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c356:	f1b9 0901 	subs.w	r9, r9, #1
 800c35a:	d505      	bpl.n	800c368 <_fwalk_reent+0x24>
 800c35c:	6824      	ldr	r4, [r4, #0]
 800c35e:	2c00      	cmp	r4, #0
 800c360:	d1f7      	bne.n	800c352 <_fwalk_reent+0xe>
 800c362:	4638      	mov	r0, r7
 800c364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c368:	89ab      	ldrh	r3, [r5, #12]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d907      	bls.n	800c37e <_fwalk_reent+0x3a>
 800c36e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c372:	3301      	adds	r3, #1
 800c374:	d003      	beq.n	800c37e <_fwalk_reent+0x3a>
 800c376:	4629      	mov	r1, r5
 800c378:	4630      	mov	r0, r6
 800c37a:	47c0      	blx	r8
 800c37c:	4307      	orrs	r7, r0
 800c37e:	3568      	adds	r5, #104	; 0x68
 800c380:	e7e9      	b.n	800c356 <_fwalk_reent+0x12>
	...

0800c384 <__libc_init_array>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	4d0d      	ldr	r5, [pc, #52]	; (800c3bc <__libc_init_array+0x38>)
 800c388:	4c0d      	ldr	r4, [pc, #52]	; (800c3c0 <__libc_init_array+0x3c>)
 800c38a:	1b64      	subs	r4, r4, r5
 800c38c:	10a4      	asrs	r4, r4, #2
 800c38e:	2600      	movs	r6, #0
 800c390:	42a6      	cmp	r6, r4
 800c392:	d109      	bne.n	800c3a8 <__libc_init_array+0x24>
 800c394:	4d0b      	ldr	r5, [pc, #44]	; (800c3c4 <__libc_init_array+0x40>)
 800c396:	4c0c      	ldr	r4, [pc, #48]	; (800c3c8 <__libc_init_array+0x44>)
 800c398:	f002 fe62 	bl	800f060 <_init>
 800c39c:	1b64      	subs	r4, r4, r5
 800c39e:	10a4      	asrs	r4, r4, #2
 800c3a0:	2600      	movs	r6, #0
 800c3a2:	42a6      	cmp	r6, r4
 800c3a4:	d105      	bne.n	800c3b2 <__libc_init_array+0x2e>
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ac:	4798      	blx	r3
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7ee      	b.n	800c390 <__libc_init_array+0xc>
 800c3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b6:	4798      	blx	r3
 800c3b8:	3601      	adds	r6, #1
 800c3ba:	e7f2      	b.n	800c3a2 <__libc_init_array+0x1e>
 800c3bc:	080105b8 	.word	0x080105b8
 800c3c0:	080105b8 	.word	0x080105b8
 800c3c4:	080105b8 	.word	0x080105b8
 800c3c8:	080105bc 	.word	0x080105bc

0800c3cc <__retarget_lock_init_recursive>:
 800c3cc:	4770      	bx	lr

0800c3ce <__retarget_lock_acquire_recursive>:
 800c3ce:	4770      	bx	lr

0800c3d0 <__retarget_lock_release_recursive>:
 800c3d0:	4770      	bx	lr

0800c3d2 <memcpy>:
 800c3d2:	440a      	add	r2, r1
 800c3d4:	4291      	cmp	r1, r2
 800c3d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3da:	d100      	bne.n	800c3de <memcpy+0xc>
 800c3dc:	4770      	bx	lr
 800c3de:	b510      	push	{r4, lr}
 800c3e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3e8:	4291      	cmp	r1, r2
 800c3ea:	d1f9      	bne.n	800c3e0 <memcpy+0xe>
 800c3ec:	bd10      	pop	{r4, pc}

0800c3ee <memmove>:
 800c3ee:	4288      	cmp	r0, r1
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	eb01 0402 	add.w	r4, r1, r2
 800c3f6:	d902      	bls.n	800c3fe <memmove+0x10>
 800c3f8:	4284      	cmp	r4, r0
 800c3fa:	4623      	mov	r3, r4
 800c3fc:	d807      	bhi.n	800c40e <memmove+0x20>
 800c3fe:	1e43      	subs	r3, r0, #1
 800c400:	42a1      	cmp	r1, r4
 800c402:	d008      	beq.n	800c416 <memmove+0x28>
 800c404:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c408:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c40c:	e7f8      	b.n	800c400 <memmove+0x12>
 800c40e:	4402      	add	r2, r0
 800c410:	4601      	mov	r1, r0
 800c412:	428a      	cmp	r2, r1
 800c414:	d100      	bne.n	800c418 <memmove+0x2a>
 800c416:	bd10      	pop	{r4, pc}
 800c418:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c41c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c420:	e7f7      	b.n	800c412 <memmove+0x24>

0800c422 <memset>:
 800c422:	4402      	add	r2, r0
 800c424:	4603      	mov	r3, r0
 800c426:	4293      	cmp	r3, r2
 800c428:	d100      	bne.n	800c42c <memset+0xa>
 800c42a:	4770      	bx	lr
 800c42c:	f803 1b01 	strb.w	r1, [r3], #1
 800c430:	e7f9      	b.n	800c426 <memset+0x4>
	...

0800c434 <_malloc_r>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	1ccd      	adds	r5, r1, #3
 800c438:	f025 0503 	bic.w	r5, r5, #3
 800c43c:	3508      	adds	r5, #8
 800c43e:	2d0c      	cmp	r5, #12
 800c440:	bf38      	it	cc
 800c442:	250c      	movcc	r5, #12
 800c444:	2d00      	cmp	r5, #0
 800c446:	4606      	mov	r6, r0
 800c448:	db01      	blt.n	800c44e <_malloc_r+0x1a>
 800c44a:	42a9      	cmp	r1, r5
 800c44c:	d903      	bls.n	800c456 <_malloc_r+0x22>
 800c44e:	230c      	movs	r3, #12
 800c450:	6033      	str	r3, [r6, #0]
 800c452:	2000      	movs	r0, #0
 800c454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c456:	f001 fff7 	bl	800e448 <__malloc_lock>
 800c45a:	4921      	ldr	r1, [pc, #132]	; (800c4e0 <_malloc_r+0xac>)
 800c45c:	680a      	ldr	r2, [r1, #0]
 800c45e:	4614      	mov	r4, r2
 800c460:	b99c      	cbnz	r4, 800c48a <_malloc_r+0x56>
 800c462:	4f20      	ldr	r7, [pc, #128]	; (800c4e4 <_malloc_r+0xb0>)
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	b923      	cbnz	r3, 800c472 <_malloc_r+0x3e>
 800c468:	4621      	mov	r1, r4
 800c46a:	4630      	mov	r0, r6
 800c46c:	f000 fe82 	bl	800d174 <_sbrk_r>
 800c470:	6038      	str	r0, [r7, #0]
 800c472:	4629      	mov	r1, r5
 800c474:	4630      	mov	r0, r6
 800c476:	f000 fe7d 	bl	800d174 <_sbrk_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	d123      	bne.n	800c4c6 <_malloc_r+0x92>
 800c47e:	230c      	movs	r3, #12
 800c480:	6033      	str	r3, [r6, #0]
 800c482:	4630      	mov	r0, r6
 800c484:	f001 ffe6 	bl	800e454 <__malloc_unlock>
 800c488:	e7e3      	b.n	800c452 <_malloc_r+0x1e>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	1b5b      	subs	r3, r3, r5
 800c48e:	d417      	bmi.n	800c4c0 <_malloc_r+0x8c>
 800c490:	2b0b      	cmp	r3, #11
 800c492:	d903      	bls.n	800c49c <_malloc_r+0x68>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	441c      	add	r4, r3
 800c498:	6025      	str	r5, [r4, #0]
 800c49a:	e004      	b.n	800c4a6 <_malloc_r+0x72>
 800c49c:	6863      	ldr	r3, [r4, #4]
 800c49e:	42a2      	cmp	r2, r4
 800c4a0:	bf0c      	ite	eq
 800c4a2:	600b      	streq	r3, [r1, #0]
 800c4a4:	6053      	strne	r3, [r2, #4]
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f001 ffd4 	bl	800e454 <__malloc_unlock>
 800c4ac:	f104 000b 	add.w	r0, r4, #11
 800c4b0:	1d23      	adds	r3, r4, #4
 800c4b2:	f020 0007 	bic.w	r0, r0, #7
 800c4b6:	1ac2      	subs	r2, r0, r3
 800c4b8:	d0cc      	beq.n	800c454 <_malloc_r+0x20>
 800c4ba:	1a1b      	subs	r3, r3, r0
 800c4bc:	50a3      	str	r3, [r4, r2]
 800c4be:	e7c9      	b.n	800c454 <_malloc_r+0x20>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	6864      	ldr	r4, [r4, #4]
 800c4c4:	e7cc      	b.n	800c460 <_malloc_r+0x2c>
 800c4c6:	1cc4      	adds	r4, r0, #3
 800c4c8:	f024 0403 	bic.w	r4, r4, #3
 800c4cc:	42a0      	cmp	r0, r4
 800c4ce:	d0e3      	beq.n	800c498 <_malloc_r+0x64>
 800c4d0:	1a21      	subs	r1, r4, r0
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f000 fe4e 	bl	800d174 <_sbrk_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d1dd      	bne.n	800c498 <_malloc_r+0x64>
 800c4dc:	e7cf      	b.n	800c47e <_malloc_r+0x4a>
 800c4de:	bf00      	nop
 800c4e0:	200080ac 	.word	0x200080ac
 800c4e4:	200080b0 	.word	0x200080b0

0800c4e8 <__sfputc_r>:
 800c4e8:	6893      	ldr	r3, [r2, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	b410      	push	{r4}
 800c4f0:	6093      	str	r3, [r2, #8]
 800c4f2:	da08      	bge.n	800c506 <__sfputc_r+0x1e>
 800c4f4:	6994      	ldr	r4, [r2, #24]
 800c4f6:	42a3      	cmp	r3, r4
 800c4f8:	db01      	blt.n	800c4fe <__sfputc_r+0x16>
 800c4fa:	290a      	cmp	r1, #10
 800c4fc:	d103      	bne.n	800c506 <__sfputc_r+0x1e>
 800c4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c502:	f000 bef9 	b.w	800d2f8 <__swbuf_r>
 800c506:	6813      	ldr	r3, [r2, #0]
 800c508:	1c58      	adds	r0, r3, #1
 800c50a:	6010      	str	r0, [r2, #0]
 800c50c:	7019      	strb	r1, [r3, #0]
 800c50e:	4608      	mov	r0, r1
 800c510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <__sfputs_r>:
 800c516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	4614      	mov	r4, r2
 800c51e:	18d5      	adds	r5, r2, r3
 800c520:	42ac      	cmp	r4, r5
 800c522:	d101      	bne.n	800c528 <__sfputs_r+0x12>
 800c524:	2000      	movs	r0, #0
 800c526:	e007      	b.n	800c538 <__sfputs_r+0x22>
 800c528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52c:	463a      	mov	r2, r7
 800c52e:	4630      	mov	r0, r6
 800c530:	f7ff ffda 	bl	800c4e8 <__sfputc_r>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d1f3      	bne.n	800c520 <__sfputs_r+0xa>
 800c538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c53c <_vfiprintf_r>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	460d      	mov	r5, r1
 800c542:	b09d      	sub	sp, #116	; 0x74
 800c544:	4614      	mov	r4, r2
 800c546:	4698      	mov	r8, r3
 800c548:	4606      	mov	r6, r0
 800c54a:	b118      	cbz	r0, 800c554 <_vfiprintf_r+0x18>
 800c54c:	6983      	ldr	r3, [r0, #24]
 800c54e:	b90b      	cbnz	r3, 800c554 <_vfiprintf_r+0x18>
 800c550:	f7ff fe68 	bl	800c224 <__sinit>
 800c554:	4b89      	ldr	r3, [pc, #548]	; (800c77c <_vfiprintf_r+0x240>)
 800c556:	429d      	cmp	r5, r3
 800c558:	d11b      	bne.n	800c592 <_vfiprintf_r+0x56>
 800c55a:	6875      	ldr	r5, [r6, #4]
 800c55c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c55e:	07d9      	lsls	r1, r3, #31
 800c560:	d405      	bmi.n	800c56e <_vfiprintf_r+0x32>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	059a      	lsls	r2, r3, #22
 800c566:	d402      	bmi.n	800c56e <_vfiprintf_r+0x32>
 800c568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c56a:	f7ff ff30 	bl	800c3ce <__retarget_lock_acquire_recursive>
 800c56e:	89ab      	ldrh	r3, [r5, #12]
 800c570:	071b      	lsls	r3, r3, #28
 800c572:	d501      	bpl.n	800c578 <_vfiprintf_r+0x3c>
 800c574:	692b      	ldr	r3, [r5, #16]
 800c576:	b9eb      	cbnz	r3, 800c5b4 <_vfiprintf_r+0x78>
 800c578:	4629      	mov	r1, r5
 800c57a:	4630      	mov	r0, r6
 800c57c:	f000 ff20 	bl	800d3c0 <__swsetup_r>
 800c580:	b1c0      	cbz	r0, 800c5b4 <_vfiprintf_r+0x78>
 800c582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c584:	07dc      	lsls	r4, r3, #31
 800c586:	d50e      	bpl.n	800c5a6 <_vfiprintf_r+0x6a>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	b01d      	add	sp, #116	; 0x74
 800c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c592:	4b7b      	ldr	r3, [pc, #492]	; (800c780 <_vfiprintf_r+0x244>)
 800c594:	429d      	cmp	r5, r3
 800c596:	d101      	bne.n	800c59c <_vfiprintf_r+0x60>
 800c598:	68b5      	ldr	r5, [r6, #8]
 800c59a:	e7df      	b.n	800c55c <_vfiprintf_r+0x20>
 800c59c:	4b79      	ldr	r3, [pc, #484]	; (800c784 <_vfiprintf_r+0x248>)
 800c59e:	429d      	cmp	r5, r3
 800c5a0:	bf08      	it	eq
 800c5a2:	68f5      	ldreq	r5, [r6, #12]
 800c5a4:	e7da      	b.n	800c55c <_vfiprintf_r+0x20>
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	0598      	lsls	r0, r3, #22
 800c5aa:	d4ed      	bmi.n	800c588 <_vfiprintf_r+0x4c>
 800c5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ae:	f7ff ff0f 	bl	800c3d0 <__retarget_lock_release_recursive>
 800c5b2:	e7e9      	b.n	800c588 <_vfiprintf_r+0x4c>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b8:	2320      	movs	r3, #32
 800c5ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5c2:	2330      	movs	r3, #48	; 0x30
 800c5c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c788 <_vfiprintf_r+0x24c>
 800c5c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5cc:	f04f 0901 	mov.w	r9, #1
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	469a      	mov	sl, r3
 800c5d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d8:	b10a      	cbz	r2, 800c5de <_vfiprintf_r+0xa2>
 800c5da:	2a25      	cmp	r2, #37	; 0x25
 800c5dc:	d1f9      	bne.n	800c5d2 <_vfiprintf_r+0x96>
 800c5de:	ebba 0b04 	subs.w	fp, sl, r4
 800c5e2:	d00b      	beq.n	800c5fc <_vfiprintf_r+0xc0>
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7ff ff93 	bl	800c516 <__sfputs_r>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f000 80aa 	beq.w	800c74a <_vfiprintf_r+0x20e>
 800c5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f8:	445a      	add	r2, fp
 800c5fa:	9209      	str	r2, [sp, #36]	; 0x24
 800c5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 80a2 	beq.w	800c74a <_vfiprintf_r+0x20e>
 800c606:	2300      	movs	r3, #0
 800c608:	f04f 32ff 	mov.w	r2, #4294967295
 800c60c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c610:	f10a 0a01 	add.w	sl, sl, #1
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	9307      	str	r3, [sp, #28]
 800c618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c61c:	931a      	str	r3, [sp, #104]	; 0x68
 800c61e:	4654      	mov	r4, sl
 800c620:	2205      	movs	r2, #5
 800c622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c626:	4858      	ldr	r0, [pc, #352]	; (800c788 <_vfiprintf_r+0x24c>)
 800c628:	f7f3 fdda 	bl	80001e0 <memchr>
 800c62c:	9a04      	ldr	r2, [sp, #16]
 800c62e:	b9d8      	cbnz	r0, 800c668 <_vfiprintf_r+0x12c>
 800c630:	06d1      	lsls	r1, r2, #27
 800c632:	bf44      	itt	mi
 800c634:	2320      	movmi	r3, #32
 800c636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c63a:	0713      	lsls	r3, r2, #28
 800c63c:	bf44      	itt	mi
 800c63e:	232b      	movmi	r3, #43	; 0x2b
 800c640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c644:	f89a 3000 	ldrb.w	r3, [sl]
 800c648:	2b2a      	cmp	r3, #42	; 0x2a
 800c64a:	d015      	beq.n	800c678 <_vfiprintf_r+0x13c>
 800c64c:	9a07      	ldr	r2, [sp, #28]
 800c64e:	4654      	mov	r4, sl
 800c650:	2000      	movs	r0, #0
 800c652:	f04f 0c0a 	mov.w	ip, #10
 800c656:	4621      	mov	r1, r4
 800c658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c65c:	3b30      	subs	r3, #48	; 0x30
 800c65e:	2b09      	cmp	r3, #9
 800c660:	d94e      	bls.n	800c700 <_vfiprintf_r+0x1c4>
 800c662:	b1b0      	cbz	r0, 800c692 <_vfiprintf_r+0x156>
 800c664:	9207      	str	r2, [sp, #28]
 800c666:	e014      	b.n	800c692 <_vfiprintf_r+0x156>
 800c668:	eba0 0308 	sub.w	r3, r0, r8
 800c66c:	fa09 f303 	lsl.w	r3, r9, r3
 800c670:	4313      	orrs	r3, r2
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	46a2      	mov	sl, r4
 800c676:	e7d2      	b.n	800c61e <_vfiprintf_r+0xe2>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	1d19      	adds	r1, r3, #4
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	9103      	str	r1, [sp, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	bfbb      	ittet	lt
 800c684:	425b      	neglt	r3, r3
 800c686:	f042 0202 	orrlt.w	r2, r2, #2
 800c68a:	9307      	strge	r3, [sp, #28]
 800c68c:	9307      	strlt	r3, [sp, #28]
 800c68e:	bfb8      	it	lt
 800c690:	9204      	strlt	r2, [sp, #16]
 800c692:	7823      	ldrb	r3, [r4, #0]
 800c694:	2b2e      	cmp	r3, #46	; 0x2e
 800c696:	d10c      	bne.n	800c6b2 <_vfiprintf_r+0x176>
 800c698:	7863      	ldrb	r3, [r4, #1]
 800c69a:	2b2a      	cmp	r3, #42	; 0x2a
 800c69c:	d135      	bne.n	800c70a <_vfiprintf_r+0x1ce>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	1d1a      	adds	r2, r3, #4
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	9203      	str	r2, [sp, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bfb8      	it	lt
 800c6aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ae:	3402      	adds	r4, #2
 800c6b0:	9305      	str	r3, [sp, #20]
 800c6b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c798 <_vfiprintf_r+0x25c>
 800c6b6:	7821      	ldrb	r1, [r4, #0]
 800c6b8:	2203      	movs	r2, #3
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	f7f3 fd90 	bl	80001e0 <memchr>
 800c6c0:	b140      	cbz	r0, 800c6d4 <_vfiprintf_r+0x198>
 800c6c2:	2340      	movs	r3, #64	; 0x40
 800c6c4:	eba0 000a 	sub.w	r0, r0, sl
 800c6c8:	fa03 f000 	lsl.w	r0, r3, r0
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	4303      	orrs	r3, r0
 800c6d0:	3401      	adds	r4, #1
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	482c      	ldr	r0, [pc, #176]	; (800c78c <_vfiprintf_r+0x250>)
 800c6da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6de:	2206      	movs	r2, #6
 800c6e0:	f7f3 fd7e 	bl	80001e0 <memchr>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d03f      	beq.n	800c768 <_vfiprintf_r+0x22c>
 800c6e8:	4b29      	ldr	r3, [pc, #164]	; (800c790 <_vfiprintf_r+0x254>)
 800c6ea:	bb1b      	cbnz	r3, 800c734 <_vfiprintf_r+0x1f8>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	3307      	adds	r3, #7
 800c6f0:	f023 0307 	bic.w	r3, r3, #7
 800c6f4:	3308      	adds	r3, #8
 800c6f6:	9303      	str	r3, [sp, #12]
 800c6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6fa:	443b      	add	r3, r7
 800c6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fe:	e767      	b.n	800c5d0 <_vfiprintf_r+0x94>
 800c700:	fb0c 3202 	mla	r2, ip, r2, r3
 800c704:	460c      	mov	r4, r1
 800c706:	2001      	movs	r0, #1
 800c708:	e7a5      	b.n	800c656 <_vfiprintf_r+0x11a>
 800c70a:	2300      	movs	r3, #0
 800c70c:	3401      	adds	r4, #1
 800c70e:	9305      	str	r3, [sp, #20]
 800c710:	4619      	mov	r1, r3
 800c712:	f04f 0c0a 	mov.w	ip, #10
 800c716:	4620      	mov	r0, r4
 800c718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c71c:	3a30      	subs	r2, #48	; 0x30
 800c71e:	2a09      	cmp	r2, #9
 800c720:	d903      	bls.n	800c72a <_vfiprintf_r+0x1ee>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0c5      	beq.n	800c6b2 <_vfiprintf_r+0x176>
 800c726:	9105      	str	r1, [sp, #20]
 800c728:	e7c3      	b.n	800c6b2 <_vfiprintf_r+0x176>
 800c72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c72e:	4604      	mov	r4, r0
 800c730:	2301      	movs	r3, #1
 800c732:	e7f0      	b.n	800c716 <_vfiprintf_r+0x1da>
 800c734:	ab03      	add	r3, sp, #12
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	462a      	mov	r2, r5
 800c73a:	4b16      	ldr	r3, [pc, #88]	; (800c794 <_vfiprintf_r+0x258>)
 800c73c:	a904      	add	r1, sp, #16
 800c73e:	4630      	mov	r0, r6
 800c740:	f000 f8cc 	bl	800c8dc <_printf_float>
 800c744:	4607      	mov	r7, r0
 800c746:	1c78      	adds	r0, r7, #1
 800c748:	d1d6      	bne.n	800c6f8 <_vfiprintf_r+0x1bc>
 800c74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74c:	07d9      	lsls	r1, r3, #31
 800c74e:	d405      	bmi.n	800c75c <_vfiprintf_r+0x220>
 800c750:	89ab      	ldrh	r3, [r5, #12]
 800c752:	059a      	lsls	r2, r3, #22
 800c754:	d402      	bmi.n	800c75c <_vfiprintf_r+0x220>
 800c756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c758:	f7ff fe3a 	bl	800c3d0 <__retarget_lock_release_recursive>
 800c75c:	89ab      	ldrh	r3, [r5, #12]
 800c75e:	065b      	lsls	r3, r3, #25
 800c760:	f53f af12 	bmi.w	800c588 <_vfiprintf_r+0x4c>
 800c764:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c766:	e711      	b.n	800c58c <_vfiprintf_r+0x50>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4b09      	ldr	r3, [pc, #36]	; (800c794 <_vfiprintf_r+0x258>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4630      	mov	r0, r6
 800c774:	f000 fb56 	bl	800ce24 <_printf_i>
 800c778:	e7e4      	b.n	800c744 <_vfiprintf_r+0x208>
 800c77a:	bf00      	nop
 800c77c:	08010228 	.word	0x08010228
 800c780:	08010248 	.word	0x08010248
 800c784:	08010208 	.word	0x08010208
 800c788:	0801026c 	.word	0x0801026c
 800c78c:	08010276 	.word	0x08010276
 800c790:	0800c8dd 	.word	0x0800c8dd
 800c794:	0800c517 	.word	0x0800c517
 800c798:	08010272 	.word	0x08010272

0800c79c <__cvt>:
 800c79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	ec55 4b10 	vmov	r4, r5, d0
 800c7a4:	2d00      	cmp	r5, #0
 800c7a6:	460e      	mov	r6, r1
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	462b      	mov	r3, r5
 800c7ac:	bfbb      	ittet	lt
 800c7ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c7b2:	461d      	movlt	r5, r3
 800c7b4:	2300      	movge	r3, #0
 800c7b6:	232d      	movlt	r3, #45	; 0x2d
 800c7b8:	700b      	strb	r3, [r1, #0]
 800c7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c7c0:	4691      	mov	r9, r2
 800c7c2:	f023 0820 	bic.w	r8, r3, #32
 800c7c6:	bfbc      	itt	lt
 800c7c8:	4622      	movlt	r2, r4
 800c7ca:	4614      	movlt	r4, r2
 800c7cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7d0:	d005      	beq.n	800c7de <__cvt+0x42>
 800c7d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c7d6:	d100      	bne.n	800c7da <__cvt+0x3e>
 800c7d8:	3601      	adds	r6, #1
 800c7da:	2102      	movs	r1, #2
 800c7dc:	e000      	b.n	800c7e0 <__cvt+0x44>
 800c7de:	2103      	movs	r1, #3
 800c7e0:	ab03      	add	r3, sp, #12
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	ab02      	add	r3, sp, #8
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	ec45 4b10 	vmov	d0, r4, r5
 800c7ec:	4653      	mov	r3, sl
 800c7ee:	4632      	mov	r2, r6
 800c7f0:	f000 fefa 	bl	800d5e8 <_dtoa_r>
 800c7f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7f8:	4607      	mov	r7, r0
 800c7fa:	d102      	bne.n	800c802 <__cvt+0x66>
 800c7fc:	f019 0f01 	tst.w	r9, #1
 800c800:	d022      	beq.n	800c848 <__cvt+0xac>
 800c802:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c806:	eb07 0906 	add.w	r9, r7, r6
 800c80a:	d110      	bne.n	800c82e <__cvt+0x92>
 800c80c:	783b      	ldrb	r3, [r7, #0]
 800c80e:	2b30      	cmp	r3, #48	; 0x30
 800c810:	d10a      	bne.n	800c828 <__cvt+0x8c>
 800c812:	2200      	movs	r2, #0
 800c814:	2300      	movs	r3, #0
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f4 f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800c81e:	b918      	cbnz	r0, 800c828 <__cvt+0x8c>
 800c820:	f1c6 0601 	rsb	r6, r6, #1
 800c824:	f8ca 6000 	str.w	r6, [sl]
 800c828:	f8da 3000 	ldr.w	r3, [sl]
 800c82c:	4499      	add	r9, r3
 800c82e:	2200      	movs	r2, #0
 800c830:	2300      	movs	r3, #0
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f4 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800c83a:	b108      	cbz	r0, 800c840 <__cvt+0xa4>
 800c83c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c840:	2230      	movs	r2, #48	; 0x30
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	454b      	cmp	r3, r9
 800c846:	d307      	bcc.n	800c858 <__cvt+0xbc>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c84c:	1bdb      	subs	r3, r3, r7
 800c84e:	4638      	mov	r0, r7
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	b004      	add	sp, #16
 800c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c858:	1c59      	adds	r1, r3, #1
 800c85a:	9103      	str	r1, [sp, #12]
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	e7f0      	b.n	800c842 <__cvt+0xa6>

0800c860 <__exponent>:
 800c860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c862:	4603      	mov	r3, r0
 800c864:	2900      	cmp	r1, #0
 800c866:	bfb8      	it	lt
 800c868:	4249      	neglt	r1, r1
 800c86a:	f803 2b02 	strb.w	r2, [r3], #2
 800c86e:	bfb4      	ite	lt
 800c870:	222d      	movlt	r2, #45	; 0x2d
 800c872:	222b      	movge	r2, #43	; 0x2b
 800c874:	2909      	cmp	r1, #9
 800c876:	7042      	strb	r2, [r0, #1]
 800c878:	dd2a      	ble.n	800c8d0 <__exponent+0x70>
 800c87a:	f10d 0407 	add.w	r4, sp, #7
 800c87e:	46a4      	mov	ip, r4
 800c880:	270a      	movs	r7, #10
 800c882:	46a6      	mov	lr, r4
 800c884:	460a      	mov	r2, r1
 800c886:	fb91 f6f7 	sdiv	r6, r1, r7
 800c88a:	fb07 1516 	mls	r5, r7, r6, r1
 800c88e:	3530      	adds	r5, #48	; 0x30
 800c890:	2a63      	cmp	r2, #99	; 0x63
 800c892:	f104 34ff 	add.w	r4, r4, #4294967295
 800c896:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c89a:	4631      	mov	r1, r6
 800c89c:	dcf1      	bgt.n	800c882 <__exponent+0x22>
 800c89e:	3130      	adds	r1, #48	; 0x30
 800c8a0:	f1ae 0502 	sub.w	r5, lr, #2
 800c8a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c8a8:	1c44      	adds	r4, r0, #1
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4561      	cmp	r1, ip
 800c8ae:	d30a      	bcc.n	800c8c6 <__exponent+0x66>
 800c8b0:	f10d 0209 	add.w	r2, sp, #9
 800c8b4:	eba2 020e 	sub.w	r2, r2, lr
 800c8b8:	4565      	cmp	r5, ip
 800c8ba:	bf88      	it	hi
 800c8bc:	2200      	movhi	r2, #0
 800c8be:	4413      	add	r3, r2
 800c8c0:	1a18      	subs	r0, r3, r0
 800c8c2:	b003      	add	sp, #12
 800c8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c8ce:	e7ed      	b.n	800c8ac <__exponent+0x4c>
 800c8d0:	2330      	movs	r3, #48	; 0x30
 800c8d2:	3130      	adds	r1, #48	; 0x30
 800c8d4:	7083      	strb	r3, [r0, #2]
 800c8d6:	70c1      	strb	r1, [r0, #3]
 800c8d8:	1d03      	adds	r3, r0, #4
 800c8da:	e7f1      	b.n	800c8c0 <__exponent+0x60>

0800c8dc <_printf_float>:
 800c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	ed2d 8b02 	vpush	{d8}
 800c8e4:	b08d      	sub	sp, #52	; 0x34
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c8ec:	4616      	mov	r6, r2
 800c8ee:	461f      	mov	r7, r3
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	f001 fd27 	bl	800e344 <_localeconv_r>
 800c8f6:	f8d0 a000 	ldr.w	sl, [r0]
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	f7f3 fc68 	bl	80001d0 <strlen>
 800c900:	2300      	movs	r3, #0
 800c902:	930a      	str	r3, [sp, #40]	; 0x28
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	9305      	str	r3, [sp, #20]
 800c908:	f8d8 3000 	ldr.w	r3, [r8]
 800c90c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c910:	3307      	adds	r3, #7
 800c912:	f023 0307 	bic.w	r3, r3, #7
 800c916:	f103 0208 	add.w	r2, r3, #8
 800c91a:	f8c8 2000 	str.w	r2, [r8]
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c926:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c92a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c92e:	9307      	str	r3, [sp, #28]
 800c930:	f8cd 8018 	str.w	r8, [sp, #24]
 800c934:	ee08 0a10 	vmov	s16, r0
 800c938:	4b9f      	ldr	r3, [pc, #636]	; (800cbb8 <_printf_float+0x2dc>)
 800c93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c93e:	f04f 32ff 	mov.w	r2, #4294967295
 800c942:	f7f4 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 800c946:	bb88      	cbnz	r0, 800c9ac <_printf_float+0xd0>
 800c948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c94c:	4b9a      	ldr	r3, [pc, #616]	; (800cbb8 <_printf_float+0x2dc>)
 800c94e:	f04f 32ff 	mov.w	r2, #4294967295
 800c952:	f7f4 f8cd 	bl	8000af0 <__aeabi_dcmple>
 800c956:	bb48      	cbnz	r0, 800c9ac <_printf_float+0xd0>
 800c958:	2200      	movs	r2, #0
 800c95a:	2300      	movs	r3, #0
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f4 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800c964:	b110      	cbz	r0, 800c96c <_printf_float+0x90>
 800c966:	232d      	movs	r3, #45	; 0x2d
 800c968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c96c:	4b93      	ldr	r3, [pc, #588]	; (800cbbc <_printf_float+0x2e0>)
 800c96e:	4894      	ldr	r0, [pc, #592]	; (800cbc0 <_printf_float+0x2e4>)
 800c970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c974:	bf94      	ite	ls
 800c976:	4698      	movls	r8, r3
 800c978:	4680      	movhi	r8, r0
 800c97a:	2303      	movs	r3, #3
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	9b05      	ldr	r3, [sp, #20]
 800c980:	f023 0204 	bic.w	r2, r3, #4
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	f04f 0900 	mov.w	r9, #0
 800c98a:	9700      	str	r7, [sp, #0]
 800c98c:	4633      	mov	r3, r6
 800c98e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c990:	4621      	mov	r1, r4
 800c992:	4628      	mov	r0, r5
 800c994:	f000 f9d8 	bl	800cd48 <_printf_common>
 800c998:	3001      	adds	r0, #1
 800c99a:	f040 8090 	bne.w	800cabe <_printf_float+0x1e2>
 800c99e:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a2:	b00d      	add	sp, #52	; 0x34
 800c9a4:	ecbd 8b02 	vpop	{d8}
 800c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ac:	4642      	mov	r2, r8
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	4640      	mov	r0, r8
 800c9b2:	4649      	mov	r1, r9
 800c9b4:	f7f4 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 800c9b8:	b140      	cbz	r0, 800c9cc <_printf_float+0xf0>
 800c9ba:	464b      	mov	r3, r9
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfbc      	itt	lt
 800c9c0:	232d      	movlt	r3, #45	; 0x2d
 800c9c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c9c6:	487f      	ldr	r0, [pc, #508]	; (800cbc4 <_printf_float+0x2e8>)
 800c9c8:	4b7f      	ldr	r3, [pc, #508]	; (800cbc8 <_printf_float+0x2ec>)
 800c9ca:	e7d1      	b.n	800c970 <_printf_float+0x94>
 800c9cc:	6863      	ldr	r3, [r4, #4]
 800c9ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c9d2:	9206      	str	r2, [sp, #24]
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	d13f      	bne.n	800ca58 <_printf_float+0x17c>
 800c9d8:	2306      	movs	r3, #6
 800c9da:	6063      	str	r3, [r4, #4]
 800c9dc:	9b05      	ldr	r3, [sp, #20]
 800c9de:	6861      	ldr	r1, [r4, #4]
 800c9e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9303      	str	r3, [sp, #12]
 800c9e8:	ab0a      	add	r3, sp, #40	; 0x28
 800c9ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c9ee:	ab09      	add	r3, sp, #36	; 0x24
 800c9f0:	ec49 8b10 	vmov	d0, r8, r9
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	6022      	str	r2, [r4, #0]
 800c9f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f7ff fecd 	bl	800c79c <__cvt>
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca06:	2b47      	cmp	r3, #71	; 0x47
 800ca08:	4680      	mov	r8, r0
 800ca0a:	d108      	bne.n	800ca1e <_printf_float+0x142>
 800ca0c:	1cc8      	adds	r0, r1, #3
 800ca0e:	db02      	blt.n	800ca16 <_printf_float+0x13a>
 800ca10:	6863      	ldr	r3, [r4, #4]
 800ca12:	4299      	cmp	r1, r3
 800ca14:	dd41      	ble.n	800ca9a <_printf_float+0x1be>
 800ca16:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca1a:	fa5f fb8b 	uxtb.w	fp, fp
 800ca1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca22:	d820      	bhi.n	800ca66 <_printf_float+0x18a>
 800ca24:	3901      	subs	r1, #1
 800ca26:	465a      	mov	r2, fp
 800ca28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca2c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca2e:	f7ff ff17 	bl	800c860 <__exponent>
 800ca32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca34:	1813      	adds	r3, r2, r0
 800ca36:	2a01      	cmp	r2, #1
 800ca38:	4681      	mov	r9, r0
 800ca3a:	6123      	str	r3, [r4, #16]
 800ca3c:	dc02      	bgt.n	800ca44 <_printf_float+0x168>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	07d2      	lsls	r2, r2, #31
 800ca42:	d501      	bpl.n	800ca48 <_printf_float+0x16c>
 800ca44:	3301      	adds	r3, #1
 800ca46:	6123      	str	r3, [r4, #16]
 800ca48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d09c      	beq.n	800c98a <_printf_float+0xae>
 800ca50:	232d      	movs	r3, #45	; 0x2d
 800ca52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca56:	e798      	b.n	800c98a <_printf_float+0xae>
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	2a47      	cmp	r2, #71	; 0x47
 800ca5c:	d1be      	bne.n	800c9dc <_printf_float+0x100>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1bc      	bne.n	800c9dc <_printf_float+0x100>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e7b9      	b.n	800c9da <_printf_float+0xfe>
 800ca66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca6a:	d118      	bne.n	800ca9e <_printf_float+0x1c2>
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	6863      	ldr	r3, [r4, #4]
 800ca70:	dd0b      	ble.n	800ca8a <_printf_float+0x1ae>
 800ca72:	6121      	str	r1, [r4, #16]
 800ca74:	b913      	cbnz	r3, 800ca7c <_printf_float+0x1a0>
 800ca76:	6822      	ldr	r2, [r4, #0]
 800ca78:	07d0      	lsls	r0, r2, #31
 800ca7a:	d502      	bpl.n	800ca82 <_printf_float+0x1a6>
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	440b      	add	r3, r1
 800ca80:	6123      	str	r3, [r4, #16]
 800ca82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca84:	f04f 0900 	mov.w	r9, #0
 800ca88:	e7de      	b.n	800ca48 <_printf_float+0x16c>
 800ca8a:	b913      	cbnz	r3, 800ca92 <_printf_float+0x1b6>
 800ca8c:	6822      	ldr	r2, [r4, #0]
 800ca8e:	07d2      	lsls	r2, r2, #31
 800ca90:	d501      	bpl.n	800ca96 <_printf_float+0x1ba>
 800ca92:	3302      	adds	r3, #2
 800ca94:	e7f4      	b.n	800ca80 <_printf_float+0x1a4>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e7f2      	b.n	800ca80 <_printf_float+0x1a4>
 800ca9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa0:	4299      	cmp	r1, r3
 800caa2:	db05      	blt.n	800cab0 <_printf_float+0x1d4>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	6121      	str	r1, [r4, #16]
 800caa8:	07d8      	lsls	r0, r3, #31
 800caaa:	d5ea      	bpl.n	800ca82 <_printf_float+0x1a6>
 800caac:	1c4b      	adds	r3, r1, #1
 800caae:	e7e7      	b.n	800ca80 <_printf_float+0x1a4>
 800cab0:	2900      	cmp	r1, #0
 800cab2:	bfd4      	ite	le
 800cab4:	f1c1 0202 	rsble	r2, r1, #2
 800cab8:	2201      	movgt	r2, #1
 800caba:	4413      	add	r3, r2
 800cabc:	e7e0      	b.n	800ca80 <_printf_float+0x1a4>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	055a      	lsls	r2, r3, #21
 800cac2:	d407      	bmi.n	800cad4 <_printf_float+0x1f8>
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	4642      	mov	r2, r8
 800cac8:	4631      	mov	r1, r6
 800caca:	4628      	mov	r0, r5
 800cacc:	47b8      	blx	r7
 800cace:	3001      	adds	r0, #1
 800cad0:	d12c      	bne.n	800cb2c <_printf_float+0x250>
 800cad2:	e764      	b.n	800c99e <_printf_float+0xc2>
 800cad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cad8:	f240 80e0 	bls.w	800cc9c <_printf_float+0x3c0>
 800cadc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cae0:	2200      	movs	r2, #0
 800cae2:	2300      	movs	r3, #0
 800cae4:	f7f3 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d034      	beq.n	800cb56 <_printf_float+0x27a>
 800caec:	4a37      	ldr	r2, [pc, #220]	; (800cbcc <_printf_float+0x2f0>)
 800caee:	2301      	movs	r3, #1
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	47b8      	blx	r7
 800caf6:	3001      	adds	r0, #1
 800caf8:	f43f af51 	beq.w	800c99e <_printf_float+0xc2>
 800cafc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb00:	429a      	cmp	r2, r3
 800cb02:	db02      	blt.n	800cb0a <_printf_float+0x22e>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	07d8      	lsls	r0, r3, #31
 800cb08:	d510      	bpl.n	800cb2c <_printf_float+0x250>
 800cb0a:	ee18 3a10 	vmov	r3, s16
 800cb0e:	4652      	mov	r2, sl
 800cb10:	4631      	mov	r1, r6
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b8      	blx	r7
 800cb16:	3001      	adds	r0, #1
 800cb18:	f43f af41 	beq.w	800c99e <_printf_float+0xc2>
 800cb1c:	f04f 0800 	mov.w	r8, #0
 800cb20:	f104 091a 	add.w	r9, r4, #26
 800cb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb26:	3b01      	subs	r3, #1
 800cb28:	4543      	cmp	r3, r8
 800cb2a:	dc09      	bgt.n	800cb40 <_printf_float+0x264>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	079b      	lsls	r3, r3, #30
 800cb30:	f100 8105 	bmi.w	800cd3e <_printf_float+0x462>
 800cb34:	68e0      	ldr	r0, [r4, #12]
 800cb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb38:	4298      	cmp	r0, r3
 800cb3a:	bfb8      	it	lt
 800cb3c:	4618      	movlt	r0, r3
 800cb3e:	e730      	b.n	800c9a2 <_printf_float+0xc6>
 800cb40:	2301      	movs	r3, #1
 800cb42:	464a      	mov	r2, r9
 800cb44:	4631      	mov	r1, r6
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f43f af27 	beq.w	800c99e <_printf_float+0xc2>
 800cb50:	f108 0801 	add.w	r8, r8, #1
 800cb54:	e7e6      	b.n	800cb24 <_printf_float+0x248>
 800cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	dc39      	bgt.n	800cbd0 <_printf_float+0x2f4>
 800cb5c:	4a1b      	ldr	r2, [pc, #108]	; (800cbcc <_printf_float+0x2f0>)
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f af19 	beq.w	800c99e <_printf_float+0xc2>
 800cb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb70:	4313      	orrs	r3, r2
 800cb72:	d102      	bne.n	800cb7a <_printf_float+0x29e>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	07d9      	lsls	r1, r3, #31
 800cb78:	d5d8      	bpl.n	800cb2c <_printf_float+0x250>
 800cb7a:	ee18 3a10 	vmov	r3, s16
 800cb7e:	4652      	mov	r2, sl
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f af09 	beq.w	800c99e <_printf_float+0xc2>
 800cb8c:	f04f 0900 	mov.w	r9, #0
 800cb90:	f104 0a1a 	add.w	sl, r4, #26
 800cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb96:	425b      	negs	r3, r3
 800cb98:	454b      	cmp	r3, r9
 800cb9a:	dc01      	bgt.n	800cba0 <_printf_float+0x2c4>
 800cb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9e:	e792      	b.n	800cac6 <_printf_float+0x1ea>
 800cba0:	2301      	movs	r3, #1
 800cba2:	4652      	mov	r2, sl
 800cba4:	4631      	mov	r1, r6
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f43f aef7 	beq.w	800c99e <_printf_float+0xc2>
 800cbb0:	f109 0901 	add.w	r9, r9, #1
 800cbb4:	e7ee      	b.n	800cb94 <_printf_float+0x2b8>
 800cbb6:	bf00      	nop
 800cbb8:	7fefffff 	.word	0x7fefffff
 800cbbc:	0801027d 	.word	0x0801027d
 800cbc0:	08010281 	.word	0x08010281
 800cbc4:	08010289 	.word	0x08010289
 800cbc8:	08010285 	.word	0x08010285
 800cbcc:	0801028d 	.word	0x0801028d
 800cbd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	bfa8      	it	ge
 800cbd8:	461a      	movge	r2, r3
 800cbda:	2a00      	cmp	r2, #0
 800cbdc:	4691      	mov	r9, r2
 800cbde:	dc37      	bgt.n	800cc50 <_printf_float+0x374>
 800cbe0:	f04f 0b00 	mov.w	fp, #0
 800cbe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbe8:	f104 021a 	add.w	r2, r4, #26
 800cbec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	eba3 0309 	sub.w	r3, r3, r9
 800cbf4:	455b      	cmp	r3, fp
 800cbf6:	dc33      	bgt.n	800cc60 <_printf_float+0x384>
 800cbf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	db3b      	blt.n	800cc78 <_printf_float+0x39c>
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	07da      	lsls	r2, r3, #31
 800cc04:	d438      	bmi.n	800cc78 <_printf_float+0x39c>
 800cc06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc08:	9b05      	ldr	r3, [sp, #20]
 800cc0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	eba2 0901 	sub.w	r9, r2, r1
 800cc12:	4599      	cmp	r9, r3
 800cc14:	bfa8      	it	ge
 800cc16:	4699      	movge	r9, r3
 800cc18:	f1b9 0f00 	cmp.w	r9, #0
 800cc1c:	dc35      	bgt.n	800cc8a <_printf_float+0x3ae>
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc26:	f104 0a1a 	add.w	sl, r4, #26
 800cc2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	eba3 0309 	sub.w	r3, r3, r9
 800cc34:	4543      	cmp	r3, r8
 800cc36:	f77f af79 	ble.w	800cb2c <_printf_float+0x250>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	4631      	mov	r1, r6
 800cc40:	4628      	mov	r0, r5
 800cc42:	47b8      	blx	r7
 800cc44:	3001      	adds	r0, #1
 800cc46:	f43f aeaa 	beq.w	800c99e <_printf_float+0xc2>
 800cc4a:	f108 0801 	add.w	r8, r8, #1
 800cc4e:	e7ec      	b.n	800cc2a <_printf_float+0x34e>
 800cc50:	4613      	mov	r3, r2
 800cc52:	4631      	mov	r1, r6
 800cc54:	4642      	mov	r2, r8
 800cc56:	4628      	mov	r0, r5
 800cc58:	47b8      	blx	r7
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	d1c0      	bne.n	800cbe0 <_printf_float+0x304>
 800cc5e:	e69e      	b.n	800c99e <_printf_float+0xc2>
 800cc60:	2301      	movs	r3, #1
 800cc62:	4631      	mov	r1, r6
 800cc64:	4628      	mov	r0, r5
 800cc66:	9205      	str	r2, [sp, #20]
 800cc68:	47b8      	blx	r7
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	f43f ae97 	beq.w	800c99e <_printf_float+0xc2>
 800cc70:	9a05      	ldr	r2, [sp, #20]
 800cc72:	f10b 0b01 	add.w	fp, fp, #1
 800cc76:	e7b9      	b.n	800cbec <_printf_float+0x310>
 800cc78:	ee18 3a10 	vmov	r3, s16
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	47b8      	blx	r7
 800cc84:	3001      	adds	r0, #1
 800cc86:	d1be      	bne.n	800cc06 <_printf_float+0x32a>
 800cc88:	e689      	b.n	800c99e <_printf_float+0xc2>
 800cc8a:	9a05      	ldr	r2, [sp, #20]
 800cc8c:	464b      	mov	r3, r9
 800cc8e:	4442      	add	r2, r8
 800cc90:	4631      	mov	r1, r6
 800cc92:	4628      	mov	r0, r5
 800cc94:	47b8      	blx	r7
 800cc96:	3001      	adds	r0, #1
 800cc98:	d1c1      	bne.n	800cc1e <_printf_float+0x342>
 800cc9a:	e680      	b.n	800c99e <_printf_float+0xc2>
 800cc9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc9e:	2a01      	cmp	r2, #1
 800cca0:	dc01      	bgt.n	800cca6 <_printf_float+0x3ca>
 800cca2:	07db      	lsls	r3, r3, #31
 800cca4:	d538      	bpl.n	800cd18 <_printf_float+0x43c>
 800cca6:	2301      	movs	r3, #1
 800cca8:	4642      	mov	r2, r8
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b8      	blx	r7
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f43f ae74 	beq.w	800c99e <_printf_float+0xc2>
 800ccb6:	ee18 3a10 	vmov	r3, s16
 800ccba:	4652      	mov	r2, sl
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	47b8      	blx	r7
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	f43f ae6b 	beq.w	800c99e <_printf_float+0xc2>
 800ccc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cccc:	2200      	movs	r2, #0
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f7f3 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccd4:	b9d8      	cbnz	r0, 800cd0e <_printf_float+0x432>
 800ccd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd8:	f108 0201 	add.w	r2, r8, #1
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b8      	blx	r7
 800cce4:	3001      	adds	r0, #1
 800cce6:	d10e      	bne.n	800cd06 <_printf_float+0x42a>
 800cce8:	e659      	b.n	800c99e <_printf_float+0xc2>
 800ccea:	2301      	movs	r3, #1
 800ccec:	4652      	mov	r2, sl
 800ccee:	4631      	mov	r1, r6
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	47b8      	blx	r7
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	f43f ae52 	beq.w	800c99e <_printf_float+0xc2>
 800ccfa:	f108 0801 	add.w	r8, r8, #1
 800ccfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd00:	3b01      	subs	r3, #1
 800cd02:	4543      	cmp	r3, r8
 800cd04:	dcf1      	bgt.n	800ccea <_printf_float+0x40e>
 800cd06:	464b      	mov	r3, r9
 800cd08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd0c:	e6dc      	b.n	800cac8 <_printf_float+0x1ec>
 800cd0e:	f04f 0800 	mov.w	r8, #0
 800cd12:	f104 0a1a 	add.w	sl, r4, #26
 800cd16:	e7f2      	b.n	800ccfe <_printf_float+0x422>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4642      	mov	r2, r8
 800cd1c:	e7df      	b.n	800ccde <_printf_float+0x402>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	464a      	mov	r2, r9
 800cd22:	4631      	mov	r1, r6
 800cd24:	4628      	mov	r0, r5
 800cd26:	47b8      	blx	r7
 800cd28:	3001      	adds	r0, #1
 800cd2a:	f43f ae38 	beq.w	800c99e <_printf_float+0xc2>
 800cd2e:	f108 0801 	add.w	r8, r8, #1
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd36:	1a5b      	subs	r3, r3, r1
 800cd38:	4543      	cmp	r3, r8
 800cd3a:	dcf0      	bgt.n	800cd1e <_printf_float+0x442>
 800cd3c:	e6fa      	b.n	800cb34 <_printf_float+0x258>
 800cd3e:	f04f 0800 	mov.w	r8, #0
 800cd42:	f104 0919 	add.w	r9, r4, #25
 800cd46:	e7f4      	b.n	800cd32 <_printf_float+0x456>

0800cd48 <_printf_common>:
 800cd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd4c:	4616      	mov	r6, r2
 800cd4e:	4699      	mov	r9, r3
 800cd50:	688a      	ldr	r2, [r1, #8]
 800cd52:	690b      	ldr	r3, [r1, #16]
 800cd54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	bfb8      	it	lt
 800cd5c:	4613      	movlt	r3, r2
 800cd5e:	6033      	str	r3, [r6, #0]
 800cd60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd64:	4607      	mov	r7, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	b10a      	cbz	r2, 800cd6e <_printf_common+0x26>
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	6033      	str	r3, [r6, #0]
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	0699      	lsls	r1, r3, #26
 800cd72:	bf42      	ittt	mi
 800cd74:	6833      	ldrmi	r3, [r6, #0]
 800cd76:	3302      	addmi	r3, #2
 800cd78:	6033      	strmi	r3, [r6, #0]
 800cd7a:	6825      	ldr	r5, [r4, #0]
 800cd7c:	f015 0506 	ands.w	r5, r5, #6
 800cd80:	d106      	bne.n	800cd90 <_printf_common+0x48>
 800cd82:	f104 0a19 	add.w	sl, r4, #25
 800cd86:	68e3      	ldr	r3, [r4, #12]
 800cd88:	6832      	ldr	r2, [r6, #0]
 800cd8a:	1a9b      	subs	r3, r3, r2
 800cd8c:	42ab      	cmp	r3, r5
 800cd8e:	dc26      	bgt.n	800cdde <_printf_common+0x96>
 800cd90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd94:	1e13      	subs	r3, r2, #0
 800cd96:	6822      	ldr	r2, [r4, #0]
 800cd98:	bf18      	it	ne
 800cd9a:	2301      	movne	r3, #1
 800cd9c:	0692      	lsls	r2, r2, #26
 800cd9e:	d42b      	bmi.n	800cdf8 <_printf_common+0xb0>
 800cda0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cda4:	4649      	mov	r1, r9
 800cda6:	4638      	mov	r0, r7
 800cda8:	47c0      	blx	r8
 800cdaa:	3001      	adds	r0, #1
 800cdac:	d01e      	beq.n	800cdec <_printf_common+0xa4>
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	68e5      	ldr	r5, [r4, #12]
 800cdb2:	6832      	ldr	r2, [r6, #0]
 800cdb4:	f003 0306 	and.w	r3, r3, #6
 800cdb8:	2b04      	cmp	r3, #4
 800cdba:	bf08      	it	eq
 800cdbc:	1aad      	subeq	r5, r5, r2
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	6922      	ldr	r2, [r4, #16]
 800cdc2:	bf0c      	ite	eq
 800cdc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdc8:	2500      	movne	r5, #0
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	bfc4      	itt	gt
 800cdce:	1a9b      	subgt	r3, r3, r2
 800cdd0:	18ed      	addgt	r5, r5, r3
 800cdd2:	2600      	movs	r6, #0
 800cdd4:	341a      	adds	r4, #26
 800cdd6:	42b5      	cmp	r5, r6
 800cdd8:	d11a      	bne.n	800ce10 <_printf_common+0xc8>
 800cdda:	2000      	movs	r0, #0
 800cddc:	e008      	b.n	800cdf0 <_printf_common+0xa8>
 800cdde:	2301      	movs	r3, #1
 800cde0:	4652      	mov	r2, sl
 800cde2:	4649      	mov	r1, r9
 800cde4:	4638      	mov	r0, r7
 800cde6:	47c0      	blx	r8
 800cde8:	3001      	adds	r0, #1
 800cdea:	d103      	bne.n	800cdf4 <_printf_common+0xac>
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	e7c6      	b.n	800cd86 <_printf_common+0x3e>
 800cdf8:	18e1      	adds	r1, r4, r3
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	2030      	movs	r0, #48	; 0x30
 800cdfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce02:	4422      	add	r2, r4
 800ce04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce0c:	3302      	adds	r3, #2
 800ce0e:	e7c7      	b.n	800cda0 <_printf_common+0x58>
 800ce10:	2301      	movs	r3, #1
 800ce12:	4622      	mov	r2, r4
 800ce14:	4649      	mov	r1, r9
 800ce16:	4638      	mov	r0, r7
 800ce18:	47c0      	blx	r8
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	d0e6      	beq.n	800cdec <_printf_common+0xa4>
 800ce1e:	3601      	adds	r6, #1
 800ce20:	e7d9      	b.n	800cdd6 <_printf_common+0x8e>
	...

0800ce24 <_printf_i>:
 800ce24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce28:	460c      	mov	r4, r1
 800ce2a:	4691      	mov	r9, r2
 800ce2c:	7e27      	ldrb	r7, [r4, #24]
 800ce2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce30:	2f78      	cmp	r7, #120	; 0x78
 800ce32:	4680      	mov	r8, r0
 800ce34:	469a      	mov	sl, r3
 800ce36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce3a:	d807      	bhi.n	800ce4c <_printf_i+0x28>
 800ce3c:	2f62      	cmp	r7, #98	; 0x62
 800ce3e:	d80a      	bhi.n	800ce56 <_printf_i+0x32>
 800ce40:	2f00      	cmp	r7, #0
 800ce42:	f000 80d8 	beq.w	800cff6 <_printf_i+0x1d2>
 800ce46:	2f58      	cmp	r7, #88	; 0x58
 800ce48:	f000 80a3 	beq.w	800cf92 <_printf_i+0x16e>
 800ce4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce54:	e03a      	b.n	800cecc <_printf_i+0xa8>
 800ce56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce5a:	2b15      	cmp	r3, #21
 800ce5c:	d8f6      	bhi.n	800ce4c <_printf_i+0x28>
 800ce5e:	a001      	add	r0, pc, #4	; (adr r0, 800ce64 <_printf_i+0x40>)
 800ce60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce64:	0800cebd 	.word	0x0800cebd
 800ce68:	0800ced1 	.word	0x0800ced1
 800ce6c:	0800ce4d 	.word	0x0800ce4d
 800ce70:	0800ce4d 	.word	0x0800ce4d
 800ce74:	0800ce4d 	.word	0x0800ce4d
 800ce78:	0800ce4d 	.word	0x0800ce4d
 800ce7c:	0800ced1 	.word	0x0800ced1
 800ce80:	0800ce4d 	.word	0x0800ce4d
 800ce84:	0800ce4d 	.word	0x0800ce4d
 800ce88:	0800ce4d 	.word	0x0800ce4d
 800ce8c:	0800ce4d 	.word	0x0800ce4d
 800ce90:	0800cfdd 	.word	0x0800cfdd
 800ce94:	0800cf01 	.word	0x0800cf01
 800ce98:	0800cfbf 	.word	0x0800cfbf
 800ce9c:	0800ce4d 	.word	0x0800ce4d
 800cea0:	0800ce4d 	.word	0x0800ce4d
 800cea4:	0800cfff 	.word	0x0800cfff
 800cea8:	0800ce4d 	.word	0x0800ce4d
 800ceac:	0800cf01 	.word	0x0800cf01
 800ceb0:	0800ce4d 	.word	0x0800ce4d
 800ceb4:	0800ce4d 	.word	0x0800ce4d
 800ceb8:	0800cfc7 	.word	0x0800cfc7
 800cebc:	680b      	ldr	r3, [r1, #0]
 800cebe:	1d1a      	adds	r2, r3, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	600a      	str	r2, [r1, #0]
 800cec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cecc:	2301      	movs	r3, #1
 800cece:	e0a3      	b.n	800d018 <_printf_i+0x1f4>
 800ced0:	6825      	ldr	r5, [r4, #0]
 800ced2:	6808      	ldr	r0, [r1, #0]
 800ced4:	062e      	lsls	r6, r5, #24
 800ced6:	f100 0304 	add.w	r3, r0, #4
 800ceda:	d50a      	bpl.n	800cef2 <_printf_i+0xce>
 800cedc:	6805      	ldr	r5, [r0, #0]
 800cede:	600b      	str	r3, [r1, #0]
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	da03      	bge.n	800ceec <_printf_i+0xc8>
 800cee4:	232d      	movs	r3, #45	; 0x2d
 800cee6:	426d      	negs	r5, r5
 800cee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceec:	485e      	ldr	r0, [pc, #376]	; (800d068 <_printf_i+0x244>)
 800ceee:	230a      	movs	r3, #10
 800cef0:	e019      	b.n	800cf26 <_printf_i+0x102>
 800cef2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cef6:	6805      	ldr	r5, [r0, #0]
 800cef8:	600b      	str	r3, [r1, #0]
 800cefa:	bf18      	it	ne
 800cefc:	b22d      	sxthne	r5, r5
 800cefe:	e7ef      	b.n	800cee0 <_printf_i+0xbc>
 800cf00:	680b      	ldr	r3, [r1, #0]
 800cf02:	6825      	ldr	r5, [r4, #0]
 800cf04:	1d18      	adds	r0, r3, #4
 800cf06:	6008      	str	r0, [r1, #0]
 800cf08:	0628      	lsls	r0, r5, #24
 800cf0a:	d501      	bpl.n	800cf10 <_printf_i+0xec>
 800cf0c:	681d      	ldr	r5, [r3, #0]
 800cf0e:	e002      	b.n	800cf16 <_printf_i+0xf2>
 800cf10:	0669      	lsls	r1, r5, #25
 800cf12:	d5fb      	bpl.n	800cf0c <_printf_i+0xe8>
 800cf14:	881d      	ldrh	r5, [r3, #0]
 800cf16:	4854      	ldr	r0, [pc, #336]	; (800d068 <_printf_i+0x244>)
 800cf18:	2f6f      	cmp	r7, #111	; 0x6f
 800cf1a:	bf0c      	ite	eq
 800cf1c:	2308      	moveq	r3, #8
 800cf1e:	230a      	movne	r3, #10
 800cf20:	2100      	movs	r1, #0
 800cf22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf26:	6866      	ldr	r6, [r4, #4]
 800cf28:	60a6      	str	r6, [r4, #8]
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	bfa2      	ittt	ge
 800cf2e:	6821      	ldrge	r1, [r4, #0]
 800cf30:	f021 0104 	bicge.w	r1, r1, #4
 800cf34:	6021      	strge	r1, [r4, #0]
 800cf36:	b90d      	cbnz	r5, 800cf3c <_printf_i+0x118>
 800cf38:	2e00      	cmp	r6, #0
 800cf3a:	d04d      	beq.n	800cfd8 <_printf_i+0x1b4>
 800cf3c:	4616      	mov	r6, r2
 800cf3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf42:	fb03 5711 	mls	r7, r3, r1, r5
 800cf46:	5dc7      	ldrb	r7, [r0, r7]
 800cf48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf4c:	462f      	mov	r7, r5
 800cf4e:	42bb      	cmp	r3, r7
 800cf50:	460d      	mov	r5, r1
 800cf52:	d9f4      	bls.n	800cf3e <_printf_i+0x11a>
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d10b      	bne.n	800cf70 <_printf_i+0x14c>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	07df      	lsls	r7, r3, #31
 800cf5c:	d508      	bpl.n	800cf70 <_printf_i+0x14c>
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	6861      	ldr	r1, [r4, #4]
 800cf62:	4299      	cmp	r1, r3
 800cf64:	bfde      	ittt	le
 800cf66:	2330      	movle	r3, #48	; 0x30
 800cf68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf70:	1b92      	subs	r2, r2, r6
 800cf72:	6122      	str	r2, [r4, #16]
 800cf74:	f8cd a000 	str.w	sl, [sp]
 800cf78:	464b      	mov	r3, r9
 800cf7a:	aa03      	add	r2, sp, #12
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	4640      	mov	r0, r8
 800cf80:	f7ff fee2 	bl	800cd48 <_printf_common>
 800cf84:	3001      	adds	r0, #1
 800cf86:	d14c      	bne.n	800d022 <_printf_i+0x1fe>
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8c:	b004      	add	sp, #16
 800cf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf92:	4835      	ldr	r0, [pc, #212]	; (800d068 <_printf_i+0x244>)
 800cf94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	680e      	ldr	r6, [r1, #0]
 800cf9c:	061f      	lsls	r7, r3, #24
 800cf9e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cfa2:	600e      	str	r6, [r1, #0]
 800cfa4:	d514      	bpl.n	800cfd0 <_printf_i+0x1ac>
 800cfa6:	07d9      	lsls	r1, r3, #31
 800cfa8:	bf44      	itt	mi
 800cfaa:	f043 0320 	orrmi.w	r3, r3, #32
 800cfae:	6023      	strmi	r3, [r4, #0]
 800cfb0:	b91d      	cbnz	r5, 800cfba <_printf_i+0x196>
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	f023 0320 	bic.w	r3, r3, #32
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	2310      	movs	r3, #16
 800cfbc:	e7b0      	b.n	800cf20 <_printf_i+0xfc>
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	f043 0320 	orr.w	r3, r3, #32
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	2378      	movs	r3, #120	; 0x78
 800cfc8:	4828      	ldr	r0, [pc, #160]	; (800d06c <_printf_i+0x248>)
 800cfca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfce:	e7e3      	b.n	800cf98 <_printf_i+0x174>
 800cfd0:	065e      	lsls	r6, r3, #25
 800cfd2:	bf48      	it	mi
 800cfd4:	b2ad      	uxthmi	r5, r5
 800cfd6:	e7e6      	b.n	800cfa6 <_printf_i+0x182>
 800cfd8:	4616      	mov	r6, r2
 800cfda:	e7bb      	b.n	800cf54 <_printf_i+0x130>
 800cfdc:	680b      	ldr	r3, [r1, #0]
 800cfde:	6826      	ldr	r6, [r4, #0]
 800cfe0:	6960      	ldr	r0, [r4, #20]
 800cfe2:	1d1d      	adds	r5, r3, #4
 800cfe4:	600d      	str	r5, [r1, #0]
 800cfe6:	0635      	lsls	r5, r6, #24
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	d501      	bpl.n	800cff0 <_printf_i+0x1cc>
 800cfec:	6018      	str	r0, [r3, #0]
 800cfee:	e002      	b.n	800cff6 <_printf_i+0x1d2>
 800cff0:	0671      	lsls	r1, r6, #25
 800cff2:	d5fb      	bpl.n	800cfec <_printf_i+0x1c8>
 800cff4:	8018      	strh	r0, [r3, #0]
 800cff6:	2300      	movs	r3, #0
 800cff8:	6123      	str	r3, [r4, #16]
 800cffa:	4616      	mov	r6, r2
 800cffc:	e7ba      	b.n	800cf74 <_printf_i+0x150>
 800cffe:	680b      	ldr	r3, [r1, #0]
 800d000:	1d1a      	adds	r2, r3, #4
 800d002:	600a      	str	r2, [r1, #0]
 800d004:	681e      	ldr	r6, [r3, #0]
 800d006:	6862      	ldr	r2, [r4, #4]
 800d008:	2100      	movs	r1, #0
 800d00a:	4630      	mov	r0, r6
 800d00c:	f7f3 f8e8 	bl	80001e0 <memchr>
 800d010:	b108      	cbz	r0, 800d016 <_printf_i+0x1f2>
 800d012:	1b80      	subs	r0, r0, r6
 800d014:	6060      	str	r0, [r4, #4]
 800d016:	6863      	ldr	r3, [r4, #4]
 800d018:	6123      	str	r3, [r4, #16]
 800d01a:	2300      	movs	r3, #0
 800d01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d020:	e7a8      	b.n	800cf74 <_printf_i+0x150>
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	4632      	mov	r2, r6
 800d026:	4649      	mov	r1, r9
 800d028:	4640      	mov	r0, r8
 800d02a:	47d0      	blx	sl
 800d02c:	3001      	adds	r0, #1
 800d02e:	d0ab      	beq.n	800cf88 <_printf_i+0x164>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	079b      	lsls	r3, r3, #30
 800d034:	d413      	bmi.n	800d05e <_printf_i+0x23a>
 800d036:	68e0      	ldr	r0, [r4, #12]
 800d038:	9b03      	ldr	r3, [sp, #12]
 800d03a:	4298      	cmp	r0, r3
 800d03c:	bfb8      	it	lt
 800d03e:	4618      	movlt	r0, r3
 800d040:	e7a4      	b.n	800cf8c <_printf_i+0x168>
 800d042:	2301      	movs	r3, #1
 800d044:	4632      	mov	r2, r6
 800d046:	4649      	mov	r1, r9
 800d048:	4640      	mov	r0, r8
 800d04a:	47d0      	blx	sl
 800d04c:	3001      	adds	r0, #1
 800d04e:	d09b      	beq.n	800cf88 <_printf_i+0x164>
 800d050:	3501      	adds	r5, #1
 800d052:	68e3      	ldr	r3, [r4, #12]
 800d054:	9903      	ldr	r1, [sp, #12]
 800d056:	1a5b      	subs	r3, r3, r1
 800d058:	42ab      	cmp	r3, r5
 800d05a:	dcf2      	bgt.n	800d042 <_printf_i+0x21e>
 800d05c:	e7eb      	b.n	800d036 <_printf_i+0x212>
 800d05e:	2500      	movs	r5, #0
 800d060:	f104 0619 	add.w	r6, r4, #25
 800d064:	e7f5      	b.n	800d052 <_printf_i+0x22e>
 800d066:	bf00      	nop
 800d068:	0801028f 	.word	0x0801028f
 800d06c:	080102a0 	.word	0x080102a0

0800d070 <iprintf>:
 800d070:	b40f      	push	{r0, r1, r2, r3}
 800d072:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <iprintf+0x2c>)
 800d074:	b513      	push	{r0, r1, r4, lr}
 800d076:	681c      	ldr	r4, [r3, #0]
 800d078:	b124      	cbz	r4, 800d084 <iprintf+0x14>
 800d07a:	69a3      	ldr	r3, [r4, #24]
 800d07c:	b913      	cbnz	r3, 800d084 <iprintf+0x14>
 800d07e:	4620      	mov	r0, r4
 800d080:	f7ff f8d0 	bl	800c224 <__sinit>
 800d084:	ab05      	add	r3, sp, #20
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	68a1      	ldr	r1, [r4, #8]
 800d08a:	9301      	str	r3, [sp, #4]
 800d08c:	4620      	mov	r0, r4
 800d08e:	f7ff fa55 	bl	800c53c <_vfiprintf_r>
 800d092:	b002      	add	sp, #8
 800d094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d098:	b004      	add	sp, #16
 800d09a:	4770      	bx	lr
 800d09c:	20000044 	.word	0x20000044

0800d0a0 <cleanup_glue>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	6809      	ldr	r1, [r1, #0]
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	b109      	cbz	r1, 800d0ae <cleanup_glue+0xe>
 800d0aa:	f7ff fff9 	bl	800d0a0 <cleanup_glue>
 800d0ae:	4621      	mov	r1, r4
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0b6:	f001 bd61 	b.w	800eb7c <_free_r>
	...

0800d0bc <_reclaim_reent>:
 800d0bc:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <_reclaim_reent+0xb4>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4283      	cmp	r3, r0
 800d0c2:	b570      	push	{r4, r5, r6, lr}
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	d051      	beq.n	800d16c <_reclaim_reent+0xb0>
 800d0c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0ca:	b143      	cbz	r3, 800d0de <_reclaim_reent+0x22>
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d14a      	bne.n	800d168 <_reclaim_reent+0xac>
 800d0d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0d4:	6819      	ldr	r1, [r3, #0]
 800d0d6:	b111      	cbz	r1, 800d0de <_reclaim_reent+0x22>
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f001 fd4f 	bl	800eb7c <_free_r>
 800d0de:	6961      	ldr	r1, [r4, #20]
 800d0e0:	b111      	cbz	r1, 800d0e8 <_reclaim_reent+0x2c>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f001 fd4a 	bl	800eb7c <_free_r>
 800d0e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d0ea:	b111      	cbz	r1, 800d0f2 <_reclaim_reent+0x36>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f001 fd45 	bl	800eb7c <_free_r>
 800d0f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d0f4:	b111      	cbz	r1, 800d0fc <_reclaim_reent+0x40>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f001 fd40 	bl	800eb7c <_free_r>
 800d0fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d0fe:	b111      	cbz	r1, 800d106 <_reclaim_reent+0x4a>
 800d100:	4620      	mov	r0, r4
 800d102:	f001 fd3b 	bl	800eb7c <_free_r>
 800d106:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d108:	b111      	cbz	r1, 800d110 <_reclaim_reent+0x54>
 800d10a:	4620      	mov	r0, r4
 800d10c:	f001 fd36 	bl	800eb7c <_free_r>
 800d110:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d112:	b111      	cbz	r1, 800d11a <_reclaim_reent+0x5e>
 800d114:	4620      	mov	r0, r4
 800d116:	f001 fd31 	bl	800eb7c <_free_r>
 800d11a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d11c:	b111      	cbz	r1, 800d124 <_reclaim_reent+0x68>
 800d11e:	4620      	mov	r0, r4
 800d120:	f001 fd2c 	bl	800eb7c <_free_r>
 800d124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d126:	b111      	cbz	r1, 800d12e <_reclaim_reent+0x72>
 800d128:	4620      	mov	r0, r4
 800d12a:	f001 fd27 	bl	800eb7c <_free_r>
 800d12e:	69a3      	ldr	r3, [r4, #24]
 800d130:	b1e3      	cbz	r3, 800d16c <_reclaim_reent+0xb0>
 800d132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d134:	4620      	mov	r0, r4
 800d136:	4798      	blx	r3
 800d138:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d13a:	b1b9      	cbz	r1, 800d16c <_reclaim_reent+0xb0>
 800d13c:	4620      	mov	r0, r4
 800d13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d142:	f7ff bfad 	b.w	800d0a0 <cleanup_glue>
 800d146:	5949      	ldr	r1, [r1, r5]
 800d148:	b941      	cbnz	r1, 800d15c <_reclaim_reent+0xa0>
 800d14a:	3504      	adds	r5, #4
 800d14c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d14e:	2d80      	cmp	r5, #128	; 0x80
 800d150:	68d9      	ldr	r1, [r3, #12]
 800d152:	d1f8      	bne.n	800d146 <_reclaim_reent+0x8a>
 800d154:	4620      	mov	r0, r4
 800d156:	f001 fd11 	bl	800eb7c <_free_r>
 800d15a:	e7ba      	b.n	800d0d2 <_reclaim_reent+0x16>
 800d15c:	680e      	ldr	r6, [r1, #0]
 800d15e:	4620      	mov	r0, r4
 800d160:	f001 fd0c 	bl	800eb7c <_free_r>
 800d164:	4631      	mov	r1, r6
 800d166:	e7ef      	b.n	800d148 <_reclaim_reent+0x8c>
 800d168:	2500      	movs	r5, #0
 800d16a:	e7ef      	b.n	800d14c <_reclaim_reent+0x90>
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	bf00      	nop
 800d170:	20000044 	.word	0x20000044

0800d174 <_sbrk_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d06      	ldr	r5, [pc, #24]	; (800d190 <_sbrk_r+0x1c>)
 800d178:	2300      	movs	r3, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	602b      	str	r3, [r5, #0]
 800d180:	f7f5 f904 	bl	800238c <_sbrk>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	d102      	bne.n	800d18e <_sbrk_r+0x1a>
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	b103      	cbz	r3, 800d18e <_sbrk_r+0x1a>
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20008b80 	.word	0x20008b80

0800d194 <sniprintf>:
 800d194:	b40c      	push	{r2, r3}
 800d196:	b530      	push	{r4, r5, lr}
 800d198:	4b17      	ldr	r3, [pc, #92]	; (800d1f8 <sniprintf+0x64>)
 800d19a:	1e0c      	subs	r4, r1, #0
 800d19c:	681d      	ldr	r5, [r3, #0]
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	da08      	bge.n	800d1b4 <sniprintf+0x20>
 800d1a2:	238b      	movs	r3, #139	; 0x8b
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1aa:	b01d      	add	sp, #116	; 0x74
 800d1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1b0:	b002      	add	sp, #8
 800d1b2:	4770      	bx	lr
 800d1b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d1bc:	bf14      	ite	ne
 800d1be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1c2:	4623      	moveq	r3, r4
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1cc:	9002      	str	r0, [sp, #8]
 800d1ce:	9006      	str	r0, [sp, #24]
 800d1d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d1d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d1d6:	ab21      	add	r3, sp, #132	; 0x84
 800d1d8:	a902      	add	r1, sp, #8
 800d1da:	4628      	mov	r0, r5
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	f001 fd9f 	bl	800ed20 <_svfiprintf_r>
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	bfbc      	itt	lt
 800d1e6:	238b      	movlt	r3, #139	; 0x8b
 800d1e8:	602b      	strlt	r3, [r5, #0]
 800d1ea:	2c00      	cmp	r4, #0
 800d1ec:	d0dd      	beq.n	800d1aa <sniprintf+0x16>
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
 800d1f4:	e7d9      	b.n	800d1aa <sniprintf+0x16>
 800d1f6:	bf00      	nop
 800d1f8:	20000044 	.word	0x20000044

0800d1fc <__sread>:
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	460c      	mov	r4, r1
 800d200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d204:	f001 fe8c 	bl	800ef20 <_read_r>
 800d208:	2800      	cmp	r0, #0
 800d20a:	bfab      	itete	ge
 800d20c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d20e:	89a3      	ldrhlt	r3, [r4, #12]
 800d210:	181b      	addge	r3, r3, r0
 800d212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d216:	bfac      	ite	ge
 800d218:	6563      	strge	r3, [r4, #84]	; 0x54
 800d21a:	81a3      	strhlt	r3, [r4, #12]
 800d21c:	bd10      	pop	{r4, pc}

0800d21e <__swrite>:
 800d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d222:	461f      	mov	r7, r3
 800d224:	898b      	ldrh	r3, [r1, #12]
 800d226:	05db      	lsls	r3, r3, #23
 800d228:	4605      	mov	r5, r0
 800d22a:	460c      	mov	r4, r1
 800d22c:	4616      	mov	r6, r2
 800d22e:	d505      	bpl.n	800d23c <__swrite+0x1e>
 800d230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d234:	2302      	movs	r3, #2
 800d236:	2200      	movs	r2, #0
 800d238:	f001 f888 	bl	800e34c <_lseek_r>
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d246:	81a3      	strh	r3, [r4, #12]
 800d248:	4632      	mov	r2, r6
 800d24a:	463b      	mov	r3, r7
 800d24c:	4628      	mov	r0, r5
 800d24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d252:	f000 b8a3 	b.w	800d39c <_write_r>

0800d256 <__sseek>:
 800d256:	b510      	push	{r4, lr}
 800d258:	460c      	mov	r4, r1
 800d25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25e:	f001 f875 	bl	800e34c <_lseek_r>
 800d262:	1c43      	adds	r3, r0, #1
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	bf15      	itete	ne
 800d268:	6560      	strne	r0, [r4, #84]	; 0x54
 800d26a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d26e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strheq	r3, [r4, #12]
 800d274:	bf18      	it	ne
 800d276:	81a3      	strhne	r3, [r4, #12]
 800d278:	bd10      	pop	{r4, pc}

0800d27a <__sclose>:
 800d27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27e:	f000 b915 	b.w	800d4ac <_close_r>

0800d282 <_vsniprintf_r>:
 800d282:	b530      	push	{r4, r5, lr}
 800d284:	1e14      	subs	r4, r2, #0
 800d286:	4605      	mov	r5, r0
 800d288:	b09b      	sub	sp, #108	; 0x6c
 800d28a:	4618      	mov	r0, r3
 800d28c:	da05      	bge.n	800d29a <_vsniprintf_r+0x18>
 800d28e:	238b      	movs	r3, #139	; 0x8b
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	b01b      	add	sp, #108	; 0x6c
 800d298:	bd30      	pop	{r4, r5, pc}
 800d29a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d29e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d2a2:	bf14      	ite	ne
 800d2a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d2a8:	4623      	moveq	r3, r4
 800d2aa:	9302      	str	r3, [sp, #8]
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2b2:	9100      	str	r1, [sp, #0]
 800d2b4:	9104      	str	r1, [sp, #16]
 800d2b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2be:	4669      	mov	r1, sp
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	f001 fd2d 	bl	800ed20 <_svfiprintf_r>
 800d2c6:	1c43      	adds	r3, r0, #1
 800d2c8:	bfbc      	itt	lt
 800d2ca:	238b      	movlt	r3, #139	; 0x8b
 800d2cc:	602b      	strlt	r3, [r5, #0]
 800d2ce:	2c00      	cmp	r4, #0
 800d2d0:	d0e1      	beq.n	800d296 <_vsniprintf_r+0x14>
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	e7dd      	b.n	800d296 <_vsniprintf_r+0x14>
	...

0800d2dc <vsniprintf>:
 800d2dc:	b507      	push	{r0, r1, r2, lr}
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	460a      	mov	r2, r1
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	4803      	ldr	r0, [pc, #12]	; (800d2f4 <vsniprintf+0x18>)
 800d2e8:	6800      	ldr	r0, [r0, #0]
 800d2ea:	f7ff ffca 	bl	800d282 <_vsniprintf_r>
 800d2ee:	b003      	add	sp, #12
 800d2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2f4:	20000044 	.word	0x20000044

0800d2f8 <__swbuf_r>:
 800d2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fa:	460e      	mov	r6, r1
 800d2fc:	4614      	mov	r4, r2
 800d2fe:	4605      	mov	r5, r0
 800d300:	b118      	cbz	r0, 800d30a <__swbuf_r+0x12>
 800d302:	6983      	ldr	r3, [r0, #24]
 800d304:	b90b      	cbnz	r3, 800d30a <__swbuf_r+0x12>
 800d306:	f7fe ff8d 	bl	800c224 <__sinit>
 800d30a:	4b21      	ldr	r3, [pc, #132]	; (800d390 <__swbuf_r+0x98>)
 800d30c:	429c      	cmp	r4, r3
 800d30e:	d12b      	bne.n	800d368 <__swbuf_r+0x70>
 800d310:	686c      	ldr	r4, [r5, #4]
 800d312:	69a3      	ldr	r3, [r4, #24]
 800d314:	60a3      	str	r3, [r4, #8]
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	071a      	lsls	r2, r3, #28
 800d31a:	d52f      	bpl.n	800d37c <__swbuf_r+0x84>
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	b36b      	cbz	r3, 800d37c <__swbuf_r+0x84>
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	6820      	ldr	r0, [r4, #0]
 800d324:	1ac0      	subs	r0, r0, r3
 800d326:	6963      	ldr	r3, [r4, #20]
 800d328:	b2f6      	uxtb	r6, r6
 800d32a:	4283      	cmp	r3, r0
 800d32c:	4637      	mov	r7, r6
 800d32e:	dc04      	bgt.n	800d33a <__swbuf_r+0x42>
 800d330:	4621      	mov	r1, r4
 800d332:	4628      	mov	r0, r5
 800d334:	f000 ffca 	bl	800e2cc <_fflush_r>
 800d338:	bb30      	cbnz	r0, 800d388 <__swbuf_r+0x90>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	60a3      	str	r3, [r4, #8]
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	6022      	str	r2, [r4, #0]
 800d346:	701e      	strb	r6, [r3, #0]
 800d348:	6963      	ldr	r3, [r4, #20]
 800d34a:	3001      	adds	r0, #1
 800d34c:	4283      	cmp	r3, r0
 800d34e:	d004      	beq.n	800d35a <__swbuf_r+0x62>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	07db      	lsls	r3, r3, #31
 800d354:	d506      	bpl.n	800d364 <__swbuf_r+0x6c>
 800d356:	2e0a      	cmp	r6, #10
 800d358:	d104      	bne.n	800d364 <__swbuf_r+0x6c>
 800d35a:	4621      	mov	r1, r4
 800d35c:	4628      	mov	r0, r5
 800d35e:	f000 ffb5 	bl	800e2cc <_fflush_r>
 800d362:	b988      	cbnz	r0, 800d388 <__swbuf_r+0x90>
 800d364:	4638      	mov	r0, r7
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d368:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <__swbuf_r+0x9c>)
 800d36a:	429c      	cmp	r4, r3
 800d36c:	d101      	bne.n	800d372 <__swbuf_r+0x7a>
 800d36e:	68ac      	ldr	r4, [r5, #8]
 800d370:	e7cf      	b.n	800d312 <__swbuf_r+0x1a>
 800d372:	4b09      	ldr	r3, [pc, #36]	; (800d398 <__swbuf_r+0xa0>)
 800d374:	429c      	cmp	r4, r3
 800d376:	bf08      	it	eq
 800d378:	68ec      	ldreq	r4, [r5, #12]
 800d37a:	e7ca      	b.n	800d312 <__swbuf_r+0x1a>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 f81e 	bl	800d3c0 <__swsetup_r>
 800d384:	2800      	cmp	r0, #0
 800d386:	d0cb      	beq.n	800d320 <__swbuf_r+0x28>
 800d388:	f04f 37ff 	mov.w	r7, #4294967295
 800d38c:	e7ea      	b.n	800d364 <__swbuf_r+0x6c>
 800d38e:	bf00      	nop
 800d390:	08010228 	.word	0x08010228
 800d394:	08010248 	.word	0x08010248
 800d398:	08010208 	.word	0x08010208

0800d39c <_write_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	; (800d3bc <_write_r+0x20>)
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	602a      	str	r2, [r5, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f7f4 ff9d 	bl	80022ea <_write>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_write_r+0x1e>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_write_r+0x1e>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20008b80 	.word	0x20008b80

0800d3c0 <__swsetup_r>:
 800d3c0:	4b32      	ldr	r3, [pc, #200]	; (800d48c <__swsetup_r+0xcc>)
 800d3c2:	b570      	push	{r4, r5, r6, lr}
 800d3c4:	681d      	ldr	r5, [r3, #0]
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	b125      	cbz	r5, 800d3d6 <__swsetup_r+0x16>
 800d3cc:	69ab      	ldr	r3, [r5, #24]
 800d3ce:	b913      	cbnz	r3, 800d3d6 <__swsetup_r+0x16>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7fe ff27 	bl	800c224 <__sinit>
 800d3d6:	4b2e      	ldr	r3, [pc, #184]	; (800d490 <__swsetup_r+0xd0>)
 800d3d8:	429c      	cmp	r4, r3
 800d3da:	d10f      	bne.n	800d3fc <__swsetup_r+0x3c>
 800d3dc:	686c      	ldr	r4, [r5, #4]
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3e4:	0719      	lsls	r1, r3, #28
 800d3e6:	d42c      	bmi.n	800d442 <__swsetup_r+0x82>
 800d3e8:	06dd      	lsls	r5, r3, #27
 800d3ea:	d411      	bmi.n	800d410 <__swsetup_r+0x50>
 800d3ec:	2309      	movs	r3, #9
 800d3ee:	6033      	str	r3, [r6, #0]
 800d3f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fa:	e03e      	b.n	800d47a <__swsetup_r+0xba>
 800d3fc:	4b25      	ldr	r3, [pc, #148]	; (800d494 <__swsetup_r+0xd4>)
 800d3fe:	429c      	cmp	r4, r3
 800d400:	d101      	bne.n	800d406 <__swsetup_r+0x46>
 800d402:	68ac      	ldr	r4, [r5, #8]
 800d404:	e7eb      	b.n	800d3de <__swsetup_r+0x1e>
 800d406:	4b24      	ldr	r3, [pc, #144]	; (800d498 <__swsetup_r+0xd8>)
 800d408:	429c      	cmp	r4, r3
 800d40a:	bf08      	it	eq
 800d40c:	68ec      	ldreq	r4, [r5, #12]
 800d40e:	e7e6      	b.n	800d3de <__swsetup_r+0x1e>
 800d410:	0758      	lsls	r0, r3, #29
 800d412:	d512      	bpl.n	800d43a <__swsetup_r+0x7a>
 800d414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d416:	b141      	cbz	r1, 800d42a <__swsetup_r+0x6a>
 800d418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d41c:	4299      	cmp	r1, r3
 800d41e:	d002      	beq.n	800d426 <__swsetup_r+0x66>
 800d420:	4630      	mov	r0, r6
 800d422:	f001 fbab 	bl	800eb7c <_free_r>
 800d426:	2300      	movs	r3, #0
 800d428:	6363      	str	r3, [r4, #52]	; 0x34
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	2300      	movs	r3, #0
 800d434:	6063      	str	r3, [r4, #4]
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	f043 0308 	orr.w	r3, r3, #8
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	b94b      	cbnz	r3, 800d45a <__swsetup_r+0x9a>
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d450:	d003      	beq.n	800d45a <__swsetup_r+0x9a>
 800d452:	4621      	mov	r1, r4
 800d454:	4630      	mov	r0, r6
 800d456:	f000 ffaf 	bl	800e3b8 <__smakebuf_r>
 800d45a:	89a0      	ldrh	r0, [r4, #12]
 800d45c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d460:	f010 0301 	ands.w	r3, r0, #1
 800d464:	d00a      	beq.n	800d47c <__swsetup_r+0xbc>
 800d466:	2300      	movs	r3, #0
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	6963      	ldr	r3, [r4, #20]
 800d46c:	425b      	negs	r3, r3
 800d46e:	61a3      	str	r3, [r4, #24]
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b943      	cbnz	r3, 800d486 <__swsetup_r+0xc6>
 800d474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d478:	d1ba      	bne.n	800d3f0 <__swsetup_r+0x30>
 800d47a:	bd70      	pop	{r4, r5, r6, pc}
 800d47c:	0781      	lsls	r1, r0, #30
 800d47e:	bf58      	it	pl
 800d480:	6963      	ldrpl	r3, [r4, #20]
 800d482:	60a3      	str	r3, [r4, #8]
 800d484:	e7f4      	b.n	800d470 <__swsetup_r+0xb0>
 800d486:	2000      	movs	r0, #0
 800d488:	e7f7      	b.n	800d47a <__swsetup_r+0xba>
 800d48a:	bf00      	nop
 800d48c:	20000044 	.word	0x20000044
 800d490:	08010228 	.word	0x08010228
 800d494:	08010248 	.word	0x08010248
 800d498:	08010208 	.word	0x08010208

0800d49c <abort>:
 800d49c:	b508      	push	{r3, lr}
 800d49e:	2006      	movs	r0, #6
 800d4a0:	f001 fd78 	bl	800ef94 <raise>
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	f7f4 fef9 	bl	800229c <_exit>
	...

0800d4ac <_close_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d06      	ldr	r5, [pc, #24]	; (800d4c8 <_close_r+0x1c>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	f7f4 ff33 	bl	8002322 <_close>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_close_r+0x1a>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_close_r+0x1a>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	20008b80 	.word	0x20008b80

0800d4cc <quorem>:
 800d4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	6903      	ldr	r3, [r0, #16]
 800d4d2:	690c      	ldr	r4, [r1, #16]
 800d4d4:	42a3      	cmp	r3, r4
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	f2c0 8081 	blt.w	800d5de <quorem+0x112>
 800d4dc:	3c01      	subs	r4, #1
 800d4de:	f101 0814 	add.w	r8, r1, #20
 800d4e2:	f100 0514 	add.w	r5, r0, #20
 800d4e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d500:	fbb2 f6f3 	udiv	r6, r2, r3
 800d504:	d331      	bcc.n	800d56a <quorem+0x9e>
 800d506:	f04f 0e00 	mov.w	lr, #0
 800d50a:	4640      	mov	r0, r8
 800d50c:	46ac      	mov	ip, r5
 800d50e:	46f2      	mov	sl, lr
 800d510:	f850 2b04 	ldr.w	r2, [r0], #4
 800d514:	b293      	uxth	r3, r2
 800d516:	fb06 e303 	mla	r3, r6, r3, lr
 800d51a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d51e:	b29b      	uxth	r3, r3
 800d520:	ebaa 0303 	sub.w	r3, sl, r3
 800d524:	0c12      	lsrs	r2, r2, #16
 800d526:	f8dc a000 	ldr.w	sl, [ip]
 800d52a:	fb06 e202 	mla	r2, r6, r2, lr
 800d52e:	fa13 f38a 	uxtah	r3, r3, sl
 800d532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d536:	fa1f fa82 	uxth.w	sl, r2
 800d53a:	f8dc 2000 	ldr.w	r2, [ip]
 800d53e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d542:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d546:	b29b      	uxth	r3, r3
 800d548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d54c:	4581      	cmp	r9, r0
 800d54e:	f84c 3b04 	str.w	r3, [ip], #4
 800d552:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d556:	d2db      	bcs.n	800d510 <quorem+0x44>
 800d558:	f855 300b 	ldr.w	r3, [r5, fp]
 800d55c:	b92b      	cbnz	r3, 800d56a <quorem+0x9e>
 800d55e:	9b01      	ldr	r3, [sp, #4]
 800d560:	3b04      	subs	r3, #4
 800d562:	429d      	cmp	r5, r3
 800d564:	461a      	mov	r2, r3
 800d566:	d32e      	bcc.n	800d5c6 <quorem+0xfa>
 800d568:	613c      	str	r4, [r7, #16]
 800d56a:	4638      	mov	r0, r7
 800d56c:	f001 f9f6 	bl	800e95c <__mcmp>
 800d570:	2800      	cmp	r0, #0
 800d572:	db24      	blt.n	800d5be <quorem+0xf2>
 800d574:	3601      	adds	r6, #1
 800d576:	4628      	mov	r0, r5
 800d578:	f04f 0c00 	mov.w	ip, #0
 800d57c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d580:	f8d0 e000 	ldr.w	lr, [r0]
 800d584:	b293      	uxth	r3, r2
 800d586:	ebac 0303 	sub.w	r3, ip, r3
 800d58a:	0c12      	lsrs	r2, r2, #16
 800d58c:	fa13 f38e 	uxtah	r3, r3, lr
 800d590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d598:	b29b      	uxth	r3, r3
 800d59a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d59e:	45c1      	cmp	r9, r8
 800d5a0:	f840 3b04 	str.w	r3, [r0], #4
 800d5a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5a8:	d2e8      	bcs.n	800d57c <quorem+0xb0>
 800d5aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5b2:	b922      	cbnz	r2, 800d5be <quorem+0xf2>
 800d5b4:	3b04      	subs	r3, #4
 800d5b6:	429d      	cmp	r5, r3
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	d30a      	bcc.n	800d5d2 <quorem+0x106>
 800d5bc:	613c      	str	r4, [r7, #16]
 800d5be:	4630      	mov	r0, r6
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c6:	6812      	ldr	r2, [r2, #0]
 800d5c8:	3b04      	subs	r3, #4
 800d5ca:	2a00      	cmp	r2, #0
 800d5cc:	d1cc      	bne.n	800d568 <quorem+0x9c>
 800d5ce:	3c01      	subs	r4, #1
 800d5d0:	e7c7      	b.n	800d562 <quorem+0x96>
 800d5d2:	6812      	ldr	r2, [r2, #0]
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	d1f0      	bne.n	800d5bc <quorem+0xf0>
 800d5da:	3c01      	subs	r4, #1
 800d5dc:	e7eb      	b.n	800d5b6 <quorem+0xea>
 800d5de:	2000      	movs	r0, #0
 800d5e0:	e7ee      	b.n	800d5c0 <quorem+0xf4>
 800d5e2:	0000      	movs	r0, r0
 800d5e4:	0000      	movs	r0, r0
	...

0800d5e8 <_dtoa_r>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	ed2d 8b02 	vpush	{d8}
 800d5f0:	ec57 6b10 	vmov	r6, r7, d0
 800d5f4:	b095      	sub	sp, #84	; 0x54
 800d5f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5fc:	9105      	str	r1, [sp, #20]
 800d5fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d602:	4604      	mov	r4, r0
 800d604:	9209      	str	r2, [sp, #36]	; 0x24
 800d606:	930f      	str	r3, [sp, #60]	; 0x3c
 800d608:	b975      	cbnz	r5, 800d628 <_dtoa_r+0x40>
 800d60a:	2010      	movs	r0, #16
 800d60c:	f000 ff14 	bl	800e438 <malloc>
 800d610:	4602      	mov	r2, r0
 800d612:	6260      	str	r0, [r4, #36]	; 0x24
 800d614:	b920      	cbnz	r0, 800d620 <_dtoa_r+0x38>
 800d616:	4bb2      	ldr	r3, [pc, #712]	; (800d8e0 <_dtoa_r+0x2f8>)
 800d618:	21ea      	movs	r1, #234	; 0xea
 800d61a:	48b2      	ldr	r0, [pc, #712]	; (800d8e4 <_dtoa_r+0x2fc>)
 800d61c:	f7fe fd86 	bl	800c12c <__assert_func>
 800d620:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d624:	6005      	str	r5, [r0, #0]
 800d626:	60c5      	str	r5, [r0, #12]
 800d628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d62a:	6819      	ldr	r1, [r3, #0]
 800d62c:	b151      	cbz	r1, 800d644 <_dtoa_r+0x5c>
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	604a      	str	r2, [r1, #4]
 800d632:	2301      	movs	r3, #1
 800d634:	4093      	lsls	r3, r2
 800d636:	608b      	str	r3, [r1, #8]
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 ff51 	bl	800e4e0 <_Bfree>
 800d63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	1e3b      	subs	r3, r7, #0
 800d646:	bfb9      	ittee	lt
 800d648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d64c:	9303      	strlt	r3, [sp, #12]
 800d64e:	2300      	movge	r3, #0
 800d650:	f8c8 3000 	strge.w	r3, [r8]
 800d654:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d658:	4ba3      	ldr	r3, [pc, #652]	; (800d8e8 <_dtoa_r+0x300>)
 800d65a:	bfbc      	itt	lt
 800d65c:	2201      	movlt	r2, #1
 800d65e:	f8c8 2000 	strlt.w	r2, [r8]
 800d662:	ea33 0309 	bics.w	r3, r3, r9
 800d666:	d11b      	bne.n	800d6a0 <_dtoa_r+0xb8>
 800d668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d66a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d674:	4333      	orrs	r3, r6
 800d676:	f000 857a 	beq.w	800e16e <_dtoa_r+0xb86>
 800d67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d67c:	b963      	cbnz	r3, 800d698 <_dtoa_r+0xb0>
 800d67e:	4b9b      	ldr	r3, [pc, #620]	; (800d8ec <_dtoa_r+0x304>)
 800d680:	e024      	b.n	800d6cc <_dtoa_r+0xe4>
 800d682:	4b9b      	ldr	r3, [pc, #620]	; (800d8f0 <_dtoa_r+0x308>)
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	9800      	ldr	r0, [sp, #0]
 800d68e:	b015      	add	sp, #84	; 0x54
 800d690:	ecbd 8b02 	vpop	{d8}
 800d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d698:	4b94      	ldr	r3, [pc, #592]	; (800d8ec <_dtoa_r+0x304>)
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	3303      	adds	r3, #3
 800d69e:	e7f3      	b.n	800d688 <_dtoa_r+0xa0>
 800d6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	ec51 0b17 	vmov	r0, r1, d7
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d6b0:	f7f3 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	b158      	cbz	r0, 800d6d0 <_dtoa_r+0xe8>
 800d6b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 8551 	beq.w	800e168 <_dtoa_r+0xb80>
 800d6c6:	488b      	ldr	r0, [pc, #556]	; (800d8f4 <_dtoa_r+0x30c>)
 800d6c8:	6018      	str	r0, [r3, #0]
 800d6ca:	1e43      	subs	r3, r0, #1
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	e7dd      	b.n	800d68c <_dtoa_r+0xa4>
 800d6d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d6d4:	aa12      	add	r2, sp, #72	; 0x48
 800d6d6:	a913      	add	r1, sp, #76	; 0x4c
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f001 f9e3 	bl	800eaa4 <__d2b>
 800d6de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6e2:	4683      	mov	fp, r0
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	d07c      	beq.n	800d7e2 <_dtoa_r+0x1fa>
 800d6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d6f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d702:	4b7d      	ldr	r3, [pc, #500]	; (800d8f8 <_dtoa_r+0x310>)
 800d704:	2200      	movs	r2, #0
 800d706:	4630      	mov	r0, r6
 800d708:	4639      	mov	r1, r7
 800d70a:	f7f2 fdbd 	bl	8000288 <__aeabi_dsub>
 800d70e:	a36e      	add	r3, pc, #440	; (adr r3, 800d8c8 <_dtoa_r+0x2e0>)
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	f7f2 ff70 	bl	80005f8 <__aeabi_dmul>
 800d718:	a36d      	add	r3, pc, #436	; (adr r3, 800d8d0 <_dtoa_r+0x2e8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 fdb5 	bl	800028c <__adddf3>
 800d722:	4606      	mov	r6, r0
 800d724:	4628      	mov	r0, r5
 800d726:	460f      	mov	r7, r1
 800d728:	f7f2 fefc 	bl	8000524 <__aeabi_i2d>
 800d72c:	a36a      	add	r3, pc, #424	; (adr r3, 800d8d8 <_dtoa_r+0x2f0>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 ff61 	bl	80005f8 <__aeabi_dmul>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4630      	mov	r0, r6
 800d73c:	4639      	mov	r1, r7
 800d73e:	f7f2 fda5 	bl	800028c <__adddf3>
 800d742:	4606      	mov	r6, r0
 800d744:	460f      	mov	r7, r1
 800d746:	f7f3 fa07 	bl	8000b58 <__aeabi_d2iz>
 800d74a:	2200      	movs	r2, #0
 800d74c:	4682      	mov	sl, r0
 800d74e:	2300      	movs	r3, #0
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f3 f9c2 	bl	8000adc <__aeabi_dcmplt>
 800d758:	b148      	cbz	r0, 800d76e <_dtoa_r+0x186>
 800d75a:	4650      	mov	r0, sl
 800d75c:	f7f2 fee2 	bl	8000524 <__aeabi_i2d>
 800d760:	4632      	mov	r2, r6
 800d762:	463b      	mov	r3, r7
 800d764:	f7f3 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d768:	b908      	cbnz	r0, 800d76e <_dtoa_r+0x186>
 800d76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d76e:	f1ba 0f16 	cmp.w	sl, #22
 800d772:	d854      	bhi.n	800d81e <_dtoa_r+0x236>
 800d774:	4b61      	ldr	r3, [pc, #388]	; (800d8fc <_dtoa_r+0x314>)
 800d776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d782:	f7f3 f9ab 	bl	8000adc <__aeabi_dcmplt>
 800d786:	2800      	cmp	r0, #0
 800d788:	d04b      	beq.n	800d822 <_dtoa_r+0x23a>
 800d78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d78e:	2300      	movs	r3, #0
 800d790:	930e      	str	r3, [sp, #56]	; 0x38
 800d792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d794:	1b5d      	subs	r5, r3, r5
 800d796:	1e6b      	subs	r3, r5, #1
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	bf43      	ittte	mi
 800d79c:	2300      	movmi	r3, #0
 800d79e:	f1c5 0801 	rsbmi	r8, r5, #1
 800d7a2:	9304      	strmi	r3, [sp, #16]
 800d7a4:	f04f 0800 	movpl.w	r8, #0
 800d7a8:	f1ba 0f00 	cmp.w	sl, #0
 800d7ac:	db3b      	blt.n	800d826 <_dtoa_r+0x23e>
 800d7ae:	9b04      	ldr	r3, [sp, #16]
 800d7b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d7b4:	4453      	add	r3, sl
 800d7b6:	9304      	str	r3, [sp, #16]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	9306      	str	r3, [sp, #24]
 800d7bc:	9b05      	ldr	r3, [sp, #20]
 800d7be:	2b09      	cmp	r3, #9
 800d7c0:	d869      	bhi.n	800d896 <_dtoa_r+0x2ae>
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	bfc4      	itt	gt
 800d7c6:	3b04      	subgt	r3, #4
 800d7c8:	9305      	strgt	r3, [sp, #20]
 800d7ca:	9b05      	ldr	r3, [sp, #20]
 800d7cc:	f1a3 0302 	sub.w	r3, r3, #2
 800d7d0:	bfcc      	ite	gt
 800d7d2:	2500      	movgt	r5, #0
 800d7d4:	2501      	movle	r5, #1
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d869      	bhi.n	800d8ae <_dtoa_r+0x2c6>
 800d7da:	e8df f003 	tbb	[pc, r3]
 800d7de:	4e2c      	.short	0x4e2c
 800d7e0:	5a4c      	.short	0x5a4c
 800d7e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d7e6:	441d      	add	r5, r3
 800d7e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7ec:	2b20      	cmp	r3, #32
 800d7ee:	bfc1      	itttt	gt
 800d7f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800d7fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d800:	bfda      	itte	le
 800d802:	f1c3 0320 	rsble	r3, r3, #32
 800d806:	fa06 f003 	lslle.w	r0, r6, r3
 800d80a:	4318      	orrgt	r0, r3
 800d80c:	f7f2 fe7a 	bl	8000504 <__aeabi_ui2d>
 800d810:	2301      	movs	r3, #1
 800d812:	4606      	mov	r6, r0
 800d814:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d818:	3d01      	subs	r5, #1
 800d81a:	9310      	str	r3, [sp, #64]	; 0x40
 800d81c:	e771      	b.n	800d702 <_dtoa_r+0x11a>
 800d81e:	2301      	movs	r3, #1
 800d820:	e7b6      	b.n	800d790 <_dtoa_r+0x1a8>
 800d822:	900e      	str	r0, [sp, #56]	; 0x38
 800d824:	e7b5      	b.n	800d792 <_dtoa_r+0x1aa>
 800d826:	f1ca 0300 	rsb	r3, sl, #0
 800d82a:	9306      	str	r3, [sp, #24]
 800d82c:	2300      	movs	r3, #0
 800d82e:	eba8 080a 	sub.w	r8, r8, sl
 800d832:	930d      	str	r3, [sp, #52]	; 0x34
 800d834:	e7c2      	b.n	800d7bc <_dtoa_r+0x1d4>
 800d836:	2300      	movs	r3, #0
 800d838:	9308      	str	r3, [sp, #32]
 800d83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dc39      	bgt.n	800d8b4 <_dtoa_r+0x2cc>
 800d840:	f04f 0901 	mov.w	r9, #1
 800d844:	f8cd 9004 	str.w	r9, [sp, #4]
 800d848:	464b      	mov	r3, r9
 800d84a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d84e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d850:	2200      	movs	r2, #0
 800d852:	6042      	str	r2, [r0, #4]
 800d854:	2204      	movs	r2, #4
 800d856:	f102 0614 	add.w	r6, r2, #20
 800d85a:	429e      	cmp	r6, r3
 800d85c:	6841      	ldr	r1, [r0, #4]
 800d85e:	d92f      	bls.n	800d8c0 <_dtoa_r+0x2d8>
 800d860:	4620      	mov	r0, r4
 800d862:	f000 fdfd 	bl	800e460 <_Balloc>
 800d866:	9000      	str	r0, [sp, #0]
 800d868:	2800      	cmp	r0, #0
 800d86a:	d14b      	bne.n	800d904 <_dtoa_r+0x31c>
 800d86c:	4b24      	ldr	r3, [pc, #144]	; (800d900 <_dtoa_r+0x318>)
 800d86e:	4602      	mov	r2, r0
 800d870:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d874:	e6d1      	b.n	800d61a <_dtoa_r+0x32>
 800d876:	2301      	movs	r3, #1
 800d878:	e7de      	b.n	800d838 <_dtoa_r+0x250>
 800d87a:	2300      	movs	r3, #0
 800d87c:	9308      	str	r3, [sp, #32]
 800d87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d880:	eb0a 0903 	add.w	r9, sl, r3
 800d884:	f109 0301 	add.w	r3, r9, #1
 800d888:	2b01      	cmp	r3, #1
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	bfb8      	it	lt
 800d88e:	2301      	movlt	r3, #1
 800d890:	e7dd      	b.n	800d84e <_dtoa_r+0x266>
 800d892:	2301      	movs	r3, #1
 800d894:	e7f2      	b.n	800d87c <_dtoa_r+0x294>
 800d896:	2501      	movs	r5, #1
 800d898:	2300      	movs	r3, #0
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	9508      	str	r5, [sp, #32]
 800d89e:	f04f 39ff 	mov.w	r9, #4294967295
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800d8a8:	2312      	movs	r3, #18
 800d8aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ac:	e7cf      	b.n	800d84e <_dtoa_r+0x266>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	9308      	str	r3, [sp, #32]
 800d8b2:	e7f4      	b.n	800d89e <_dtoa_r+0x2b6>
 800d8b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d8b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d8bc:	464b      	mov	r3, r9
 800d8be:	e7c6      	b.n	800d84e <_dtoa_r+0x266>
 800d8c0:	3101      	adds	r1, #1
 800d8c2:	6041      	str	r1, [r0, #4]
 800d8c4:	0052      	lsls	r2, r2, #1
 800d8c6:	e7c6      	b.n	800d856 <_dtoa_r+0x26e>
 800d8c8:	636f4361 	.word	0x636f4361
 800d8cc:	3fd287a7 	.word	0x3fd287a7
 800d8d0:	8b60c8b3 	.word	0x8b60c8b3
 800d8d4:	3fc68a28 	.word	0x3fc68a28
 800d8d8:	509f79fb 	.word	0x509f79fb
 800d8dc:	3fd34413 	.word	0x3fd34413
 800d8e0:	080102be 	.word	0x080102be
 800d8e4:	080102d5 	.word	0x080102d5
 800d8e8:	7ff00000 	.word	0x7ff00000
 800d8ec:	080102ba 	.word	0x080102ba
 800d8f0:	080102b1 	.word	0x080102b1
 800d8f4:	0801028e 	.word	0x0801028e
 800d8f8:	3ff80000 	.word	0x3ff80000
 800d8fc:	080103d0 	.word	0x080103d0
 800d900:	08010334 	.word	0x08010334
 800d904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d906:	9a00      	ldr	r2, [sp, #0]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	9b01      	ldr	r3, [sp, #4]
 800d90c:	2b0e      	cmp	r3, #14
 800d90e:	f200 80ad 	bhi.w	800da6c <_dtoa_r+0x484>
 800d912:	2d00      	cmp	r5, #0
 800d914:	f000 80aa 	beq.w	800da6c <_dtoa_r+0x484>
 800d918:	f1ba 0f00 	cmp.w	sl, #0
 800d91c:	dd36      	ble.n	800d98c <_dtoa_r+0x3a4>
 800d91e:	4ac3      	ldr	r2, [pc, #780]	; (800dc2c <_dtoa_r+0x644>)
 800d920:	f00a 030f 	and.w	r3, sl, #15
 800d924:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d928:	ed93 7b00 	vldr	d7, [r3]
 800d92c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d930:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d934:	eeb0 8a47 	vmov.f32	s16, s14
 800d938:	eef0 8a67 	vmov.f32	s17, s15
 800d93c:	d016      	beq.n	800d96c <_dtoa_r+0x384>
 800d93e:	4bbc      	ldr	r3, [pc, #752]	; (800dc30 <_dtoa_r+0x648>)
 800d940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d948:	f7f2 ff80 	bl	800084c <__aeabi_ddiv>
 800d94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d950:	f007 070f 	and.w	r7, r7, #15
 800d954:	2503      	movs	r5, #3
 800d956:	4eb6      	ldr	r6, [pc, #728]	; (800dc30 <_dtoa_r+0x648>)
 800d958:	b957      	cbnz	r7, 800d970 <_dtoa_r+0x388>
 800d95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95e:	ec53 2b18 	vmov	r2, r3, d8
 800d962:	f7f2 ff73 	bl	800084c <__aeabi_ddiv>
 800d966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d96a:	e029      	b.n	800d9c0 <_dtoa_r+0x3d8>
 800d96c:	2502      	movs	r5, #2
 800d96e:	e7f2      	b.n	800d956 <_dtoa_r+0x36e>
 800d970:	07f9      	lsls	r1, r7, #31
 800d972:	d508      	bpl.n	800d986 <_dtoa_r+0x39e>
 800d974:	ec51 0b18 	vmov	r0, r1, d8
 800d978:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d97c:	f7f2 fe3c 	bl	80005f8 <__aeabi_dmul>
 800d980:	ec41 0b18 	vmov	d8, r0, r1
 800d984:	3501      	adds	r5, #1
 800d986:	107f      	asrs	r7, r7, #1
 800d988:	3608      	adds	r6, #8
 800d98a:	e7e5      	b.n	800d958 <_dtoa_r+0x370>
 800d98c:	f000 80a6 	beq.w	800dadc <_dtoa_r+0x4f4>
 800d990:	f1ca 0600 	rsb	r6, sl, #0
 800d994:	4ba5      	ldr	r3, [pc, #660]	; (800dc2c <_dtoa_r+0x644>)
 800d996:	4fa6      	ldr	r7, [pc, #664]	; (800dc30 <_dtoa_r+0x648>)
 800d998:	f006 020f 	and.w	r2, r6, #15
 800d99c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9a8:	f7f2 fe26 	bl	80005f8 <__aeabi_dmul>
 800d9ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9b0:	1136      	asrs	r6, r6, #4
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	2502      	movs	r5, #2
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	f040 8085 	bne.w	800dac6 <_dtoa_r+0x4de>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d1d2      	bne.n	800d966 <_dtoa_r+0x37e>
 800d9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 808c 	beq.w	800dae0 <_dtoa_r+0x4f8>
 800d9c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d9cc:	4b99      	ldr	r3, [pc, #612]	; (800dc34 <_dtoa_r+0x64c>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	4639      	mov	r1, r7
 800d9d4:	f7f3 f882 	bl	8000adc <__aeabi_dcmplt>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f000 8081 	beq.w	800dae0 <_dtoa_r+0x4f8>
 800d9de:	9b01      	ldr	r3, [sp, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d07d      	beq.n	800dae0 <_dtoa_r+0x4f8>
 800d9e4:	f1b9 0f00 	cmp.w	r9, #0
 800d9e8:	dd3c      	ble.n	800da64 <_dtoa_r+0x47c>
 800d9ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4b91      	ldr	r3, [pc, #580]	; (800dc38 <_dtoa_r+0x650>)
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f2 fdfe 	bl	80005f8 <__aeabi_dmul>
 800d9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da00:	3501      	adds	r5, #1
 800da02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800da06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7f2 fd8a 	bl	8000524 <__aeabi_i2d>
 800da10:	4632      	mov	r2, r6
 800da12:	463b      	mov	r3, r7
 800da14:	f7f2 fdf0 	bl	80005f8 <__aeabi_dmul>
 800da18:	4b88      	ldr	r3, [pc, #544]	; (800dc3c <_dtoa_r+0x654>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	f7f2 fc36 	bl	800028c <__adddf3>
 800da20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da28:	9303      	str	r3, [sp, #12]
 800da2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d15c      	bne.n	800daea <_dtoa_r+0x502>
 800da30:	4b83      	ldr	r3, [pc, #524]	; (800dc40 <_dtoa_r+0x658>)
 800da32:	2200      	movs	r2, #0
 800da34:	4630      	mov	r0, r6
 800da36:	4639      	mov	r1, r7
 800da38:	f7f2 fc26 	bl	8000288 <__aeabi_dsub>
 800da3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da40:	4606      	mov	r6, r0
 800da42:	460f      	mov	r7, r1
 800da44:	f7f3 f868 	bl	8000b18 <__aeabi_dcmpgt>
 800da48:	2800      	cmp	r0, #0
 800da4a:	f040 8296 	bne.w	800df7a <_dtoa_r+0x992>
 800da4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da52:	4630      	mov	r0, r6
 800da54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f3 f83f 	bl	8000adc <__aeabi_dcmplt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	f040 8288 	bne.w	800df74 <_dtoa_r+0x98c>
 800da64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f2c0 8158 	blt.w	800dd24 <_dtoa_r+0x73c>
 800da74:	f1ba 0f0e 	cmp.w	sl, #14
 800da78:	f300 8154 	bgt.w	800dd24 <_dtoa_r+0x73c>
 800da7c:	4b6b      	ldr	r3, [pc, #428]	; (800dc2c <_dtoa_r+0x644>)
 800da7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da82:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f280 80e3 	bge.w	800dc54 <_dtoa_r+0x66c>
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f300 80df 	bgt.w	800dc54 <_dtoa_r+0x66c>
 800da96:	f040 826d 	bne.w	800df74 <_dtoa_r+0x98c>
 800da9a:	4b69      	ldr	r3, [pc, #420]	; (800dc40 <_dtoa_r+0x658>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	4640      	mov	r0, r8
 800daa0:	4649      	mov	r1, r9
 800daa2:	f7f2 fda9 	bl	80005f8 <__aeabi_dmul>
 800daa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daaa:	f7f3 f82b 	bl	8000b04 <__aeabi_dcmpge>
 800daae:	9e01      	ldr	r6, [sp, #4]
 800dab0:	4637      	mov	r7, r6
 800dab2:	2800      	cmp	r0, #0
 800dab4:	f040 8243 	bne.w	800df3e <_dtoa_r+0x956>
 800dab8:	9d00      	ldr	r5, [sp, #0]
 800daba:	2331      	movs	r3, #49	; 0x31
 800dabc:	f805 3b01 	strb.w	r3, [r5], #1
 800dac0:	f10a 0a01 	add.w	sl, sl, #1
 800dac4:	e23f      	b.n	800df46 <_dtoa_r+0x95e>
 800dac6:	07f2      	lsls	r2, r6, #31
 800dac8:	d505      	bpl.n	800dad6 <_dtoa_r+0x4ee>
 800daca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dace:	f7f2 fd93 	bl	80005f8 <__aeabi_dmul>
 800dad2:	3501      	adds	r5, #1
 800dad4:	2301      	movs	r3, #1
 800dad6:	1076      	asrs	r6, r6, #1
 800dad8:	3708      	adds	r7, #8
 800dada:	e76c      	b.n	800d9b6 <_dtoa_r+0x3ce>
 800dadc:	2502      	movs	r5, #2
 800dade:	e76f      	b.n	800d9c0 <_dtoa_r+0x3d8>
 800dae0:	9b01      	ldr	r3, [sp, #4]
 800dae2:	f8cd a01c 	str.w	sl, [sp, #28]
 800dae6:	930c      	str	r3, [sp, #48]	; 0x30
 800dae8:	e78d      	b.n	800da06 <_dtoa_r+0x41e>
 800daea:	9900      	ldr	r1, [sp, #0]
 800daec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800daee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf0:	4b4e      	ldr	r3, [pc, #312]	; (800dc2c <_dtoa_r+0x644>)
 800daf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daf6:	4401      	add	r1, r0
 800daf8:	9102      	str	r1, [sp, #8]
 800dafa:	9908      	ldr	r1, [sp, #32]
 800dafc:	eeb0 8a47 	vmov.f32	s16, s14
 800db00:	eef0 8a67 	vmov.f32	s17, s15
 800db04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db0c:	2900      	cmp	r1, #0
 800db0e:	d045      	beq.n	800db9c <_dtoa_r+0x5b4>
 800db10:	494c      	ldr	r1, [pc, #304]	; (800dc44 <_dtoa_r+0x65c>)
 800db12:	2000      	movs	r0, #0
 800db14:	f7f2 fe9a 	bl	800084c <__aeabi_ddiv>
 800db18:	ec53 2b18 	vmov	r2, r3, d8
 800db1c:	f7f2 fbb4 	bl	8000288 <__aeabi_dsub>
 800db20:	9d00      	ldr	r5, [sp, #0]
 800db22:	ec41 0b18 	vmov	d8, r0, r1
 800db26:	4639      	mov	r1, r7
 800db28:	4630      	mov	r0, r6
 800db2a:	f7f3 f815 	bl	8000b58 <__aeabi_d2iz>
 800db2e:	900c      	str	r0, [sp, #48]	; 0x30
 800db30:	f7f2 fcf8 	bl	8000524 <__aeabi_i2d>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	4630      	mov	r0, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	f7f2 fba4 	bl	8000288 <__aeabi_dsub>
 800db40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db42:	3330      	adds	r3, #48	; 0x30
 800db44:	f805 3b01 	strb.w	r3, [r5], #1
 800db48:	ec53 2b18 	vmov	r2, r3, d8
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	f7f2 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800db54:	2800      	cmp	r0, #0
 800db56:	d165      	bne.n	800dc24 <_dtoa_r+0x63c>
 800db58:	4632      	mov	r2, r6
 800db5a:	463b      	mov	r3, r7
 800db5c:	4935      	ldr	r1, [pc, #212]	; (800dc34 <_dtoa_r+0x64c>)
 800db5e:	2000      	movs	r0, #0
 800db60:	f7f2 fb92 	bl	8000288 <__aeabi_dsub>
 800db64:	ec53 2b18 	vmov	r2, r3, d8
 800db68:	f7f2 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	f040 80b9 	bne.w	800dce4 <_dtoa_r+0x6fc>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	429d      	cmp	r5, r3
 800db76:	f43f af75 	beq.w	800da64 <_dtoa_r+0x47c>
 800db7a:	4b2f      	ldr	r3, [pc, #188]	; (800dc38 <_dtoa_r+0x650>)
 800db7c:	ec51 0b18 	vmov	r0, r1, d8
 800db80:	2200      	movs	r2, #0
 800db82:	f7f2 fd39 	bl	80005f8 <__aeabi_dmul>
 800db86:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <_dtoa_r+0x650>)
 800db88:	ec41 0b18 	vmov	d8, r0, r1
 800db8c:	2200      	movs	r2, #0
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 fd31 	bl	80005f8 <__aeabi_dmul>
 800db96:	4606      	mov	r6, r0
 800db98:	460f      	mov	r7, r1
 800db9a:	e7c4      	b.n	800db26 <_dtoa_r+0x53e>
 800db9c:	ec51 0b17 	vmov	r0, r1, d7
 800dba0:	f7f2 fd2a 	bl	80005f8 <__aeabi_dmul>
 800dba4:	9b02      	ldr	r3, [sp, #8]
 800dba6:	9d00      	ldr	r5, [sp, #0]
 800dba8:	930c      	str	r3, [sp, #48]	; 0x30
 800dbaa:	ec41 0b18 	vmov	d8, r0, r1
 800dbae:	4639      	mov	r1, r7
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f7f2 ffd1 	bl	8000b58 <__aeabi_d2iz>
 800dbb6:	9011      	str	r0, [sp, #68]	; 0x44
 800dbb8:	f7f2 fcb4 	bl	8000524 <__aeabi_i2d>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	f7f2 fb60 	bl	8000288 <__aeabi_dsub>
 800dbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbca:	3330      	adds	r3, #48	; 0x30
 800dbcc:	f805 3b01 	strb.w	r3, [r5], #1
 800dbd0:	9b02      	ldr	r3, [sp, #8]
 800dbd2:	429d      	cmp	r5, r3
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	460f      	mov	r7, r1
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	d134      	bne.n	800dc48 <_dtoa_r+0x660>
 800dbde:	4b19      	ldr	r3, [pc, #100]	; (800dc44 <_dtoa_r+0x65c>)
 800dbe0:	ec51 0b18 	vmov	r0, r1, d8
 800dbe4:	f7f2 fb52 	bl	800028c <__adddf3>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4630      	mov	r0, r6
 800dbee:	4639      	mov	r1, r7
 800dbf0:	f7f2 ff92 	bl	8000b18 <__aeabi_dcmpgt>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d175      	bne.n	800dce4 <_dtoa_r+0x6fc>
 800dbf8:	ec53 2b18 	vmov	r2, r3, d8
 800dbfc:	4911      	ldr	r1, [pc, #68]	; (800dc44 <_dtoa_r+0x65c>)
 800dbfe:	2000      	movs	r0, #0
 800dc00:	f7f2 fb42 	bl	8000288 <__aeabi_dsub>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f7f2 ff66 	bl	8000adc <__aeabi_dcmplt>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	f43f af27 	beq.w	800da64 <_dtoa_r+0x47c>
 800dc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc18:	1e6b      	subs	r3, r5, #1
 800dc1a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc20:	2b30      	cmp	r3, #48	; 0x30
 800dc22:	d0f8      	beq.n	800dc16 <_dtoa_r+0x62e>
 800dc24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dc28:	e04a      	b.n	800dcc0 <_dtoa_r+0x6d8>
 800dc2a:	bf00      	nop
 800dc2c:	080103d0 	.word	0x080103d0
 800dc30:	080103a8 	.word	0x080103a8
 800dc34:	3ff00000 	.word	0x3ff00000
 800dc38:	40240000 	.word	0x40240000
 800dc3c:	401c0000 	.word	0x401c0000
 800dc40:	40140000 	.word	0x40140000
 800dc44:	3fe00000 	.word	0x3fe00000
 800dc48:	4baf      	ldr	r3, [pc, #700]	; (800df08 <_dtoa_r+0x920>)
 800dc4a:	f7f2 fcd5 	bl	80005f8 <__aeabi_dmul>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	460f      	mov	r7, r1
 800dc52:	e7ac      	b.n	800dbae <_dtoa_r+0x5c6>
 800dc54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc58:	9d00      	ldr	r5, [sp, #0]
 800dc5a:	4642      	mov	r2, r8
 800dc5c:	464b      	mov	r3, r9
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fdf3 	bl	800084c <__aeabi_ddiv>
 800dc66:	f7f2 ff77 	bl	8000b58 <__aeabi_d2iz>
 800dc6a:	9002      	str	r0, [sp, #8]
 800dc6c:	f7f2 fc5a 	bl	8000524 <__aeabi_i2d>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	f7f2 fcc0 	bl	80005f8 <__aeabi_dmul>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 fb02 	bl	8000288 <__aeabi_dsub>
 800dc84:	9e02      	ldr	r6, [sp, #8]
 800dc86:	9f01      	ldr	r7, [sp, #4]
 800dc88:	3630      	adds	r6, #48	; 0x30
 800dc8a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc8e:	9e00      	ldr	r6, [sp, #0]
 800dc90:	1bae      	subs	r6, r5, r6
 800dc92:	42b7      	cmp	r7, r6
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	d137      	bne.n	800dd0a <_dtoa_r+0x722>
 800dc9a:	f7f2 faf7 	bl	800028c <__adddf3>
 800dc9e:	4642      	mov	r2, r8
 800dca0:	464b      	mov	r3, r9
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	f7f2 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 800dcaa:	b9c8      	cbnz	r0, 800dce0 <_dtoa_r+0x6f8>
 800dcac:	4642      	mov	r2, r8
 800dcae:	464b      	mov	r3, r9
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb8:	b110      	cbz	r0, 800dcc0 <_dtoa_r+0x6d8>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	07d9      	lsls	r1, r3, #31
 800dcbe:	d40f      	bmi.n	800dce0 <_dtoa_r+0x6f8>
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4659      	mov	r1, fp
 800dcc4:	f000 fc0c 	bl	800e4e0 <_Bfree>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	702b      	strb	r3, [r5, #0]
 800dccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcce:	f10a 0001 	add.w	r0, sl, #1
 800dcd2:	6018      	str	r0, [r3, #0]
 800dcd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f43f acd8 	beq.w	800d68c <_dtoa_r+0xa4>
 800dcdc:	601d      	str	r5, [r3, #0]
 800dcde:	e4d5      	b.n	800d68c <_dtoa_r+0xa4>
 800dce0:	f8cd a01c 	str.w	sl, [sp, #28]
 800dce4:	462b      	mov	r3, r5
 800dce6:	461d      	mov	r5, r3
 800dce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcec:	2a39      	cmp	r2, #57	; 0x39
 800dcee:	d108      	bne.n	800dd02 <_dtoa_r+0x71a>
 800dcf0:	9a00      	ldr	r2, [sp, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d1f7      	bne.n	800dce6 <_dtoa_r+0x6fe>
 800dcf6:	9a07      	ldr	r2, [sp, #28]
 800dcf8:	9900      	ldr	r1, [sp, #0]
 800dcfa:	3201      	adds	r2, #1
 800dcfc:	9207      	str	r2, [sp, #28]
 800dcfe:	2230      	movs	r2, #48	; 0x30
 800dd00:	700a      	strb	r2, [r1, #0]
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	3201      	adds	r2, #1
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	e78c      	b.n	800dc24 <_dtoa_r+0x63c>
 800dd0a:	4b7f      	ldr	r3, [pc, #508]	; (800df08 <_dtoa_r+0x920>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f7f2 fc73 	bl	80005f8 <__aeabi_dmul>
 800dd12:	2200      	movs	r2, #0
 800dd14:	2300      	movs	r3, #0
 800dd16:	4606      	mov	r6, r0
 800dd18:	460f      	mov	r7, r1
 800dd1a:	f7f2 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d09b      	beq.n	800dc5a <_dtoa_r+0x672>
 800dd22:	e7cd      	b.n	800dcc0 <_dtoa_r+0x6d8>
 800dd24:	9a08      	ldr	r2, [sp, #32]
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	f000 80c4 	beq.w	800deb4 <_dtoa_r+0x8cc>
 800dd2c:	9a05      	ldr	r2, [sp, #20]
 800dd2e:	2a01      	cmp	r2, #1
 800dd30:	f300 80a8 	bgt.w	800de84 <_dtoa_r+0x89c>
 800dd34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	f000 80a0 	beq.w	800de7c <_dtoa_r+0x894>
 800dd3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd40:	9e06      	ldr	r6, [sp, #24]
 800dd42:	4645      	mov	r5, r8
 800dd44:	9a04      	ldr	r2, [sp, #16]
 800dd46:	2101      	movs	r1, #1
 800dd48:	441a      	add	r2, r3
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	4498      	add	r8, r3
 800dd4e:	9204      	str	r2, [sp, #16]
 800dd50:	f000 fc82 	bl	800e658 <__i2b>
 800dd54:	4607      	mov	r7, r0
 800dd56:	2d00      	cmp	r5, #0
 800dd58:	dd0b      	ble.n	800dd72 <_dtoa_r+0x78a>
 800dd5a:	9b04      	ldr	r3, [sp, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dd08      	ble.n	800dd72 <_dtoa_r+0x78a>
 800dd60:	42ab      	cmp	r3, r5
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	bfa8      	it	ge
 800dd66:	462b      	movge	r3, r5
 800dd68:	eba8 0803 	sub.w	r8, r8, r3
 800dd6c:	1aed      	subs	r5, r5, r3
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	9b06      	ldr	r3, [sp, #24]
 800dd74:	b1fb      	cbz	r3, 800ddb6 <_dtoa_r+0x7ce>
 800dd76:	9b08      	ldr	r3, [sp, #32]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 809f 	beq.w	800debc <_dtoa_r+0x8d4>
 800dd7e:	2e00      	cmp	r6, #0
 800dd80:	dd11      	ble.n	800dda6 <_dtoa_r+0x7be>
 800dd82:	4639      	mov	r1, r7
 800dd84:	4632      	mov	r2, r6
 800dd86:	4620      	mov	r0, r4
 800dd88:	f000 fd22 	bl	800e7d0 <__pow5mult>
 800dd8c:	465a      	mov	r2, fp
 800dd8e:	4601      	mov	r1, r0
 800dd90:	4607      	mov	r7, r0
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 fc76 	bl	800e684 <__multiply>
 800dd98:	4659      	mov	r1, fp
 800dd9a:	9007      	str	r0, [sp, #28]
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 fb9f 	bl	800e4e0 <_Bfree>
 800dda2:	9b07      	ldr	r3, [sp, #28]
 800dda4:	469b      	mov	fp, r3
 800dda6:	9b06      	ldr	r3, [sp, #24]
 800dda8:	1b9a      	subs	r2, r3, r6
 800ddaa:	d004      	beq.n	800ddb6 <_dtoa_r+0x7ce>
 800ddac:	4659      	mov	r1, fp
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fd0e 	bl	800e7d0 <__pow5mult>
 800ddb4:	4683      	mov	fp, r0
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fc4d 	bl	800e658 <__i2b>
 800ddbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	dd7c      	ble.n	800dec0 <_dtoa_r+0x8d8>
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4601      	mov	r1, r0
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fd00 	bl	800e7d0 <__pow5mult>
 800ddd0:	9b05      	ldr	r3, [sp, #20]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	dd76      	ble.n	800dec6 <_dtoa_r+0x8de>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	9306      	str	r3, [sp, #24]
 800dddc:	6933      	ldr	r3, [r6, #16]
 800ddde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dde2:	6918      	ldr	r0, [r3, #16]
 800dde4:	f000 fbe8 	bl	800e5b8 <__hi0bits>
 800dde8:	f1c0 0020 	rsb	r0, r0, #32
 800ddec:	9b04      	ldr	r3, [sp, #16]
 800ddee:	4418      	add	r0, r3
 800ddf0:	f010 001f 	ands.w	r0, r0, #31
 800ddf4:	f000 8086 	beq.w	800df04 <_dtoa_r+0x91c>
 800ddf8:	f1c0 0320 	rsb	r3, r0, #32
 800ddfc:	2b04      	cmp	r3, #4
 800ddfe:	dd7f      	ble.n	800df00 <_dtoa_r+0x918>
 800de00:	f1c0 001c 	rsb	r0, r0, #28
 800de04:	9b04      	ldr	r3, [sp, #16]
 800de06:	4403      	add	r3, r0
 800de08:	4480      	add	r8, r0
 800de0a:	4405      	add	r5, r0
 800de0c:	9304      	str	r3, [sp, #16]
 800de0e:	f1b8 0f00 	cmp.w	r8, #0
 800de12:	dd05      	ble.n	800de20 <_dtoa_r+0x838>
 800de14:	4659      	mov	r1, fp
 800de16:	4642      	mov	r2, r8
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fd33 	bl	800e884 <__lshift>
 800de1e:	4683      	mov	fp, r0
 800de20:	9b04      	ldr	r3, [sp, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd05      	ble.n	800de32 <_dtoa_r+0x84a>
 800de26:	4631      	mov	r1, r6
 800de28:	461a      	mov	r2, r3
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 fd2a 	bl	800e884 <__lshift>
 800de30:	4606      	mov	r6, r0
 800de32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de34:	2b00      	cmp	r3, #0
 800de36:	d069      	beq.n	800df0c <_dtoa_r+0x924>
 800de38:	4631      	mov	r1, r6
 800de3a:	4658      	mov	r0, fp
 800de3c:	f000 fd8e 	bl	800e95c <__mcmp>
 800de40:	2800      	cmp	r0, #0
 800de42:	da63      	bge.n	800df0c <_dtoa_r+0x924>
 800de44:	2300      	movs	r3, #0
 800de46:	4659      	mov	r1, fp
 800de48:	220a      	movs	r2, #10
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 fb6a 	bl	800e524 <__multadd>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de56:	4683      	mov	fp, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 818f 	beq.w	800e17c <_dtoa_r+0xb94>
 800de5e:	4639      	mov	r1, r7
 800de60:	2300      	movs	r3, #0
 800de62:	220a      	movs	r2, #10
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fb5d 	bl	800e524 <__multadd>
 800de6a:	f1b9 0f00 	cmp.w	r9, #0
 800de6e:	4607      	mov	r7, r0
 800de70:	f300 808e 	bgt.w	800df90 <_dtoa_r+0x9a8>
 800de74:	9b05      	ldr	r3, [sp, #20]
 800de76:	2b02      	cmp	r3, #2
 800de78:	dc50      	bgt.n	800df1c <_dtoa_r+0x934>
 800de7a:	e089      	b.n	800df90 <_dtoa_r+0x9a8>
 800de7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de82:	e75d      	b.n	800dd40 <_dtoa_r+0x758>
 800de84:	9b01      	ldr	r3, [sp, #4]
 800de86:	1e5e      	subs	r6, r3, #1
 800de88:	9b06      	ldr	r3, [sp, #24]
 800de8a:	42b3      	cmp	r3, r6
 800de8c:	bfbf      	itttt	lt
 800de8e:	9b06      	ldrlt	r3, [sp, #24]
 800de90:	9606      	strlt	r6, [sp, #24]
 800de92:	1af2      	sublt	r2, r6, r3
 800de94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800de96:	bfb6      	itet	lt
 800de98:	189b      	addlt	r3, r3, r2
 800de9a:	1b9e      	subge	r6, r3, r6
 800de9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	bfb8      	it	lt
 800dea2:	2600      	movlt	r6, #0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bfb5      	itete	lt
 800dea8:	eba8 0503 	sublt.w	r5, r8, r3
 800deac:	9b01      	ldrge	r3, [sp, #4]
 800deae:	2300      	movlt	r3, #0
 800deb0:	4645      	movge	r5, r8
 800deb2:	e747      	b.n	800dd44 <_dtoa_r+0x75c>
 800deb4:	9e06      	ldr	r6, [sp, #24]
 800deb6:	9f08      	ldr	r7, [sp, #32]
 800deb8:	4645      	mov	r5, r8
 800deba:	e74c      	b.n	800dd56 <_dtoa_r+0x76e>
 800debc:	9a06      	ldr	r2, [sp, #24]
 800debe:	e775      	b.n	800ddac <_dtoa_r+0x7c4>
 800dec0:	9b05      	ldr	r3, [sp, #20]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	dc18      	bgt.n	800def8 <_dtoa_r+0x910>
 800dec6:	9b02      	ldr	r3, [sp, #8]
 800dec8:	b9b3      	cbnz	r3, 800def8 <_dtoa_r+0x910>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ded0:	b9a3      	cbnz	r3, 800defc <_dtoa_r+0x914>
 800ded2:	9b03      	ldr	r3, [sp, #12]
 800ded4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ded8:	0d1b      	lsrs	r3, r3, #20
 800deda:	051b      	lsls	r3, r3, #20
 800dedc:	b12b      	cbz	r3, 800deea <_dtoa_r+0x902>
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	3301      	adds	r3, #1
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	f108 0801 	add.w	r8, r8, #1
 800dee8:	2301      	movs	r3, #1
 800deea:	9306      	str	r3, [sp, #24]
 800deec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deee:	2b00      	cmp	r3, #0
 800def0:	f47f af74 	bne.w	800dddc <_dtoa_r+0x7f4>
 800def4:	2001      	movs	r0, #1
 800def6:	e779      	b.n	800ddec <_dtoa_r+0x804>
 800def8:	2300      	movs	r3, #0
 800defa:	e7f6      	b.n	800deea <_dtoa_r+0x902>
 800defc:	9b02      	ldr	r3, [sp, #8]
 800defe:	e7f4      	b.n	800deea <_dtoa_r+0x902>
 800df00:	d085      	beq.n	800de0e <_dtoa_r+0x826>
 800df02:	4618      	mov	r0, r3
 800df04:	301c      	adds	r0, #28
 800df06:	e77d      	b.n	800de04 <_dtoa_r+0x81c>
 800df08:	40240000 	.word	0x40240000
 800df0c:	9b01      	ldr	r3, [sp, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dc38      	bgt.n	800df84 <_dtoa_r+0x99c>
 800df12:	9b05      	ldr	r3, [sp, #20]
 800df14:	2b02      	cmp	r3, #2
 800df16:	dd35      	ble.n	800df84 <_dtoa_r+0x99c>
 800df18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800df1c:	f1b9 0f00 	cmp.w	r9, #0
 800df20:	d10d      	bne.n	800df3e <_dtoa_r+0x956>
 800df22:	4631      	mov	r1, r6
 800df24:	464b      	mov	r3, r9
 800df26:	2205      	movs	r2, #5
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 fafb 	bl	800e524 <__multadd>
 800df2e:	4601      	mov	r1, r0
 800df30:	4606      	mov	r6, r0
 800df32:	4658      	mov	r0, fp
 800df34:	f000 fd12 	bl	800e95c <__mcmp>
 800df38:	2800      	cmp	r0, #0
 800df3a:	f73f adbd 	bgt.w	800dab8 <_dtoa_r+0x4d0>
 800df3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df40:	9d00      	ldr	r5, [sp, #0]
 800df42:	ea6f 0a03 	mvn.w	sl, r3
 800df46:	f04f 0800 	mov.w	r8, #0
 800df4a:	4631      	mov	r1, r6
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 fac7 	bl	800e4e0 <_Bfree>
 800df52:	2f00      	cmp	r7, #0
 800df54:	f43f aeb4 	beq.w	800dcc0 <_dtoa_r+0x6d8>
 800df58:	f1b8 0f00 	cmp.w	r8, #0
 800df5c:	d005      	beq.n	800df6a <_dtoa_r+0x982>
 800df5e:	45b8      	cmp	r8, r7
 800df60:	d003      	beq.n	800df6a <_dtoa_r+0x982>
 800df62:	4641      	mov	r1, r8
 800df64:	4620      	mov	r0, r4
 800df66:	f000 fabb 	bl	800e4e0 <_Bfree>
 800df6a:	4639      	mov	r1, r7
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 fab7 	bl	800e4e0 <_Bfree>
 800df72:	e6a5      	b.n	800dcc0 <_dtoa_r+0x6d8>
 800df74:	2600      	movs	r6, #0
 800df76:	4637      	mov	r7, r6
 800df78:	e7e1      	b.n	800df3e <_dtoa_r+0x956>
 800df7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800df7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800df80:	4637      	mov	r7, r6
 800df82:	e599      	b.n	800dab8 <_dtoa_r+0x4d0>
 800df84:	9b08      	ldr	r3, [sp, #32]
 800df86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 80fd 	beq.w	800e18a <_dtoa_r+0xba2>
 800df90:	2d00      	cmp	r5, #0
 800df92:	dd05      	ble.n	800dfa0 <_dtoa_r+0x9b8>
 800df94:	4639      	mov	r1, r7
 800df96:	462a      	mov	r2, r5
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 fc73 	bl	800e884 <__lshift>
 800df9e:	4607      	mov	r7, r0
 800dfa0:	9b06      	ldr	r3, [sp, #24]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d05c      	beq.n	800e060 <_dtoa_r+0xa78>
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fa59 	bl	800e460 <_Balloc>
 800dfae:	4605      	mov	r5, r0
 800dfb0:	b928      	cbnz	r0, 800dfbe <_dtoa_r+0x9d6>
 800dfb2:	4b80      	ldr	r3, [pc, #512]	; (800e1b4 <_dtoa_r+0xbcc>)
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfba:	f7ff bb2e 	b.w	800d61a <_dtoa_r+0x32>
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	3202      	adds	r2, #2
 800dfc2:	0092      	lsls	r2, r2, #2
 800dfc4:	f107 010c 	add.w	r1, r7, #12
 800dfc8:	300c      	adds	r0, #12
 800dfca:	f7fe fa02 	bl	800c3d2 <memcpy>
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f000 fc56 	bl	800e884 <__lshift>
 800dfd8:	9b00      	ldr	r3, [sp, #0]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	9301      	str	r3, [sp, #4]
 800dfde:	9b00      	ldr	r3, [sp, #0]
 800dfe0:	444b      	add	r3, r9
 800dfe2:	9307      	str	r3, [sp, #28]
 800dfe4:	9b02      	ldr	r3, [sp, #8]
 800dfe6:	f003 0301 	and.w	r3, r3, #1
 800dfea:	46b8      	mov	r8, r7
 800dfec:	9306      	str	r3, [sp, #24]
 800dfee:	4607      	mov	r7, r0
 800dff0:	9b01      	ldr	r3, [sp, #4]
 800dff2:	4631      	mov	r1, r6
 800dff4:	3b01      	subs	r3, #1
 800dff6:	4658      	mov	r0, fp
 800dff8:	9302      	str	r3, [sp, #8]
 800dffa:	f7ff fa67 	bl	800d4cc <quorem>
 800dffe:	4603      	mov	r3, r0
 800e000:	3330      	adds	r3, #48	; 0x30
 800e002:	9004      	str	r0, [sp, #16]
 800e004:	4641      	mov	r1, r8
 800e006:	4658      	mov	r0, fp
 800e008:	9308      	str	r3, [sp, #32]
 800e00a:	f000 fca7 	bl	800e95c <__mcmp>
 800e00e:	463a      	mov	r2, r7
 800e010:	4681      	mov	r9, r0
 800e012:	4631      	mov	r1, r6
 800e014:	4620      	mov	r0, r4
 800e016:	f000 fcbd 	bl	800e994 <__mdiff>
 800e01a:	68c2      	ldr	r2, [r0, #12]
 800e01c:	9b08      	ldr	r3, [sp, #32]
 800e01e:	4605      	mov	r5, r0
 800e020:	bb02      	cbnz	r2, 800e064 <_dtoa_r+0xa7c>
 800e022:	4601      	mov	r1, r0
 800e024:	4658      	mov	r0, fp
 800e026:	f000 fc99 	bl	800e95c <__mcmp>
 800e02a:	9b08      	ldr	r3, [sp, #32]
 800e02c:	4602      	mov	r2, r0
 800e02e:	4629      	mov	r1, r5
 800e030:	4620      	mov	r0, r4
 800e032:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e036:	f000 fa53 	bl	800e4e0 <_Bfree>
 800e03a:	9b05      	ldr	r3, [sp, #20]
 800e03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e03e:	9d01      	ldr	r5, [sp, #4]
 800e040:	ea43 0102 	orr.w	r1, r3, r2
 800e044:	9b06      	ldr	r3, [sp, #24]
 800e046:	430b      	orrs	r3, r1
 800e048:	9b08      	ldr	r3, [sp, #32]
 800e04a:	d10d      	bne.n	800e068 <_dtoa_r+0xa80>
 800e04c:	2b39      	cmp	r3, #57	; 0x39
 800e04e:	d029      	beq.n	800e0a4 <_dtoa_r+0xabc>
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	dd01      	ble.n	800e05a <_dtoa_r+0xa72>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	3331      	adds	r3, #49	; 0x31
 800e05a:	9a02      	ldr	r2, [sp, #8]
 800e05c:	7013      	strb	r3, [r2, #0]
 800e05e:	e774      	b.n	800df4a <_dtoa_r+0x962>
 800e060:	4638      	mov	r0, r7
 800e062:	e7b9      	b.n	800dfd8 <_dtoa_r+0x9f0>
 800e064:	2201      	movs	r2, #1
 800e066:	e7e2      	b.n	800e02e <_dtoa_r+0xa46>
 800e068:	f1b9 0f00 	cmp.w	r9, #0
 800e06c:	db06      	blt.n	800e07c <_dtoa_r+0xa94>
 800e06e:	9905      	ldr	r1, [sp, #20]
 800e070:	ea41 0909 	orr.w	r9, r1, r9
 800e074:	9906      	ldr	r1, [sp, #24]
 800e076:	ea59 0101 	orrs.w	r1, r9, r1
 800e07a:	d120      	bne.n	800e0be <_dtoa_r+0xad6>
 800e07c:	2a00      	cmp	r2, #0
 800e07e:	ddec      	ble.n	800e05a <_dtoa_r+0xa72>
 800e080:	4659      	mov	r1, fp
 800e082:	2201      	movs	r2, #1
 800e084:	4620      	mov	r0, r4
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	f000 fbfc 	bl	800e884 <__lshift>
 800e08c:	4631      	mov	r1, r6
 800e08e:	4683      	mov	fp, r0
 800e090:	f000 fc64 	bl	800e95c <__mcmp>
 800e094:	2800      	cmp	r0, #0
 800e096:	9b01      	ldr	r3, [sp, #4]
 800e098:	dc02      	bgt.n	800e0a0 <_dtoa_r+0xab8>
 800e09a:	d1de      	bne.n	800e05a <_dtoa_r+0xa72>
 800e09c:	07da      	lsls	r2, r3, #31
 800e09e:	d5dc      	bpl.n	800e05a <_dtoa_r+0xa72>
 800e0a0:	2b39      	cmp	r3, #57	; 0x39
 800e0a2:	d1d8      	bne.n	800e056 <_dtoa_r+0xa6e>
 800e0a4:	9a02      	ldr	r2, [sp, #8]
 800e0a6:	2339      	movs	r3, #57	; 0x39
 800e0a8:	7013      	strb	r3, [r2, #0]
 800e0aa:	462b      	mov	r3, r5
 800e0ac:	461d      	mov	r5, r3
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0b4:	2a39      	cmp	r2, #57	; 0x39
 800e0b6:	d050      	beq.n	800e15a <_dtoa_r+0xb72>
 800e0b8:	3201      	adds	r2, #1
 800e0ba:	701a      	strb	r2, [r3, #0]
 800e0bc:	e745      	b.n	800df4a <_dtoa_r+0x962>
 800e0be:	2a00      	cmp	r2, #0
 800e0c0:	dd03      	ble.n	800e0ca <_dtoa_r+0xae2>
 800e0c2:	2b39      	cmp	r3, #57	; 0x39
 800e0c4:	d0ee      	beq.n	800e0a4 <_dtoa_r+0xabc>
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	e7c7      	b.n	800e05a <_dtoa_r+0xa72>
 800e0ca:	9a01      	ldr	r2, [sp, #4]
 800e0cc:	9907      	ldr	r1, [sp, #28]
 800e0ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e0d2:	428a      	cmp	r2, r1
 800e0d4:	d02a      	beq.n	800e12c <_dtoa_r+0xb44>
 800e0d6:	4659      	mov	r1, fp
 800e0d8:	2300      	movs	r3, #0
 800e0da:	220a      	movs	r2, #10
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f000 fa21 	bl	800e524 <__multadd>
 800e0e2:	45b8      	cmp	r8, r7
 800e0e4:	4683      	mov	fp, r0
 800e0e6:	f04f 0300 	mov.w	r3, #0
 800e0ea:	f04f 020a 	mov.w	r2, #10
 800e0ee:	4641      	mov	r1, r8
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	d107      	bne.n	800e104 <_dtoa_r+0xb1c>
 800e0f4:	f000 fa16 	bl	800e524 <__multadd>
 800e0f8:	4680      	mov	r8, r0
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	9b01      	ldr	r3, [sp, #4]
 800e0fe:	3301      	adds	r3, #1
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	e775      	b.n	800dff0 <_dtoa_r+0xa08>
 800e104:	f000 fa0e 	bl	800e524 <__multadd>
 800e108:	4639      	mov	r1, r7
 800e10a:	4680      	mov	r8, r0
 800e10c:	2300      	movs	r3, #0
 800e10e:	220a      	movs	r2, #10
 800e110:	4620      	mov	r0, r4
 800e112:	f000 fa07 	bl	800e524 <__multadd>
 800e116:	4607      	mov	r7, r0
 800e118:	e7f0      	b.n	800e0fc <_dtoa_r+0xb14>
 800e11a:	f1b9 0f00 	cmp.w	r9, #0
 800e11e:	9a00      	ldr	r2, [sp, #0]
 800e120:	bfcc      	ite	gt
 800e122:	464d      	movgt	r5, r9
 800e124:	2501      	movle	r5, #1
 800e126:	4415      	add	r5, r2
 800e128:	f04f 0800 	mov.w	r8, #0
 800e12c:	4659      	mov	r1, fp
 800e12e:	2201      	movs	r2, #1
 800e130:	4620      	mov	r0, r4
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	f000 fba6 	bl	800e884 <__lshift>
 800e138:	4631      	mov	r1, r6
 800e13a:	4683      	mov	fp, r0
 800e13c:	f000 fc0e 	bl	800e95c <__mcmp>
 800e140:	2800      	cmp	r0, #0
 800e142:	dcb2      	bgt.n	800e0aa <_dtoa_r+0xac2>
 800e144:	d102      	bne.n	800e14c <_dtoa_r+0xb64>
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	07db      	lsls	r3, r3, #31
 800e14a:	d4ae      	bmi.n	800e0aa <_dtoa_r+0xac2>
 800e14c:	462b      	mov	r3, r5
 800e14e:	461d      	mov	r5, r3
 800e150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e154:	2a30      	cmp	r2, #48	; 0x30
 800e156:	d0fa      	beq.n	800e14e <_dtoa_r+0xb66>
 800e158:	e6f7      	b.n	800df4a <_dtoa_r+0x962>
 800e15a:	9a00      	ldr	r2, [sp, #0]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d1a5      	bne.n	800e0ac <_dtoa_r+0xac4>
 800e160:	f10a 0a01 	add.w	sl, sl, #1
 800e164:	2331      	movs	r3, #49	; 0x31
 800e166:	e779      	b.n	800e05c <_dtoa_r+0xa74>
 800e168:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <_dtoa_r+0xbd0>)
 800e16a:	f7ff baaf 	b.w	800d6cc <_dtoa_r+0xe4>
 800e16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e170:	2b00      	cmp	r3, #0
 800e172:	f47f aa86 	bne.w	800d682 <_dtoa_r+0x9a>
 800e176:	4b11      	ldr	r3, [pc, #68]	; (800e1bc <_dtoa_r+0xbd4>)
 800e178:	f7ff baa8 	b.w	800d6cc <_dtoa_r+0xe4>
 800e17c:	f1b9 0f00 	cmp.w	r9, #0
 800e180:	dc03      	bgt.n	800e18a <_dtoa_r+0xba2>
 800e182:	9b05      	ldr	r3, [sp, #20]
 800e184:	2b02      	cmp	r3, #2
 800e186:	f73f aec9 	bgt.w	800df1c <_dtoa_r+0x934>
 800e18a:	9d00      	ldr	r5, [sp, #0]
 800e18c:	4631      	mov	r1, r6
 800e18e:	4658      	mov	r0, fp
 800e190:	f7ff f99c 	bl	800d4cc <quorem>
 800e194:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e198:	f805 3b01 	strb.w	r3, [r5], #1
 800e19c:	9a00      	ldr	r2, [sp, #0]
 800e19e:	1aaa      	subs	r2, r5, r2
 800e1a0:	4591      	cmp	r9, r2
 800e1a2:	ddba      	ble.n	800e11a <_dtoa_r+0xb32>
 800e1a4:	4659      	mov	r1, fp
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	220a      	movs	r2, #10
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 f9ba 	bl	800e524 <__multadd>
 800e1b0:	4683      	mov	fp, r0
 800e1b2:	e7eb      	b.n	800e18c <_dtoa_r+0xba4>
 800e1b4:	08010334 	.word	0x08010334
 800e1b8:	0801028d 	.word	0x0801028d
 800e1bc:	080102b1 	.word	0x080102b1

0800e1c0 <__sflush_r>:
 800e1c0:	898a      	ldrh	r2, [r1, #12]
 800e1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	0710      	lsls	r0, r2, #28
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	d458      	bmi.n	800e280 <__sflush_r+0xc0>
 800e1ce:	684b      	ldr	r3, [r1, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	dc05      	bgt.n	800e1e0 <__sflush_r+0x20>
 800e1d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	dc02      	bgt.n	800e1e0 <__sflush_r+0x20>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1e2:	2e00      	cmp	r6, #0
 800e1e4:	d0f9      	beq.n	800e1da <__sflush_r+0x1a>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1ec:	682f      	ldr	r7, [r5, #0]
 800e1ee:	602b      	str	r3, [r5, #0]
 800e1f0:	d032      	beq.n	800e258 <__sflush_r+0x98>
 800e1f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	075a      	lsls	r2, r3, #29
 800e1f8:	d505      	bpl.n	800e206 <__sflush_r+0x46>
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	1ac0      	subs	r0, r0, r3
 800e1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e200:	b10b      	cbz	r3, 800e206 <__sflush_r+0x46>
 800e202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e204:	1ac0      	subs	r0, r0, r3
 800e206:	2300      	movs	r3, #0
 800e208:	4602      	mov	r2, r0
 800e20a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e20c:	6a21      	ldr	r1, [r4, #32]
 800e20e:	4628      	mov	r0, r5
 800e210:	47b0      	blx	r6
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	d106      	bne.n	800e226 <__sflush_r+0x66>
 800e218:	6829      	ldr	r1, [r5, #0]
 800e21a:	291d      	cmp	r1, #29
 800e21c:	d82c      	bhi.n	800e278 <__sflush_r+0xb8>
 800e21e:	4a2a      	ldr	r2, [pc, #168]	; (800e2c8 <__sflush_r+0x108>)
 800e220:	40ca      	lsrs	r2, r1
 800e222:	07d6      	lsls	r6, r2, #31
 800e224:	d528      	bpl.n	800e278 <__sflush_r+0xb8>
 800e226:	2200      	movs	r2, #0
 800e228:	6062      	str	r2, [r4, #4]
 800e22a:	04d9      	lsls	r1, r3, #19
 800e22c:	6922      	ldr	r2, [r4, #16]
 800e22e:	6022      	str	r2, [r4, #0]
 800e230:	d504      	bpl.n	800e23c <__sflush_r+0x7c>
 800e232:	1c42      	adds	r2, r0, #1
 800e234:	d101      	bne.n	800e23a <__sflush_r+0x7a>
 800e236:	682b      	ldr	r3, [r5, #0]
 800e238:	b903      	cbnz	r3, 800e23c <__sflush_r+0x7c>
 800e23a:	6560      	str	r0, [r4, #84]	; 0x54
 800e23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e23e:	602f      	str	r7, [r5, #0]
 800e240:	2900      	cmp	r1, #0
 800e242:	d0ca      	beq.n	800e1da <__sflush_r+0x1a>
 800e244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e248:	4299      	cmp	r1, r3
 800e24a:	d002      	beq.n	800e252 <__sflush_r+0x92>
 800e24c:	4628      	mov	r0, r5
 800e24e:	f000 fc95 	bl	800eb7c <_free_r>
 800e252:	2000      	movs	r0, #0
 800e254:	6360      	str	r0, [r4, #52]	; 0x34
 800e256:	e7c1      	b.n	800e1dc <__sflush_r+0x1c>
 800e258:	6a21      	ldr	r1, [r4, #32]
 800e25a:	2301      	movs	r3, #1
 800e25c:	4628      	mov	r0, r5
 800e25e:	47b0      	blx	r6
 800e260:	1c41      	adds	r1, r0, #1
 800e262:	d1c7      	bne.n	800e1f4 <__sflush_r+0x34>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d0c4      	beq.n	800e1f4 <__sflush_r+0x34>
 800e26a:	2b1d      	cmp	r3, #29
 800e26c:	d001      	beq.n	800e272 <__sflush_r+0xb2>
 800e26e:	2b16      	cmp	r3, #22
 800e270:	d101      	bne.n	800e276 <__sflush_r+0xb6>
 800e272:	602f      	str	r7, [r5, #0]
 800e274:	e7b1      	b.n	800e1da <__sflush_r+0x1a>
 800e276:	89a3      	ldrh	r3, [r4, #12]
 800e278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e27c:	81a3      	strh	r3, [r4, #12]
 800e27e:	e7ad      	b.n	800e1dc <__sflush_r+0x1c>
 800e280:	690f      	ldr	r7, [r1, #16]
 800e282:	2f00      	cmp	r7, #0
 800e284:	d0a9      	beq.n	800e1da <__sflush_r+0x1a>
 800e286:	0793      	lsls	r3, r2, #30
 800e288:	680e      	ldr	r6, [r1, #0]
 800e28a:	bf08      	it	eq
 800e28c:	694b      	ldreq	r3, [r1, #20]
 800e28e:	600f      	str	r7, [r1, #0]
 800e290:	bf18      	it	ne
 800e292:	2300      	movne	r3, #0
 800e294:	eba6 0807 	sub.w	r8, r6, r7
 800e298:	608b      	str	r3, [r1, #8]
 800e29a:	f1b8 0f00 	cmp.w	r8, #0
 800e29e:	dd9c      	ble.n	800e1da <__sflush_r+0x1a>
 800e2a0:	6a21      	ldr	r1, [r4, #32]
 800e2a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2a4:	4643      	mov	r3, r8
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b0      	blx	r6
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	dc06      	bgt.n	800e2be <__sflush_r+0xfe>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b6:	81a3      	strh	r3, [r4, #12]
 800e2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2bc:	e78e      	b.n	800e1dc <__sflush_r+0x1c>
 800e2be:	4407      	add	r7, r0
 800e2c0:	eba8 0800 	sub.w	r8, r8, r0
 800e2c4:	e7e9      	b.n	800e29a <__sflush_r+0xda>
 800e2c6:	bf00      	nop
 800e2c8:	20400001 	.word	0x20400001

0800e2cc <_fflush_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	690b      	ldr	r3, [r1, #16]
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	b913      	cbnz	r3, 800e2dc <_fflush_r+0x10>
 800e2d6:	2500      	movs	r5, #0
 800e2d8:	4628      	mov	r0, r5
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	b118      	cbz	r0, 800e2e6 <_fflush_r+0x1a>
 800e2de:	6983      	ldr	r3, [r0, #24]
 800e2e0:	b90b      	cbnz	r3, 800e2e6 <_fflush_r+0x1a>
 800e2e2:	f7fd ff9f 	bl	800c224 <__sinit>
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <_fflush_r+0x6c>)
 800e2e8:	429c      	cmp	r4, r3
 800e2ea:	d11b      	bne.n	800e324 <_fflush_r+0x58>
 800e2ec:	686c      	ldr	r4, [r5, #4]
 800e2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d0ef      	beq.n	800e2d6 <_fflush_r+0xa>
 800e2f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2f8:	07d0      	lsls	r0, r2, #31
 800e2fa:	d404      	bmi.n	800e306 <_fflush_r+0x3a>
 800e2fc:	0599      	lsls	r1, r3, #22
 800e2fe:	d402      	bmi.n	800e306 <_fflush_r+0x3a>
 800e300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e302:	f7fe f864 	bl	800c3ce <__retarget_lock_acquire_recursive>
 800e306:	4628      	mov	r0, r5
 800e308:	4621      	mov	r1, r4
 800e30a:	f7ff ff59 	bl	800e1c0 <__sflush_r>
 800e30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e310:	07da      	lsls	r2, r3, #31
 800e312:	4605      	mov	r5, r0
 800e314:	d4e0      	bmi.n	800e2d8 <_fflush_r+0xc>
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	059b      	lsls	r3, r3, #22
 800e31a:	d4dd      	bmi.n	800e2d8 <_fflush_r+0xc>
 800e31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e31e:	f7fe f857 	bl	800c3d0 <__retarget_lock_release_recursive>
 800e322:	e7d9      	b.n	800e2d8 <_fflush_r+0xc>
 800e324:	4b05      	ldr	r3, [pc, #20]	; (800e33c <_fflush_r+0x70>)
 800e326:	429c      	cmp	r4, r3
 800e328:	d101      	bne.n	800e32e <_fflush_r+0x62>
 800e32a:	68ac      	ldr	r4, [r5, #8]
 800e32c:	e7df      	b.n	800e2ee <_fflush_r+0x22>
 800e32e:	4b04      	ldr	r3, [pc, #16]	; (800e340 <_fflush_r+0x74>)
 800e330:	429c      	cmp	r4, r3
 800e332:	bf08      	it	eq
 800e334:	68ec      	ldreq	r4, [r5, #12]
 800e336:	e7da      	b.n	800e2ee <_fflush_r+0x22>
 800e338:	08010228 	.word	0x08010228
 800e33c:	08010248 	.word	0x08010248
 800e340:	08010208 	.word	0x08010208

0800e344 <_localeconv_r>:
 800e344:	4800      	ldr	r0, [pc, #0]	; (800e348 <_localeconv_r+0x4>)
 800e346:	4770      	bx	lr
 800e348:	20000198 	.word	0x20000198

0800e34c <_lseek_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d07      	ldr	r5, [pc, #28]	; (800e36c <_lseek_r+0x20>)
 800e350:	4604      	mov	r4, r0
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f4 f808 	bl	8002370 <_lseek>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_lseek_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_lseek_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	20008b80 	.word	0x20008b80

0800e370 <__swhatbuf_r>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	460e      	mov	r6, r1
 800e374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e378:	2900      	cmp	r1, #0
 800e37a:	b096      	sub	sp, #88	; 0x58
 800e37c:	4614      	mov	r4, r2
 800e37e:	461d      	mov	r5, r3
 800e380:	da07      	bge.n	800e392 <__swhatbuf_r+0x22>
 800e382:	2300      	movs	r3, #0
 800e384:	602b      	str	r3, [r5, #0]
 800e386:	89b3      	ldrh	r3, [r6, #12]
 800e388:	061a      	lsls	r2, r3, #24
 800e38a:	d410      	bmi.n	800e3ae <__swhatbuf_r+0x3e>
 800e38c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e390:	e00e      	b.n	800e3b0 <__swhatbuf_r+0x40>
 800e392:	466a      	mov	r2, sp
 800e394:	f000 fe1a 	bl	800efcc <_fstat_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	dbf2      	blt.n	800e382 <__swhatbuf_r+0x12>
 800e39c:	9a01      	ldr	r2, [sp, #4]
 800e39e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3a6:	425a      	negs	r2, r3
 800e3a8:	415a      	adcs	r2, r3
 800e3aa:	602a      	str	r2, [r5, #0]
 800e3ac:	e7ee      	b.n	800e38c <__swhatbuf_r+0x1c>
 800e3ae:	2340      	movs	r3, #64	; 0x40
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	b016      	add	sp, #88	; 0x58
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}

0800e3b8 <__smakebuf_r>:
 800e3b8:	898b      	ldrh	r3, [r1, #12]
 800e3ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3bc:	079d      	lsls	r5, r3, #30
 800e3be:	4606      	mov	r6, r0
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	d507      	bpl.n	800e3d4 <__smakebuf_r+0x1c>
 800e3c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3c8:	6023      	str	r3, [r4, #0]
 800e3ca:	6123      	str	r3, [r4, #16]
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	6163      	str	r3, [r4, #20]
 800e3d0:	b002      	add	sp, #8
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}
 800e3d4:	ab01      	add	r3, sp, #4
 800e3d6:	466a      	mov	r2, sp
 800e3d8:	f7ff ffca 	bl	800e370 <__swhatbuf_r>
 800e3dc:	9900      	ldr	r1, [sp, #0]
 800e3de:	4605      	mov	r5, r0
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7fe f827 	bl	800c434 <_malloc_r>
 800e3e6:	b948      	cbnz	r0, 800e3fc <__smakebuf_r+0x44>
 800e3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ec:	059a      	lsls	r2, r3, #22
 800e3ee:	d4ef      	bmi.n	800e3d0 <__smakebuf_r+0x18>
 800e3f0:	f023 0303 	bic.w	r3, r3, #3
 800e3f4:	f043 0302 	orr.w	r3, r3, #2
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	e7e3      	b.n	800e3c4 <__smakebuf_r+0xc>
 800e3fc:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <__smakebuf_r+0x7c>)
 800e3fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800e400:	89a3      	ldrh	r3, [r4, #12]
 800e402:	6020      	str	r0, [r4, #0]
 800e404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	9b00      	ldr	r3, [sp, #0]
 800e40c:	6163      	str	r3, [r4, #20]
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	6120      	str	r0, [r4, #16]
 800e412:	b15b      	cbz	r3, 800e42c <__smakebuf_r+0x74>
 800e414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e418:	4630      	mov	r0, r6
 800e41a:	f000 fde9 	bl	800eff0 <_isatty_r>
 800e41e:	b128      	cbz	r0, 800e42c <__smakebuf_r+0x74>
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	f023 0303 	bic.w	r3, r3, #3
 800e426:	f043 0301 	orr.w	r3, r3, #1
 800e42a:	81a3      	strh	r3, [r4, #12]
 800e42c:	89a0      	ldrh	r0, [r4, #12]
 800e42e:	4305      	orrs	r5, r0
 800e430:	81a5      	strh	r5, [r4, #12]
 800e432:	e7cd      	b.n	800e3d0 <__smakebuf_r+0x18>
 800e434:	0800c1bd 	.word	0x0800c1bd

0800e438 <malloc>:
 800e438:	4b02      	ldr	r3, [pc, #8]	; (800e444 <malloc+0xc>)
 800e43a:	4601      	mov	r1, r0
 800e43c:	6818      	ldr	r0, [r3, #0]
 800e43e:	f7fd bff9 	b.w	800c434 <_malloc_r>
 800e442:	bf00      	nop
 800e444:	20000044 	.word	0x20000044

0800e448 <__malloc_lock>:
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <__malloc_lock+0x8>)
 800e44a:	f7fd bfc0 	b.w	800c3ce <__retarget_lock_acquire_recursive>
 800e44e:	bf00      	nop
 800e450:	20008b78 	.word	0x20008b78

0800e454 <__malloc_unlock>:
 800e454:	4801      	ldr	r0, [pc, #4]	; (800e45c <__malloc_unlock+0x8>)
 800e456:	f7fd bfbb 	b.w	800c3d0 <__retarget_lock_release_recursive>
 800e45a:	bf00      	nop
 800e45c:	20008b78 	.word	0x20008b78

0800e460 <_Balloc>:
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e464:	4604      	mov	r4, r0
 800e466:	460d      	mov	r5, r1
 800e468:	b976      	cbnz	r6, 800e488 <_Balloc+0x28>
 800e46a:	2010      	movs	r0, #16
 800e46c:	f7ff ffe4 	bl	800e438 <malloc>
 800e470:	4602      	mov	r2, r0
 800e472:	6260      	str	r0, [r4, #36]	; 0x24
 800e474:	b920      	cbnz	r0, 800e480 <_Balloc+0x20>
 800e476:	4b18      	ldr	r3, [pc, #96]	; (800e4d8 <_Balloc+0x78>)
 800e478:	4818      	ldr	r0, [pc, #96]	; (800e4dc <_Balloc+0x7c>)
 800e47a:	2166      	movs	r1, #102	; 0x66
 800e47c:	f7fd fe56 	bl	800c12c <__assert_func>
 800e480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e484:	6006      	str	r6, [r0, #0]
 800e486:	60c6      	str	r6, [r0, #12]
 800e488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e48a:	68f3      	ldr	r3, [r6, #12]
 800e48c:	b183      	cbz	r3, 800e4b0 <_Balloc+0x50>
 800e48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e496:	b9b8      	cbnz	r0, 800e4c8 <_Balloc+0x68>
 800e498:	2101      	movs	r1, #1
 800e49a:	fa01 f605 	lsl.w	r6, r1, r5
 800e49e:	1d72      	adds	r2, r6, #5
 800e4a0:	0092      	lsls	r2, r2, #2
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f000 fb5a 	bl	800eb5c <_calloc_r>
 800e4a8:	b160      	cbz	r0, 800e4c4 <_Balloc+0x64>
 800e4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4ae:	e00e      	b.n	800e4ce <_Balloc+0x6e>
 800e4b0:	2221      	movs	r2, #33	; 0x21
 800e4b2:	2104      	movs	r1, #4
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f000 fb51 	bl	800eb5c <_calloc_r>
 800e4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4bc:	60f0      	str	r0, [r6, #12]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e4      	bne.n	800e48e <_Balloc+0x2e>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	6802      	ldr	r2, [r0, #0]
 800e4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4d4:	e7f7      	b.n	800e4c6 <_Balloc+0x66>
 800e4d6:	bf00      	nop
 800e4d8:	080102be 	.word	0x080102be
 800e4dc:	08010345 	.word	0x08010345

0800e4e0 <_Bfree>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b976      	cbnz	r6, 800e508 <_Bfree+0x28>
 800e4ea:	2010      	movs	r0, #16
 800e4ec:	f7ff ffa4 	bl	800e438 <malloc>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6268      	str	r0, [r5, #36]	; 0x24
 800e4f4:	b920      	cbnz	r0, 800e500 <_Bfree+0x20>
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <_Bfree+0x3c>)
 800e4f8:	4809      	ldr	r0, [pc, #36]	; (800e520 <_Bfree+0x40>)
 800e4fa:	218a      	movs	r1, #138	; 0x8a
 800e4fc:	f7fd fe16 	bl	800c12c <__assert_func>
 800e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e504:	6006      	str	r6, [r0, #0]
 800e506:	60c6      	str	r6, [r0, #12]
 800e508:	b13c      	cbz	r4, 800e51a <_Bfree+0x3a>
 800e50a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e50c:	6862      	ldr	r2, [r4, #4]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e514:	6021      	str	r1, [r4, #0]
 800e516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
 800e51c:	080102be 	.word	0x080102be
 800e520:	08010345 	.word	0x08010345

0800e524 <__multadd>:
 800e524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e528:	690e      	ldr	r6, [r1, #16]
 800e52a:	4607      	mov	r7, r0
 800e52c:	4698      	mov	r8, r3
 800e52e:	460c      	mov	r4, r1
 800e530:	f101 0014 	add.w	r0, r1, #20
 800e534:	2300      	movs	r3, #0
 800e536:	6805      	ldr	r5, [r0, #0]
 800e538:	b2a9      	uxth	r1, r5
 800e53a:	fb02 8101 	mla	r1, r2, r1, r8
 800e53e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e542:	0c2d      	lsrs	r5, r5, #16
 800e544:	fb02 c505 	mla	r5, r2, r5, ip
 800e548:	b289      	uxth	r1, r1
 800e54a:	3301      	adds	r3, #1
 800e54c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e550:	429e      	cmp	r6, r3
 800e552:	f840 1b04 	str.w	r1, [r0], #4
 800e556:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e55a:	dcec      	bgt.n	800e536 <__multadd+0x12>
 800e55c:	f1b8 0f00 	cmp.w	r8, #0
 800e560:	d022      	beq.n	800e5a8 <__multadd+0x84>
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	42b3      	cmp	r3, r6
 800e566:	dc19      	bgt.n	800e59c <__multadd+0x78>
 800e568:	6861      	ldr	r1, [r4, #4]
 800e56a:	4638      	mov	r0, r7
 800e56c:	3101      	adds	r1, #1
 800e56e:	f7ff ff77 	bl	800e460 <_Balloc>
 800e572:	4605      	mov	r5, r0
 800e574:	b928      	cbnz	r0, 800e582 <__multadd+0x5e>
 800e576:	4602      	mov	r2, r0
 800e578:	4b0d      	ldr	r3, [pc, #52]	; (800e5b0 <__multadd+0x8c>)
 800e57a:	480e      	ldr	r0, [pc, #56]	; (800e5b4 <__multadd+0x90>)
 800e57c:	21b5      	movs	r1, #181	; 0xb5
 800e57e:	f7fd fdd5 	bl	800c12c <__assert_func>
 800e582:	6922      	ldr	r2, [r4, #16]
 800e584:	3202      	adds	r2, #2
 800e586:	f104 010c 	add.w	r1, r4, #12
 800e58a:	0092      	lsls	r2, r2, #2
 800e58c:	300c      	adds	r0, #12
 800e58e:	f7fd ff20 	bl	800c3d2 <memcpy>
 800e592:	4621      	mov	r1, r4
 800e594:	4638      	mov	r0, r7
 800e596:	f7ff ffa3 	bl	800e4e0 <_Bfree>
 800e59a:	462c      	mov	r4, r5
 800e59c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e5a0:	3601      	adds	r6, #1
 800e5a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e5a6:	6126      	str	r6, [r4, #16]
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ae:	bf00      	nop
 800e5b0:	08010334 	.word	0x08010334
 800e5b4:	08010345 	.word	0x08010345

0800e5b8 <__hi0bits>:
 800e5b8:	0c03      	lsrs	r3, r0, #16
 800e5ba:	041b      	lsls	r3, r3, #16
 800e5bc:	b9d3      	cbnz	r3, 800e5f4 <__hi0bits+0x3c>
 800e5be:	0400      	lsls	r0, r0, #16
 800e5c0:	2310      	movs	r3, #16
 800e5c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5c6:	bf04      	itt	eq
 800e5c8:	0200      	lsleq	r0, r0, #8
 800e5ca:	3308      	addeq	r3, #8
 800e5cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5d0:	bf04      	itt	eq
 800e5d2:	0100      	lsleq	r0, r0, #4
 800e5d4:	3304      	addeq	r3, #4
 800e5d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5da:	bf04      	itt	eq
 800e5dc:	0080      	lsleq	r0, r0, #2
 800e5de:	3302      	addeq	r3, #2
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	db05      	blt.n	800e5f0 <__hi0bits+0x38>
 800e5e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5e8:	f103 0301 	add.w	r3, r3, #1
 800e5ec:	bf08      	it	eq
 800e5ee:	2320      	moveq	r3, #32
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	4770      	bx	lr
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e7e4      	b.n	800e5c2 <__hi0bits+0xa>

0800e5f8 <__lo0bits>:
 800e5f8:	6803      	ldr	r3, [r0, #0]
 800e5fa:	f013 0207 	ands.w	r2, r3, #7
 800e5fe:	4601      	mov	r1, r0
 800e600:	d00b      	beq.n	800e61a <__lo0bits+0x22>
 800e602:	07da      	lsls	r2, r3, #31
 800e604:	d424      	bmi.n	800e650 <__lo0bits+0x58>
 800e606:	0798      	lsls	r0, r3, #30
 800e608:	bf49      	itett	mi
 800e60a:	085b      	lsrmi	r3, r3, #1
 800e60c:	089b      	lsrpl	r3, r3, #2
 800e60e:	2001      	movmi	r0, #1
 800e610:	600b      	strmi	r3, [r1, #0]
 800e612:	bf5c      	itt	pl
 800e614:	600b      	strpl	r3, [r1, #0]
 800e616:	2002      	movpl	r0, #2
 800e618:	4770      	bx	lr
 800e61a:	b298      	uxth	r0, r3
 800e61c:	b9b0      	cbnz	r0, 800e64c <__lo0bits+0x54>
 800e61e:	0c1b      	lsrs	r3, r3, #16
 800e620:	2010      	movs	r0, #16
 800e622:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e626:	bf04      	itt	eq
 800e628:	0a1b      	lsreq	r3, r3, #8
 800e62a:	3008      	addeq	r0, #8
 800e62c:	071a      	lsls	r2, r3, #28
 800e62e:	bf04      	itt	eq
 800e630:	091b      	lsreq	r3, r3, #4
 800e632:	3004      	addeq	r0, #4
 800e634:	079a      	lsls	r2, r3, #30
 800e636:	bf04      	itt	eq
 800e638:	089b      	lsreq	r3, r3, #2
 800e63a:	3002      	addeq	r0, #2
 800e63c:	07da      	lsls	r2, r3, #31
 800e63e:	d403      	bmi.n	800e648 <__lo0bits+0x50>
 800e640:	085b      	lsrs	r3, r3, #1
 800e642:	f100 0001 	add.w	r0, r0, #1
 800e646:	d005      	beq.n	800e654 <__lo0bits+0x5c>
 800e648:	600b      	str	r3, [r1, #0]
 800e64a:	4770      	bx	lr
 800e64c:	4610      	mov	r0, r2
 800e64e:	e7e8      	b.n	800e622 <__lo0bits+0x2a>
 800e650:	2000      	movs	r0, #0
 800e652:	4770      	bx	lr
 800e654:	2020      	movs	r0, #32
 800e656:	4770      	bx	lr

0800e658 <__i2b>:
 800e658:	b510      	push	{r4, lr}
 800e65a:	460c      	mov	r4, r1
 800e65c:	2101      	movs	r1, #1
 800e65e:	f7ff feff 	bl	800e460 <_Balloc>
 800e662:	4602      	mov	r2, r0
 800e664:	b928      	cbnz	r0, 800e672 <__i2b+0x1a>
 800e666:	4b05      	ldr	r3, [pc, #20]	; (800e67c <__i2b+0x24>)
 800e668:	4805      	ldr	r0, [pc, #20]	; (800e680 <__i2b+0x28>)
 800e66a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e66e:	f7fd fd5d 	bl	800c12c <__assert_func>
 800e672:	2301      	movs	r3, #1
 800e674:	6144      	str	r4, [r0, #20]
 800e676:	6103      	str	r3, [r0, #16]
 800e678:	bd10      	pop	{r4, pc}
 800e67a:	bf00      	nop
 800e67c:	08010334 	.word	0x08010334
 800e680:	08010345 	.word	0x08010345

0800e684 <__multiply>:
 800e684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e688:	4614      	mov	r4, r2
 800e68a:	690a      	ldr	r2, [r1, #16]
 800e68c:	6923      	ldr	r3, [r4, #16]
 800e68e:	429a      	cmp	r2, r3
 800e690:	bfb8      	it	lt
 800e692:	460b      	movlt	r3, r1
 800e694:	460d      	mov	r5, r1
 800e696:	bfbc      	itt	lt
 800e698:	4625      	movlt	r5, r4
 800e69a:	461c      	movlt	r4, r3
 800e69c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e6a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6a4:	68ab      	ldr	r3, [r5, #8]
 800e6a6:	6869      	ldr	r1, [r5, #4]
 800e6a8:	eb0a 0709 	add.w	r7, sl, r9
 800e6ac:	42bb      	cmp	r3, r7
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	bfb8      	it	lt
 800e6b2:	3101      	addlt	r1, #1
 800e6b4:	f7ff fed4 	bl	800e460 <_Balloc>
 800e6b8:	b930      	cbnz	r0, 800e6c8 <__multiply+0x44>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	4b42      	ldr	r3, [pc, #264]	; (800e7c8 <__multiply+0x144>)
 800e6be:	4843      	ldr	r0, [pc, #268]	; (800e7cc <__multiply+0x148>)
 800e6c0:	f240 115d 	movw	r1, #349	; 0x15d
 800e6c4:	f7fd fd32 	bl	800c12c <__assert_func>
 800e6c8:	f100 0614 	add.w	r6, r0, #20
 800e6cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6d0:	4633      	mov	r3, r6
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	4543      	cmp	r3, r8
 800e6d6:	d31e      	bcc.n	800e716 <__multiply+0x92>
 800e6d8:	f105 0c14 	add.w	ip, r5, #20
 800e6dc:	f104 0314 	add.w	r3, r4, #20
 800e6e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6e8:	9202      	str	r2, [sp, #8]
 800e6ea:	ebac 0205 	sub.w	r2, ip, r5
 800e6ee:	3a15      	subs	r2, #21
 800e6f0:	f022 0203 	bic.w	r2, r2, #3
 800e6f4:	3204      	adds	r2, #4
 800e6f6:	f105 0115 	add.w	r1, r5, #21
 800e6fa:	458c      	cmp	ip, r1
 800e6fc:	bf38      	it	cc
 800e6fe:	2204      	movcc	r2, #4
 800e700:	9201      	str	r2, [sp, #4]
 800e702:	9a02      	ldr	r2, [sp, #8]
 800e704:	9303      	str	r3, [sp, #12]
 800e706:	429a      	cmp	r2, r3
 800e708:	d808      	bhi.n	800e71c <__multiply+0x98>
 800e70a:	2f00      	cmp	r7, #0
 800e70c:	dc55      	bgt.n	800e7ba <__multiply+0x136>
 800e70e:	6107      	str	r7, [r0, #16]
 800e710:	b005      	add	sp, #20
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	f843 2b04 	str.w	r2, [r3], #4
 800e71a:	e7db      	b.n	800e6d4 <__multiply+0x50>
 800e71c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e720:	f1ba 0f00 	cmp.w	sl, #0
 800e724:	d020      	beq.n	800e768 <__multiply+0xe4>
 800e726:	f105 0e14 	add.w	lr, r5, #20
 800e72a:	46b1      	mov	r9, r6
 800e72c:	2200      	movs	r2, #0
 800e72e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e732:	f8d9 b000 	ldr.w	fp, [r9]
 800e736:	b2a1      	uxth	r1, r4
 800e738:	fa1f fb8b 	uxth.w	fp, fp
 800e73c:	fb0a b101 	mla	r1, sl, r1, fp
 800e740:	4411      	add	r1, r2
 800e742:	f8d9 2000 	ldr.w	r2, [r9]
 800e746:	0c24      	lsrs	r4, r4, #16
 800e748:	0c12      	lsrs	r2, r2, #16
 800e74a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e74e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e752:	b289      	uxth	r1, r1
 800e754:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e758:	45f4      	cmp	ip, lr
 800e75a:	f849 1b04 	str.w	r1, [r9], #4
 800e75e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e762:	d8e4      	bhi.n	800e72e <__multiply+0xaa>
 800e764:	9901      	ldr	r1, [sp, #4]
 800e766:	5072      	str	r2, [r6, r1]
 800e768:	9a03      	ldr	r2, [sp, #12]
 800e76a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e76e:	3304      	adds	r3, #4
 800e770:	f1b9 0f00 	cmp.w	r9, #0
 800e774:	d01f      	beq.n	800e7b6 <__multiply+0x132>
 800e776:	6834      	ldr	r4, [r6, #0]
 800e778:	f105 0114 	add.w	r1, r5, #20
 800e77c:	46b6      	mov	lr, r6
 800e77e:	f04f 0a00 	mov.w	sl, #0
 800e782:	880a      	ldrh	r2, [r1, #0]
 800e784:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e788:	fb09 b202 	mla	r2, r9, r2, fp
 800e78c:	4492      	add	sl, r2
 800e78e:	b2a4      	uxth	r4, r4
 800e790:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e794:	f84e 4b04 	str.w	r4, [lr], #4
 800e798:	f851 4b04 	ldr.w	r4, [r1], #4
 800e79c:	f8be 2000 	ldrh.w	r2, [lr]
 800e7a0:	0c24      	lsrs	r4, r4, #16
 800e7a2:	fb09 2404 	mla	r4, r9, r4, r2
 800e7a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e7aa:	458c      	cmp	ip, r1
 800e7ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e7b0:	d8e7      	bhi.n	800e782 <__multiply+0xfe>
 800e7b2:	9a01      	ldr	r2, [sp, #4]
 800e7b4:	50b4      	str	r4, [r6, r2]
 800e7b6:	3604      	adds	r6, #4
 800e7b8:	e7a3      	b.n	800e702 <__multiply+0x7e>
 800e7ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1a5      	bne.n	800e70e <__multiply+0x8a>
 800e7c2:	3f01      	subs	r7, #1
 800e7c4:	e7a1      	b.n	800e70a <__multiply+0x86>
 800e7c6:	bf00      	nop
 800e7c8:	08010334 	.word	0x08010334
 800e7cc:	08010345 	.word	0x08010345

0800e7d0 <__pow5mult>:
 800e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d4:	4615      	mov	r5, r2
 800e7d6:	f012 0203 	ands.w	r2, r2, #3
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460f      	mov	r7, r1
 800e7de:	d007      	beq.n	800e7f0 <__pow5mult+0x20>
 800e7e0:	4c25      	ldr	r4, [pc, #148]	; (800e878 <__pow5mult+0xa8>)
 800e7e2:	3a01      	subs	r2, #1
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7ea:	f7ff fe9b 	bl	800e524 <__multadd>
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	10ad      	asrs	r5, r5, #2
 800e7f2:	d03d      	beq.n	800e870 <__pow5mult+0xa0>
 800e7f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7f6:	b97c      	cbnz	r4, 800e818 <__pow5mult+0x48>
 800e7f8:	2010      	movs	r0, #16
 800e7fa:	f7ff fe1d 	bl	800e438 <malloc>
 800e7fe:	4602      	mov	r2, r0
 800e800:	6270      	str	r0, [r6, #36]	; 0x24
 800e802:	b928      	cbnz	r0, 800e810 <__pow5mult+0x40>
 800e804:	4b1d      	ldr	r3, [pc, #116]	; (800e87c <__pow5mult+0xac>)
 800e806:	481e      	ldr	r0, [pc, #120]	; (800e880 <__pow5mult+0xb0>)
 800e808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e80c:	f7fd fc8e 	bl	800c12c <__assert_func>
 800e810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e814:	6004      	str	r4, [r0, #0]
 800e816:	60c4      	str	r4, [r0, #12]
 800e818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e820:	b94c      	cbnz	r4, 800e836 <__pow5mult+0x66>
 800e822:	f240 2171 	movw	r1, #625	; 0x271
 800e826:	4630      	mov	r0, r6
 800e828:	f7ff ff16 	bl	800e658 <__i2b>
 800e82c:	2300      	movs	r3, #0
 800e82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e832:	4604      	mov	r4, r0
 800e834:	6003      	str	r3, [r0, #0]
 800e836:	f04f 0900 	mov.w	r9, #0
 800e83a:	07eb      	lsls	r3, r5, #31
 800e83c:	d50a      	bpl.n	800e854 <__pow5mult+0x84>
 800e83e:	4639      	mov	r1, r7
 800e840:	4622      	mov	r2, r4
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff ff1e 	bl	800e684 <__multiply>
 800e848:	4639      	mov	r1, r7
 800e84a:	4680      	mov	r8, r0
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7ff fe47 	bl	800e4e0 <_Bfree>
 800e852:	4647      	mov	r7, r8
 800e854:	106d      	asrs	r5, r5, #1
 800e856:	d00b      	beq.n	800e870 <__pow5mult+0xa0>
 800e858:	6820      	ldr	r0, [r4, #0]
 800e85a:	b938      	cbnz	r0, 800e86c <__pow5mult+0x9c>
 800e85c:	4622      	mov	r2, r4
 800e85e:	4621      	mov	r1, r4
 800e860:	4630      	mov	r0, r6
 800e862:	f7ff ff0f 	bl	800e684 <__multiply>
 800e866:	6020      	str	r0, [r4, #0]
 800e868:	f8c0 9000 	str.w	r9, [r0]
 800e86c:	4604      	mov	r4, r0
 800e86e:	e7e4      	b.n	800e83a <__pow5mult+0x6a>
 800e870:	4638      	mov	r0, r7
 800e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e876:	bf00      	nop
 800e878:	08010498 	.word	0x08010498
 800e87c:	080102be 	.word	0x080102be
 800e880:	08010345 	.word	0x08010345

0800e884 <__lshift>:
 800e884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e888:	460c      	mov	r4, r1
 800e88a:	6849      	ldr	r1, [r1, #4]
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	4607      	mov	r7, r0
 800e896:	4691      	mov	r9, r2
 800e898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e89c:	f108 0601 	add.w	r6, r8, #1
 800e8a0:	42b3      	cmp	r3, r6
 800e8a2:	db0b      	blt.n	800e8bc <__lshift+0x38>
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f7ff fddb 	bl	800e460 <_Balloc>
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	b948      	cbnz	r0, 800e8c2 <__lshift+0x3e>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	4b28      	ldr	r3, [pc, #160]	; (800e954 <__lshift+0xd0>)
 800e8b2:	4829      	ldr	r0, [pc, #164]	; (800e958 <__lshift+0xd4>)
 800e8b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8b8:	f7fd fc38 	bl	800c12c <__assert_func>
 800e8bc:	3101      	adds	r1, #1
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	e7ee      	b.n	800e8a0 <__lshift+0x1c>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f100 0114 	add.w	r1, r0, #20
 800e8c8:	f100 0210 	add.w	r2, r0, #16
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	4553      	cmp	r3, sl
 800e8d0:	db33      	blt.n	800e93a <__lshift+0xb6>
 800e8d2:	6920      	ldr	r0, [r4, #16]
 800e8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8d8:	f104 0314 	add.w	r3, r4, #20
 800e8dc:	f019 091f 	ands.w	r9, r9, #31
 800e8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8e8:	d02b      	beq.n	800e942 <__lshift+0xbe>
 800e8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800e8ee:	468a      	mov	sl, r1
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800e8f8:	4302      	orrs	r2, r0
 800e8fa:	f84a 2b04 	str.w	r2, [sl], #4
 800e8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e902:	459c      	cmp	ip, r3
 800e904:	fa22 f20e 	lsr.w	r2, r2, lr
 800e908:	d8f3      	bhi.n	800e8f2 <__lshift+0x6e>
 800e90a:	ebac 0304 	sub.w	r3, ip, r4
 800e90e:	3b15      	subs	r3, #21
 800e910:	f023 0303 	bic.w	r3, r3, #3
 800e914:	3304      	adds	r3, #4
 800e916:	f104 0015 	add.w	r0, r4, #21
 800e91a:	4584      	cmp	ip, r0
 800e91c:	bf38      	it	cc
 800e91e:	2304      	movcc	r3, #4
 800e920:	50ca      	str	r2, [r1, r3]
 800e922:	b10a      	cbz	r2, 800e928 <__lshift+0xa4>
 800e924:	f108 0602 	add.w	r6, r8, #2
 800e928:	3e01      	subs	r6, #1
 800e92a:	4638      	mov	r0, r7
 800e92c:	612e      	str	r6, [r5, #16]
 800e92e:	4621      	mov	r1, r4
 800e930:	f7ff fdd6 	bl	800e4e0 <_Bfree>
 800e934:	4628      	mov	r0, r5
 800e936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e93e:	3301      	adds	r3, #1
 800e940:	e7c5      	b.n	800e8ce <__lshift+0x4a>
 800e942:	3904      	subs	r1, #4
 800e944:	f853 2b04 	ldr.w	r2, [r3], #4
 800e948:	f841 2f04 	str.w	r2, [r1, #4]!
 800e94c:	459c      	cmp	ip, r3
 800e94e:	d8f9      	bhi.n	800e944 <__lshift+0xc0>
 800e950:	e7ea      	b.n	800e928 <__lshift+0xa4>
 800e952:	bf00      	nop
 800e954:	08010334 	.word	0x08010334
 800e958:	08010345 	.word	0x08010345

0800e95c <__mcmp>:
 800e95c:	b530      	push	{r4, r5, lr}
 800e95e:	6902      	ldr	r2, [r0, #16]
 800e960:	690c      	ldr	r4, [r1, #16]
 800e962:	1b12      	subs	r2, r2, r4
 800e964:	d10e      	bne.n	800e984 <__mcmp+0x28>
 800e966:	f100 0314 	add.w	r3, r0, #20
 800e96a:	3114      	adds	r1, #20
 800e96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e97c:	42a5      	cmp	r5, r4
 800e97e:	d003      	beq.n	800e988 <__mcmp+0x2c>
 800e980:	d305      	bcc.n	800e98e <__mcmp+0x32>
 800e982:	2201      	movs	r2, #1
 800e984:	4610      	mov	r0, r2
 800e986:	bd30      	pop	{r4, r5, pc}
 800e988:	4283      	cmp	r3, r0
 800e98a:	d3f3      	bcc.n	800e974 <__mcmp+0x18>
 800e98c:	e7fa      	b.n	800e984 <__mcmp+0x28>
 800e98e:	f04f 32ff 	mov.w	r2, #4294967295
 800e992:	e7f7      	b.n	800e984 <__mcmp+0x28>

0800e994 <__mdiff>:
 800e994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e998:	460c      	mov	r4, r1
 800e99a:	4606      	mov	r6, r0
 800e99c:	4611      	mov	r1, r2
 800e99e:	4620      	mov	r0, r4
 800e9a0:	4617      	mov	r7, r2
 800e9a2:	f7ff ffdb 	bl	800e95c <__mcmp>
 800e9a6:	1e05      	subs	r5, r0, #0
 800e9a8:	d110      	bne.n	800e9cc <__mdiff+0x38>
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f7ff fd57 	bl	800e460 <_Balloc>
 800e9b2:	b930      	cbnz	r0, 800e9c2 <__mdiff+0x2e>
 800e9b4:	4b39      	ldr	r3, [pc, #228]	; (800ea9c <__mdiff+0x108>)
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	f240 2132 	movw	r1, #562	; 0x232
 800e9bc:	4838      	ldr	r0, [pc, #224]	; (800eaa0 <__mdiff+0x10c>)
 800e9be:	f7fd fbb5 	bl	800c12c <__assert_func>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9cc:	bfa4      	itt	ge
 800e9ce:	463b      	movge	r3, r7
 800e9d0:	4627      	movge	r7, r4
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	bfa6      	itte	ge
 800e9d8:	461c      	movge	r4, r3
 800e9da:	2500      	movge	r5, #0
 800e9dc:	2501      	movlt	r5, #1
 800e9de:	f7ff fd3f 	bl	800e460 <_Balloc>
 800e9e2:	b920      	cbnz	r0, 800e9ee <__mdiff+0x5a>
 800e9e4:	4b2d      	ldr	r3, [pc, #180]	; (800ea9c <__mdiff+0x108>)
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9ec:	e7e6      	b.n	800e9bc <__mdiff+0x28>
 800e9ee:	693e      	ldr	r6, [r7, #16]
 800e9f0:	60c5      	str	r5, [r0, #12]
 800e9f2:	6925      	ldr	r5, [r4, #16]
 800e9f4:	f107 0114 	add.w	r1, r7, #20
 800e9f8:	f104 0914 	add.w	r9, r4, #20
 800e9fc:	f100 0e14 	add.w	lr, r0, #20
 800ea00:	f107 0210 	add.w	r2, r7, #16
 800ea04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ea08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ea0c:	46f2      	mov	sl, lr
 800ea0e:	2700      	movs	r7, #0
 800ea10:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea18:	fa1f f883 	uxth.w	r8, r3
 800ea1c:	fa17 f78b 	uxtah	r7, r7, fp
 800ea20:	0c1b      	lsrs	r3, r3, #16
 800ea22:	eba7 0808 	sub.w	r8, r7, r8
 800ea26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea2e:	fa1f f888 	uxth.w	r8, r8
 800ea32:	141f      	asrs	r7, r3, #16
 800ea34:	454d      	cmp	r5, r9
 800ea36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea3a:	f84a 3b04 	str.w	r3, [sl], #4
 800ea3e:	d8e7      	bhi.n	800ea10 <__mdiff+0x7c>
 800ea40:	1b2b      	subs	r3, r5, r4
 800ea42:	3b15      	subs	r3, #21
 800ea44:	f023 0303 	bic.w	r3, r3, #3
 800ea48:	3304      	adds	r3, #4
 800ea4a:	3415      	adds	r4, #21
 800ea4c:	42a5      	cmp	r5, r4
 800ea4e:	bf38      	it	cc
 800ea50:	2304      	movcc	r3, #4
 800ea52:	4419      	add	r1, r3
 800ea54:	4473      	add	r3, lr
 800ea56:	469e      	mov	lr, r3
 800ea58:	460d      	mov	r5, r1
 800ea5a:	4565      	cmp	r5, ip
 800ea5c:	d30e      	bcc.n	800ea7c <__mdiff+0xe8>
 800ea5e:	f10c 0203 	add.w	r2, ip, #3
 800ea62:	1a52      	subs	r2, r2, r1
 800ea64:	f022 0203 	bic.w	r2, r2, #3
 800ea68:	3903      	subs	r1, #3
 800ea6a:	458c      	cmp	ip, r1
 800ea6c:	bf38      	it	cc
 800ea6e:	2200      	movcc	r2, #0
 800ea70:	441a      	add	r2, r3
 800ea72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea76:	b17b      	cbz	r3, 800ea98 <__mdiff+0x104>
 800ea78:	6106      	str	r6, [r0, #16]
 800ea7a:	e7a5      	b.n	800e9c8 <__mdiff+0x34>
 800ea7c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea80:	fa17 f488 	uxtah	r4, r7, r8
 800ea84:	1422      	asrs	r2, r4, #16
 800ea86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea8a:	b2a4      	uxth	r4, r4
 800ea8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea90:	f84e 4b04 	str.w	r4, [lr], #4
 800ea94:	1417      	asrs	r7, r2, #16
 800ea96:	e7e0      	b.n	800ea5a <__mdiff+0xc6>
 800ea98:	3e01      	subs	r6, #1
 800ea9a:	e7ea      	b.n	800ea72 <__mdiff+0xde>
 800ea9c:	08010334 	.word	0x08010334
 800eaa0:	08010345 	.word	0x08010345

0800eaa4 <__d2b>:
 800eaa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	4689      	mov	r9, r1
 800eaaa:	2101      	movs	r1, #1
 800eaac:	ec57 6b10 	vmov	r6, r7, d0
 800eab0:	4690      	mov	r8, r2
 800eab2:	f7ff fcd5 	bl	800e460 <_Balloc>
 800eab6:	4604      	mov	r4, r0
 800eab8:	b930      	cbnz	r0, 800eac8 <__d2b+0x24>
 800eaba:	4602      	mov	r2, r0
 800eabc:	4b25      	ldr	r3, [pc, #148]	; (800eb54 <__d2b+0xb0>)
 800eabe:	4826      	ldr	r0, [pc, #152]	; (800eb58 <__d2b+0xb4>)
 800eac0:	f240 310a 	movw	r1, #778	; 0x30a
 800eac4:	f7fd fb32 	bl	800c12c <__assert_func>
 800eac8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eacc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ead0:	bb35      	cbnz	r5, 800eb20 <__d2b+0x7c>
 800ead2:	2e00      	cmp	r6, #0
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	d028      	beq.n	800eb2a <__d2b+0x86>
 800ead8:	4668      	mov	r0, sp
 800eada:	9600      	str	r6, [sp, #0]
 800eadc:	f7ff fd8c 	bl	800e5f8 <__lo0bits>
 800eae0:	9900      	ldr	r1, [sp, #0]
 800eae2:	b300      	cbz	r0, 800eb26 <__d2b+0x82>
 800eae4:	9a01      	ldr	r2, [sp, #4]
 800eae6:	f1c0 0320 	rsb	r3, r0, #32
 800eaea:	fa02 f303 	lsl.w	r3, r2, r3
 800eaee:	430b      	orrs	r3, r1
 800eaf0:	40c2      	lsrs	r2, r0
 800eaf2:	6163      	str	r3, [r4, #20]
 800eaf4:	9201      	str	r2, [sp, #4]
 800eaf6:	9b01      	ldr	r3, [sp, #4]
 800eaf8:	61a3      	str	r3, [r4, #24]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bf14      	ite	ne
 800eafe:	2202      	movne	r2, #2
 800eb00:	2201      	moveq	r2, #1
 800eb02:	6122      	str	r2, [r4, #16]
 800eb04:	b1d5      	cbz	r5, 800eb3c <__d2b+0x98>
 800eb06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb0a:	4405      	add	r5, r0
 800eb0c:	f8c9 5000 	str.w	r5, [r9]
 800eb10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb14:	f8c8 0000 	str.w	r0, [r8]
 800eb18:	4620      	mov	r0, r4
 800eb1a:	b003      	add	sp, #12
 800eb1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb24:	e7d5      	b.n	800ead2 <__d2b+0x2e>
 800eb26:	6161      	str	r1, [r4, #20]
 800eb28:	e7e5      	b.n	800eaf6 <__d2b+0x52>
 800eb2a:	a801      	add	r0, sp, #4
 800eb2c:	f7ff fd64 	bl	800e5f8 <__lo0bits>
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	6163      	str	r3, [r4, #20]
 800eb34:	2201      	movs	r2, #1
 800eb36:	6122      	str	r2, [r4, #16]
 800eb38:	3020      	adds	r0, #32
 800eb3a:	e7e3      	b.n	800eb04 <__d2b+0x60>
 800eb3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb44:	f8c9 0000 	str.w	r0, [r9]
 800eb48:	6918      	ldr	r0, [r3, #16]
 800eb4a:	f7ff fd35 	bl	800e5b8 <__hi0bits>
 800eb4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb52:	e7df      	b.n	800eb14 <__d2b+0x70>
 800eb54:	08010334 	.word	0x08010334
 800eb58:	08010345 	.word	0x08010345

0800eb5c <_calloc_r>:
 800eb5c:	b513      	push	{r0, r1, r4, lr}
 800eb5e:	434a      	muls	r2, r1
 800eb60:	4611      	mov	r1, r2
 800eb62:	9201      	str	r2, [sp, #4]
 800eb64:	f7fd fc66 	bl	800c434 <_malloc_r>
 800eb68:	4604      	mov	r4, r0
 800eb6a:	b118      	cbz	r0, 800eb74 <_calloc_r+0x18>
 800eb6c:	9a01      	ldr	r2, [sp, #4]
 800eb6e:	2100      	movs	r1, #0
 800eb70:	f7fd fc57 	bl	800c422 <memset>
 800eb74:	4620      	mov	r0, r4
 800eb76:	b002      	add	sp, #8
 800eb78:	bd10      	pop	{r4, pc}
	...

0800eb7c <_free_r>:
 800eb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb7e:	2900      	cmp	r1, #0
 800eb80:	d048      	beq.n	800ec14 <_free_r+0x98>
 800eb82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb86:	9001      	str	r0, [sp, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb8e:	bfb8      	it	lt
 800eb90:	18e4      	addlt	r4, r4, r3
 800eb92:	f7ff fc59 	bl	800e448 <__malloc_lock>
 800eb96:	4a20      	ldr	r2, [pc, #128]	; (800ec18 <_free_r+0x9c>)
 800eb98:	9801      	ldr	r0, [sp, #4]
 800eb9a:	6813      	ldr	r3, [r2, #0]
 800eb9c:	4615      	mov	r5, r2
 800eb9e:	b933      	cbnz	r3, 800ebae <_free_r+0x32>
 800eba0:	6063      	str	r3, [r4, #4]
 800eba2:	6014      	str	r4, [r2, #0]
 800eba4:	b003      	add	sp, #12
 800eba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebaa:	f7ff bc53 	b.w	800e454 <__malloc_unlock>
 800ebae:	42a3      	cmp	r3, r4
 800ebb0:	d90b      	bls.n	800ebca <_free_r+0x4e>
 800ebb2:	6821      	ldr	r1, [r4, #0]
 800ebb4:	1862      	adds	r2, r4, r1
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	bf04      	itt	eq
 800ebba:	681a      	ldreq	r2, [r3, #0]
 800ebbc:	685b      	ldreq	r3, [r3, #4]
 800ebbe:	6063      	str	r3, [r4, #4]
 800ebc0:	bf04      	itt	eq
 800ebc2:	1852      	addeq	r2, r2, r1
 800ebc4:	6022      	streq	r2, [r4, #0]
 800ebc6:	602c      	str	r4, [r5, #0]
 800ebc8:	e7ec      	b.n	800eba4 <_free_r+0x28>
 800ebca:	461a      	mov	r2, r3
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	b10b      	cbz	r3, 800ebd4 <_free_r+0x58>
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	d9fa      	bls.n	800ebca <_free_r+0x4e>
 800ebd4:	6811      	ldr	r1, [r2, #0]
 800ebd6:	1855      	adds	r5, r2, r1
 800ebd8:	42a5      	cmp	r5, r4
 800ebda:	d10b      	bne.n	800ebf4 <_free_r+0x78>
 800ebdc:	6824      	ldr	r4, [r4, #0]
 800ebde:	4421      	add	r1, r4
 800ebe0:	1854      	adds	r4, r2, r1
 800ebe2:	42a3      	cmp	r3, r4
 800ebe4:	6011      	str	r1, [r2, #0]
 800ebe6:	d1dd      	bne.n	800eba4 <_free_r+0x28>
 800ebe8:	681c      	ldr	r4, [r3, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	6053      	str	r3, [r2, #4]
 800ebee:	4421      	add	r1, r4
 800ebf0:	6011      	str	r1, [r2, #0]
 800ebf2:	e7d7      	b.n	800eba4 <_free_r+0x28>
 800ebf4:	d902      	bls.n	800ebfc <_free_r+0x80>
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	6003      	str	r3, [r0, #0]
 800ebfa:	e7d3      	b.n	800eba4 <_free_r+0x28>
 800ebfc:	6825      	ldr	r5, [r4, #0]
 800ebfe:	1961      	adds	r1, r4, r5
 800ec00:	428b      	cmp	r3, r1
 800ec02:	bf04      	itt	eq
 800ec04:	6819      	ldreq	r1, [r3, #0]
 800ec06:	685b      	ldreq	r3, [r3, #4]
 800ec08:	6063      	str	r3, [r4, #4]
 800ec0a:	bf04      	itt	eq
 800ec0c:	1949      	addeq	r1, r1, r5
 800ec0e:	6021      	streq	r1, [r4, #0]
 800ec10:	6054      	str	r4, [r2, #4]
 800ec12:	e7c7      	b.n	800eba4 <_free_r+0x28>
 800ec14:	b003      	add	sp, #12
 800ec16:	bd30      	pop	{r4, r5, pc}
 800ec18:	200080ac 	.word	0x200080ac

0800ec1c <_realloc_r>:
 800ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1e:	4607      	mov	r7, r0
 800ec20:	4614      	mov	r4, r2
 800ec22:	460e      	mov	r6, r1
 800ec24:	b921      	cbnz	r1, 800ec30 <_realloc_r+0x14>
 800ec26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	f7fd bc02 	b.w	800c434 <_malloc_r>
 800ec30:	b922      	cbnz	r2, 800ec3c <_realloc_r+0x20>
 800ec32:	f7ff ffa3 	bl	800eb7c <_free_r>
 800ec36:	4625      	mov	r5, r4
 800ec38:	4628      	mov	r0, r5
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec3c:	f000 f9fa 	bl	800f034 <_malloc_usable_size_r>
 800ec40:	42a0      	cmp	r0, r4
 800ec42:	d20f      	bcs.n	800ec64 <_realloc_r+0x48>
 800ec44:	4621      	mov	r1, r4
 800ec46:	4638      	mov	r0, r7
 800ec48:	f7fd fbf4 	bl	800c434 <_malloc_r>
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d0f2      	beq.n	800ec38 <_realloc_r+0x1c>
 800ec52:	4631      	mov	r1, r6
 800ec54:	4622      	mov	r2, r4
 800ec56:	f7fd fbbc 	bl	800c3d2 <memcpy>
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff ff8d 	bl	800eb7c <_free_r>
 800ec62:	e7e9      	b.n	800ec38 <_realloc_r+0x1c>
 800ec64:	4635      	mov	r5, r6
 800ec66:	e7e7      	b.n	800ec38 <_realloc_r+0x1c>

0800ec68 <__ssputs_r>:
 800ec68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec6c:	688e      	ldr	r6, [r1, #8]
 800ec6e:	429e      	cmp	r6, r3
 800ec70:	4682      	mov	sl, r0
 800ec72:	460c      	mov	r4, r1
 800ec74:	4690      	mov	r8, r2
 800ec76:	461f      	mov	r7, r3
 800ec78:	d838      	bhi.n	800ecec <__ssputs_r+0x84>
 800ec7a:	898a      	ldrh	r2, [r1, #12]
 800ec7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec80:	d032      	beq.n	800ece8 <__ssputs_r+0x80>
 800ec82:	6825      	ldr	r5, [r4, #0]
 800ec84:	6909      	ldr	r1, [r1, #16]
 800ec86:	eba5 0901 	sub.w	r9, r5, r1
 800ec8a:	6965      	ldr	r5, [r4, #20]
 800ec8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec94:	3301      	adds	r3, #1
 800ec96:	444b      	add	r3, r9
 800ec98:	106d      	asrs	r5, r5, #1
 800ec9a:	429d      	cmp	r5, r3
 800ec9c:	bf38      	it	cc
 800ec9e:	461d      	movcc	r5, r3
 800eca0:	0553      	lsls	r3, r2, #21
 800eca2:	d531      	bpl.n	800ed08 <__ssputs_r+0xa0>
 800eca4:	4629      	mov	r1, r5
 800eca6:	f7fd fbc5 	bl	800c434 <_malloc_r>
 800ecaa:	4606      	mov	r6, r0
 800ecac:	b950      	cbnz	r0, 800ecc4 <__ssputs_r+0x5c>
 800ecae:	230c      	movs	r3, #12
 800ecb0:	f8ca 3000 	str.w	r3, [sl]
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecba:	81a3      	strh	r3, [r4, #12]
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc4:	6921      	ldr	r1, [r4, #16]
 800ecc6:	464a      	mov	r2, r9
 800ecc8:	f7fd fb83 	bl	800c3d2 <memcpy>
 800eccc:	89a3      	ldrh	r3, [r4, #12]
 800ecce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecd6:	81a3      	strh	r3, [r4, #12]
 800ecd8:	6126      	str	r6, [r4, #16]
 800ecda:	6165      	str	r5, [r4, #20]
 800ecdc:	444e      	add	r6, r9
 800ecde:	eba5 0509 	sub.w	r5, r5, r9
 800ece2:	6026      	str	r6, [r4, #0]
 800ece4:	60a5      	str	r5, [r4, #8]
 800ece6:	463e      	mov	r6, r7
 800ece8:	42be      	cmp	r6, r7
 800ecea:	d900      	bls.n	800ecee <__ssputs_r+0x86>
 800ecec:	463e      	mov	r6, r7
 800ecee:	4632      	mov	r2, r6
 800ecf0:	6820      	ldr	r0, [r4, #0]
 800ecf2:	4641      	mov	r1, r8
 800ecf4:	f7fd fb7b 	bl	800c3ee <memmove>
 800ecf8:	68a3      	ldr	r3, [r4, #8]
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	1b9b      	subs	r3, r3, r6
 800ecfe:	4432      	add	r2, r6
 800ed00:	60a3      	str	r3, [r4, #8]
 800ed02:	6022      	str	r2, [r4, #0]
 800ed04:	2000      	movs	r0, #0
 800ed06:	e7db      	b.n	800ecc0 <__ssputs_r+0x58>
 800ed08:	462a      	mov	r2, r5
 800ed0a:	f7ff ff87 	bl	800ec1c <_realloc_r>
 800ed0e:	4606      	mov	r6, r0
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d1e1      	bne.n	800ecd8 <__ssputs_r+0x70>
 800ed14:	6921      	ldr	r1, [r4, #16]
 800ed16:	4650      	mov	r0, sl
 800ed18:	f7ff ff30 	bl	800eb7c <_free_r>
 800ed1c:	e7c7      	b.n	800ecae <__ssputs_r+0x46>
	...

0800ed20 <_svfiprintf_r>:
 800ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed24:	4698      	mov	r8, r3
 800ed26:	898b      	ldrh	r3, [r1, #12]
 800ed28:	061b      	lsls	r3, r3, #24
 800ed2a:	b09d      	sub	sp, #116	; 0x74
 800ed2c:	4607      	mov	r7, r0
 800ed2e:	460d      	mov	r5, r1
 800ed30:	4614      	mov	r4, r2
 800ed32:	d50e      	bpl.n	800ed52 <_svfiprintf_r+0x32>
 800ed34:	690b      	ldr	r3, [r1, #16]
 800ed36:	b963      	cbnz	r3, 800ed52 <_svfiprintf_r+0x32>
 800ed38:	2140      	movs	r1, #64	; 0x40
 800ed3a:	f7fd fb7b 	bl	800c434 <_malloc_r>
 800ed3e:	6028      	str	r0, [r5, #0]
 800ed40:	6128      	str	r0, [r5, #16]
 800ed42:	b920      	cbnz	r0, 800ed4e <_svfiprintf_r+0x2e>
 800ed44:	230c      	movs	r3, #12
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4c:	e0d1      	b.n	800eef2 <_svfiprintf_r+0x1d2>
 800ed4e:	2340      	movs	r3, #64	; 0x40
 800ed50:	616b      	str	r3, [r5, #20]
 800ed52:	2300      	movs	r3, #0
 800ed54:	9309      	str	r3, [sp, #36]	; 0x24
 800ed56:	2320      	movs	r3, #32
 800ed58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed60:	2330      	movs	r3, #48	; 0x30
 800ed62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef0c <_svfiprintf_r+0x1ec>
 800ed66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed6a:	f04f 0901 	mov.w	r9, #1
 800ed6e:	4623      	mov	r3, r4
 800ed70:	469a      	mov	sl, r3
 800ed72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed76:	b10a      	cbz	r2, 800ed7c <_svfiprintf_r+0x5c>
 800ed78:	2a25      	cmp	r2, #37	; 0x25
 800ed7a:	d1f9      	bne.n	800ed70 <_svfiprintf_r+0x50>
 800ed7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed80:	d00b      	beq.n	800ed9a <_svfiprintf_r+0x7a>
 800ed82:	465b      	mov	r3, fp
 800ed84:	4622      	mov	r2, r4
 800ed86:	4629      	mov	r1, r5
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f7ff ff6d 	bl	800ec68 <__ssputs_r>
 800ed8e:	3001      	adds	r0, #1
 800ed90:	f000 80aa 	beq.w	800eee8 <_svfiprintf_r+0x1c8>
 800ed94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed96:	445a      	add	r2, fp
 800ed98:	9209      	str	r2, [sp, #36]	; 0x24
 800ed9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 80a2 	beq.w	800eee8 <_svfiprintf_r+0x1c8>
 800eda4:	2300      	movs	r3, #0
 800eda6:	f04f 32ff 	mov.w	r2, #4294967295
 800edaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edae:	f10a 0a01 	add.w	sl, sl, #1
 800edb2:	9304      	str	r3, [sp, #16]
 800edb4:	9307      	str	r3, [sp, #28]
 800edb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edba:	931a      	str	r3, [sp, #104]	; 0x68
 800edbc:	4654      	mov	r4, sl
 800edbe:	2205      	movs	r2, #5
 800edc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edc4:	4851      	ldr	r0, [pc, #324]	; (800ef0c <_svfiprintf_r+0x1ec>)
 800edc6:	f7f1 fa0b 	bl	80001e0 <memchr>
 800edca:	9a04      	ldr	r2, [sp, #16]
 800edcc:	b9d8      	cbnz	r0, 800ee06 <_svfiprintf_r+0xe6>
 800edce:	06d0      	lsls	r0, r2, #27
 800edd0:	bf44      	itt	mi
 800edd2:	2320      	movmi	r3, #32
 800edd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edd8:	0711      	lsls	r1, r2, #28
 800edda:	bf44      	itt	mi
 800eddc:	232b      	movmi	r3, #43	; 0x2b
 800edde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ede2:	f89a 3000 	ldrb.w	r3, [sl]
 800ede6:	2b2a      	cmp	r3, #42	; 0x2a
 800ede8:	d015      	beq.n	800ee16 <_svfiprintf_r+0xf6>
 800edea:	9a07      	ldr	r2, [sp, #28]
 800edec:	4654      	mov	r4, sl
 800edee:	2000      	movs	r0, #0
 800edf0:	f04f 0c0a 	mov.w	ip, #10
 800edf4:	4621      	mov	r1, r4
 800edf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edfa:	3b30      	subs	r3, #48	; 0x30
 800edfc:	2b09      	cmp	r3, #9
 800edfe:	d94e      	bls.n	800ee9e <_svfiprintf_r+0x17e>
 800ee00:	b1b0      	cbz	r0, 800ee30 <_svfiprintf_r+0x110>
 800ee02:	9207      	str	r2, [sp, #28]
 800ee04:	e014      	b.n	800ee30 <_svfiprintf_r+0x110>
 800ee06:	eba0 0308 	sub.w	r3, r0, r8
 800ee0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	9304      	str	r3, [sp, #16]
 800ee12:	46a2      	mov	sl, r4
 800ee14:	e7d2      	b.n	800edbc <_svfiprintf_r+0x9c>
 800ee16:	9b03      	ldr	r3, [sp, #12]
 800ee18:	1d19      	adds	r1, r3, #4
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	9103      	str	r1, [sp, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	bfbb      	ittet	lt
 800ee22:	425b      	neglt	r3, r3
 800ee24:	f042 0202 	orrlt.w	r2, r2, #2
 800ee28:	9307      	strge	r3, [sp, #28]
 800ee2a:	9307      	strlt	r3, [sp, #28]
 800ee2c:	bfb8      	it	lt
 800ee2e:	9204      	strlt	r2, [sp, #16]
 800ee30:	7823      	ldrb	r3, [r4, #0]
 800ee32:	2b2e      	cmp	r3, #46	; 0x2e
 800ee34:	d10c      	bne.n	800ee50 <_svfiprintf_r+0x130>
 800ee36:	7863      	ldrb	r3, [r4, #1]
 800ee38:	2b2a      	cmp	r3, #42	; 0x2a
 800ee3a:	d135      	bne.n	800eea8 <_svfiprintf_r+0x188>
 800ee3c:	9b03      	ldr	r3, [sp, #12]
 800ee3e:	1d1a      	adds	r2, r3, #4
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	9203      	str	r2, [sp, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	bfb8      	it	lt
 800ee48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee4c:	3402      	adds	r4, #2
 800ee4e:	9305      	str	r3, [sp, #20]
 800ee50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef1c <_svfiprintf_r+0x1fc>
 800ee54:	7821      	ldrb	r1, [r4, #0]
 800ee56:	2203      	movs	r2, #3
 800ee58:	4650      	mov	r0, sl
 800ee5a:	f7f1 f9c1 	bl	80001e0 <memchr>
 800ee5e:	b140      	cbz	r0, 800ee72 <_svfiprintf_r+0x152>
 800ee60:	2340      	movs	r3, #64	; 0x40
 800ee62:	eba0 000a 	sub.w	r0, r0, sl
 800ee66:	fa03 f000 	lsl.w	r0, r3, r0
 800ee6a:	9b04      	ldr	r3, [sp, #16]
 800ee6c:	4303      	orrs	r3, r0
 800ee6e:	3401      	adds	r4, #1
 800ee70:	9304      	str	r3, [sp, #16]
 800ee72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee76:	4826      	ldr	r0, [pc, #152]	; (800ef10 <_svfiprintf_r+0x1f0>)
 800ee78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee7c:	2206      	movs	r2, #6
 800ee7e:	f7f1 f9af 	bl	80001e0 <memchr>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d038      	beq.n	800eef8 <_svfiprintf_r+0x1d8>
 800ee86:	4b23      	ldr	r3, [pc, #140]	; (800ef14 <_svfiprintf_r+0x1f4>)
 800ee88:	bb1b      	cbnz	r3, 800eed2 <_svfiprintf_r+0x1b2>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	3307      	adds	r3, #7
 800ee8e:	f023 0307 	bic.w	r3, r3, #7
 800ee92:	3308      	adds	r3, #8
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee98:	4433      	add	r3, r6
 800ee9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9c:	e767      	b.n	800ed6e <_svfiprintf_r+0x4e>
 800ee9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eea2:	460c      	mov	r4, r1
 800eea4:	2001      	movs	r0, #1
 800eea6:	e7a5      	b.n	800edf4 <_svfiprintf_r+0xd4>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	3401      	adds	r4, #1
 800eeac:	9305      	str	r3, [sp, #20]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f04f 0c0a 	mov.w	ip, #10
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeba:	3a30      	subs	r2, #48	; 0x30
 800eebc:	2a09      	cmp	r2, #9
 800eebe:	d903      	bls.n	800eec8 <_svfiprintf_r+0x1a8>
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d0c5      	beq.n	800ee50 <_svfiprintf_r+0x130>
 800eec4:	9105      	str	r1, [sp, #20]
 800eec6:	e7c3      	b.n	800ee50 <_svfiprintf_r+0x130>
 800eec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eecc:	4604      	mov	r4, r0
 800eece:	2301      	movs	r3, #1
 800eed0:	e7f0      	b.n	800eeb4 <_svfiprintf_r+0x194>
 800eed2:	ab03      	add	r3, sp, #12
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	462a      	mov	r2, r5
 800eed8:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <_svfiprintf_r+0x1f8>)
 800eeda:	a904      	add	r1, sp, #16
 800eedc:	4638      	mov	r0, r7
 800eede:	f7fd fcfd 	bl	800c8dc <_printf_float>
 800eee2:	1c42      	adds	r2, r0, #1
 800eee4:	4606      	mov	r6, r0
 800eee6:	d1d6      	bne.n	800ee96 <_svfiprintf_r+0x176>
 800eee8:	89ab      	ldrh	r3, [r5, #12]
 800eeea:	065b      	lsls	r3, r3, #25
 800eeec:	f53f af2c 	bmi.w	800ed48 <_svfiprintf_r+0x28>
 800eef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eef2:	b01d      	add	sp, #116	; 0x74
 800eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef8:	ab03      	add	r3, sp, #12
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	462a      	mov	r2, r5
 800eefe:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <_svfiprintf_r+0x1f8>)
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	4638      	mov	r0, r7
 800ef04:	f7fd ff8e 	bl	800ce24 <_printf_i>
 800ef08:	e7eb      	b.n	800eee2 <_svfiprintf_r+0x1c2>
 800ef0a:	bf00      	nop
 800ef0c:	0801026c 	.word	0x0801026c
 800ef10:	08010276 	.word	0x08010276
 800ef14:	0800c8dd 	.word	0x0800c8dd
 800ef18:	0800ec69 	.word	0x0800ec69
 800ef1c:	08010272 	.word	0x08010272

0800ef20 <_read_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d07      	ldr	r5, [pc, #28]	; (800ef40 <_read_r+0x20>)
 800ef24:	4604      	mov	r4, r0
 800ef26:	4608      	mov	r0, r1
 800ef28:	4611      	mov	r1, r2
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	602a      	str	r2, [r5, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f7f3 f9be 	bl	80022b0 <_read>
 800ef34:	1c43      	adds	r3, r0, #1
 800ef36:	d102      	bne.n	800ef3e <_read_r+0x1e>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	b103      	cbz	r3, 800ef3e <_read_r+0x1e>
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	20008b80 	.word	0x20008b80

0800ef44 <_raise_r>:
 800ef44:	291f      	cmp	r1, #31
 800ef46:	b538      	push	{r3, r4, r5, lr}
 800ef48:	4604      	mov	r4, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	d904      	bls.n	800ef58 <_raise_r+0x14>
 800ef4e:	2316      	movs	r3, #22
 800ef50:	6003      	str	r3, [r0, #0]
 800ef52:	f04f 30ff 	mov.w	r0, #4294967295
 800ef56:	bd38      	pop	{r3, r4, r5, pc}
 800ef58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef5a:	b112      	cbz	r2, 800ef62 <_raise_r+0x1e>
 800ef5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef60:	b94b      	cbnz	r3, 800ef76 <_raise_r+0x32>
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 f830 	bl	800efc8 <_getpid_r>
 800ef68:	462a      	mov	r2, r5
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef72:	f000 b817 	b.w	800efa4 <_kill_r>
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d00a      	beq.n	800ef90 <_raise_r+0x4c>
 800ef7a:	1c59      	adds	r1, r3, #1
 800ef7c:	d103      	bne.n	800ef86 <_raise_r+0x42>
 800ef7e:	2316      	movs	r3, #22
 800ef80:	6003      	str	r3, [r0, #0]
 800ef82:	2001      	movs	r0, #1
 800ef84:	e7e7      	b.n	800ef56 <_raise_r+0x12>
 800ef86:	2400      	movs	r4, #0
 800ef88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	4798      	blx	r3
 800ef90:	2000      	movs	r0, #0
 800ef92:	e7e0      	b.n	800ef56 <_raise_r+0x12>

0800ef94 <raise>:
 800ef94:	4b02      	ldr	r3, [pc, #8]	; (800efa0 <raise+0xc>)
 800ef96:	4601      	mov	r1, r0
 800ef98:	6818      	ldr	r0, [r3, #0]
 800ef9a:	f7ff bfd3 	b.w	800ef44 <_raise_r>
 800ef9e:	bf00      	nop
 800efa0:	20000044 	.word	0x20000044

0800efa4 <_kill_r>:
 800efa4:	b538      	push	{r3, r4, r5, lr}
 800efa6:	4d07      	ldr	r5, [pc, #28]	; (800efc4 <_kill_r+0x20>)
 800efa8:	2300      	movs	r3, #0
 800efaa:	4604      	mov	r4, r0
 800efac:	4608      	mov	r0, r1
 800efae:	4611      	mov	r1, r2
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	f7f3 f963 	bl	800227c <_kill>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	d102      	bne.n	800efc0 <_kill_r+0x1c>
 800efba:	682b      	ldr	r3, [r5, #0]
 800efbc:	b103      	cbz	r3, 800efc0 <_kill_r+0x1c>
 800efbe:	6023      	str	r3, [r4, #0]
 800efc0:	bd38      	pop	{r3, r4, r5, pc}
 800efc2:	bf00      	nop
 800efc4:	20008b80 	.word	0x20008b80

0800efc8 <_getpid_r>:
 800efc8:	f7f3 b950 	b.w	800226c <_getpid>

0800efcc <_fstat_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4d07      	ldr	r5, [pc, #28]	; (800efec <_fstat_r+0x20>)
 800efd0:	2300      	movs	r3, #0
 800efd2:	4604      	mov	r4, r0
 800efd4:	4608      	mov	r0, r1
 800efd6:	4611      	mov	r1, r2
 800efd8:	602b      	str	r3, [r5, #0]
 800efda:	f7f3 f9ae 	bl	800233a <_fstat>
 800efde:	1c43      	adds	r3, r0, #1
 800efe0:	d102      	bne.n	800efe8 <_fstat_r+0x1c>
 800efe2:	682b      	ldr	r3, [r5, #0]
 800efe4:	b103      	cbz	r3, 800efe8 <_fstat_r+0x1c>
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	bd38      	pop	{r3, r4, r5, pc}
 800efea:	bf00      	nop
 800efec:	20008b80 	.word	0x20008b80

0800eff0 <_isatty_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4d06      	ldr	r5, [pc, #24]	; (800f00c <_isatty_r+0x1c>)
 800eff4:	2300      	movs	r3, #0
 800eff6:	4604      	mov	r4, r0
 800eff8:	4608      	mov	r0, r1
 800effa:	602b      	str	r3, [r5, #0]
 800effc:	f7f3 f9ad 	bl	800235a <_isatty>
 800f000:	1c43      	adds	r3, r0, #1
 800f002:	d102      	bne.n	800f00a <_isatty_r+0x1a>
 800f004:	682b      	ldr	r3, [r5, #0]
 800f006:	b103      	cbz	r3, 800f00a <_isatty_r+0x1a>
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	bd38      	pop	{r3, r4, r5, pc}
 800f00c:	20008b80 	.word	0x20008b80

0800f010 <__ascii_mbtowc>:
 800f010:	b082      	sub	sp, #8
 800f012:	b901      	cbnz	r1, 800f016 <__ascii_mbtowc+0x6>
 800f014:	a901      	add	r1, sp, #4
 800f016:	b142      	cbz	r2, 800f02a <__ascii_mbtowc+0x1a>
 800f018:	b14b      	cbz	r3, 800f02e <__ascii_mbtowc+0x1e>
 800f01a:	7813      	ldrb	r3, [r2, #0]
 800f01c:	600b      	str	r3, [r1, #0]
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	1e10      	subs	r0, r2, #0
 800f022:	bf18      	it	ne
 800f024:	2001      	movne	r0, #1
 800f026:	b002      	add	sp, #8
 800f028:	4770      	bx	lr
 800f02a:	4610      	mov	r0, r2
 800f02c:	e7fb      	b.n	800f026 <__ascii_mbtowc+0x16>
 800f02e:	f06f 0001 	mvn.w	r0, #1
 800f032:	e7f8      	b.n	800f026 <__ascii_mbtowc+0x16>

0800f034 <_malloc_usable_size_r>:
 800f034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f038:	1f18      	subs	r0, r3, #4
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	bfbc      	itt	lt
 800f03e:	580b      	ldrlt	r3, [r1, r0]
 800f040:	18c0      	addlt	r0, r0, r3
 800f042:	4770      	bx	lr

0800f044 <__ascii_wctomb>:
 800f044:	b149      	cbz	r1, 800f05a <__ascii_wctomb+0x16>
 800f046:	2aff      	cmp	r2, #255	; 0xff
 800f048:	bf85      	ittet	hi
 800f04a:	238a      	movhi	r3, #138	; 0x8a
 800f04c:	6003      	strhi	r3, [r0, #0]
 800f04e:	700a      	strbls	r2, [r1, #0]
 800f050:	f04f 30ff 	movhi.w	r0, #4294967295
 800f054:	bf98      	it	ls
 800f056:	2001      	movls	r0, #1
 800f058:	4770      	bx	lr
 800f05a:	4608      	mov	r0, r1
 800f05c:	4770      	bx	lr
	...

0800f060 <_init>:
 800f060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f062:	bf00      	nop
 800f064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f066:	bc08      	pop	{r3}
 800f068:	469e      	mov	lr, r3
 800f06a:	4770      	bx	lr

0800f06c <_fini>:
 800f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06e:	bf00      	nop
 800f070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f072:	bc08      	pop	{r3}
 800f074:	469e      	mov	lr, r3
 800f076:	4770      	bx	lr
