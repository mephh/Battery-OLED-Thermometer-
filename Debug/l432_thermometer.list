
l432_thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d8  0800b570  0800b570  0001b570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c848  0800c848  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c850  0800c850  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c850  0800c850  0001c850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083dc  20000204  0800ca5c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085e0  0800ca5c  000285e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b730  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f6  00000000  00000000  0004b964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00050d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a38  00000000  00000000  000529c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026498  00000000  00000000  00054400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238b9  00000000  00000000  0007a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf77  00000000  00000000  0009e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001790c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008708  00000000  00000000  0017911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b558 	.word	0x0800b558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800b558 	.word	0x0800b558

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
	for (int var = 0; var < 20; ++var) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	e014      	b.n	8000eda <vApplicationStackOverflowHook+0x3a>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <vApplicationStackOverflowHook+0x4c>)
 8000eb6:	f001 fd3d 	bl	8002934 <HAL_GPIO_WritePin>
					osDelay(900);
 8000eba:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000ebe:	f005 f80b 	bl	8005ed8 <osDelay>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <vApplicationStackOverflowHook+0x4c>)
 8000ec8:	f001 fd34 	bl	8002934 <HAL_GPIO_WritePin>
					osDelay(900);
 8000ecc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000ed0:	f005 f802 	bl	8005ed8 <osDelay>
	for (int var = 0; var < 20; ++var) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b13      	cmp	r3, #19
 8000ede:	dde7      	ble.n	8000eb0 <vApplicationStackOverflowHook+0x10>
				}
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	48000400 	.word	0x48000400

08000ef0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f00:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationGetIdleTaskMemory+0x30>)
 8000f06:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000220 	.word	0x20000220
 8000f20:	200002d4 	.word	0x200002d4

08000f24 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b09e      	sub	sp, #120	; 0x78
 8000f28:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of i2cSem */
  osSemaphoreDef(i2cSem);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	673b      	str	r3, [r7, #112]	; 0x70
 8000f2e:	2300      	movs	r3, #0
 8000f30:	677b      	str	r3, [r7, #116]	; 0x74
  i2cSemHandle = osSemaphoreCreate(osSemaphore(i2cSem), 1);
 8000f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f36:	2101      	movs	r1, #1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ffe1 	bl	8005f00 <osSemaphoreCreate>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <MX_FREERTOS_Init+0xbc>)
 8000f42:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitDevicesTask */
  osThreadDef(InitDevicesTask, InitDevices_task, osPriorityRealtime, 0, 128);
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_FREERTOS_Init+0xc0>)
 8000f46:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitDevicesTaskHandle = osThreadCreate(osThread(InitDevicesTask), NULL);
 8000f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 ff62 	bl	8005e28 <osThreadCreate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <MX_FREERTOS_Init+0xc4>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadSHTTask */
  osThreadDef(ReadSHTTask, ReadSHT_task, osPriorityLow, 0, 128);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_FREERTOS_Init+0xc8>)
 8000f6c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSHTTaskHandle = osThreadCreate(osThread(ReadSHTTask), NULL);
 8000f7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 ff4f 	bl	8005e28 <osThreadCreate>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <MX_FREERTOS_Init+0xcc>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of DisplayDataTask */
  osThreadDef(DisplayDataTask, DisplayData_task, osPriorityHigh, 0, 512);
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_FREERTOS_Init+0xd0>)
 8000f92:	f107 041c 	add.w	r4, r7, #28
 8000f96:	461d      	mov	r5, r3
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayDataTaskHandle = osThreadCreate(osThread(DisplayDataTask), NULL);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 ff3c 	bl	8005e28 <osThreadCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <MX_FREERTOS_Init+0xd4>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* definition and creation of StoreSD */
  osThreadDef(StoreSD, StoreSD_task, osPriorityLow, 0, 256);
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_FREERTOS_Init+0xd8>)
 8000fb8:	463c      	mov	r4, r7
 8000fba:	461d      	mov	r5, r3
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StoreSDHandle = osThreadCreate(osThread(StoreSD), NULL);
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 ff2b 	bl	8005e28 <osThreadCreate>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <MX_FREERTOS_Init+0xdc>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fd8:	bf00      	nop
 8000fda:	3778      	adds	r7, #120	; 0x78
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	20007f90 	.word	0x20007f90
 8000fe4:	0800b5a4 	.word	0x0800b5a4
 8000fe8:	20007f80 	.word	0x20007f80
 8000fec:	0800b5c0 	.word	0x0800b5c0
 8000ff0:	20007f8c 	.word	0x20007f8c
 8000ff4:	0800b5dc 	.word	0x0800b5dc
 8000ff8:	20007f84 	.word	0x20007f84
 8000ffc:	0800b5f8 	.word	0x0800b5f8
 8001000:	20007f88 	.word	0x20007f88

08001004 <InitDevices_task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitDevices_task */
void InitDevices_task(void const * argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InitDevices_task */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2108      	movs	r1, #8
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <InitDevices_task+0x6c>)
 8001012:	f001 fc8f 	bl	8002934 <HAL_GPIO_WritePin>
		ssd1306_Init();
 8001016:	f000 fcfb 	bl	8001a10 <ssd1306_Init>
//		 Create the handle for the sensor.
		if (!sht3x_init(&handle)) {
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <InitDevices_task+0x70>)
 800101c:	f000 fb7e 	bl	800171c <sht3x_init>
 8001020:	4603      	mov	r3, r0
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01b      	beq.n	8001064 <InitDevices_task+0x60>
		    printf("SHT3x access failed.\n\r");
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <InitDevices_task+0x74>)
 800102e:	f008 fad7 	bl	80095e0 <iprintf>
		    for (int var = 0; var < 50; ++var) {
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e012      	b.n	800105e <InitDevices_task+0x5a>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2108      	movs	r1, #8
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <InitDevices_task+0x6c>)
 800103e:	f001 fc79 	bl	8002934 <HAL_GPIO_WritePin>
				osDelay(50);
 8001042:	2032      	movs	r0, #50	; 0x32
 8001044:	f004 ff48 	bl	8005ed8 <osDelay>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <InitDevices_task+0x6c>)
 800104e:	f001 fc71 	bl	8002934 <HAL_GPIO_WritePin>
				osDelay(50);
 8001052:	2032      	movs	r0, #50	; 0x32
 8001054:	f004 ff40 	bl	8005ed8 <osDelay>
		    for (int var = 0; var < 50; ++var) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b31      	cmp	r3, #49	; 0x31
 8001062:	dde9      	ble.n	8001038 <InitDevices_task+0x34>
			}
		}
//		ssd1306_TestAll();
//		ssd1306_Fill(0x00);
//		osThreadSuspend(InitDevicesTaskHandle);
		osThreadTerminate(InitDevicesTaskHandle);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <InitDevices_task+0x78>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f004 ff29 	bl	8005ec0 <osThreadTerminate>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800106e:	e7cd      	b.n	800100c <InitDevices_task+0x8>
 8001070:	48000400 	.word	0x48000400
 8001074:	20000000 	.word	0x20000000
 8001078:	0800b614 	.word	0x0800b614
 800107c:	20007f80 	.word	0x20007f80

08001080 <ReadSHT_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReadSHT_task */
void ReadSHT_task(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadSHT_task */

	/* Infinite loop */
	for (;;) {
		//read sensor data and store values
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <ReadSHT_task+0x34>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	4618      	mov	r0, r3
 8001092:	f004 ff67 	bl	8005f64 <osSemaphoreWait>
		sht3x_read_temperature_and_humidity(&handle, &temp, &hum);
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <ReadSHT_task+0x38>)
 8001098:	4908      	ldr	r1, [pc, #32]	; (80010bc <ReadSHT_task+0x3c>)
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <ReadSHT_task+0x40>)
 800109c:	f000 fb7e 	bl	800179c <sht3x_read_temperature_and_humidity>
		osSemaphoreRelease(i2cSemHandle);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <ReadSHT_task+0x34>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 ffab 	bl	8006000 <osSemaphoreRelease>
		osDelay(3000);
 80010aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010ae:	f004 ff13 	bl	8005ed8 <osDelay>
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 80010b2:	e7e9      	b.n	8001088 <ReadSHT_task+0x8>
 80010b4:	20007f90 	.word	0x20007f90
 80010b8:	20007f78 	.word	0x20007f78
 80010bc:	20007f7c 	.word	0x20007f7c
 80010c0:	20000000 	.word	0x20000000

080010c4 <DisplayData_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayData_task */
void DisplayData_task(void const * argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayData_task */
	char temp_text[11];
	char hum_text[11];
	uint8_t indx = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	77fb      	strb	r3, [r7, #31]
	/* Infinite loop */
	for (;;) {
		snprintf(temp_text, sizeof(temp_text), "Temp: %.2f", temp);
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <DisplayData_task+0xe8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa37 	bl	8000548 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	f107 0014 	add.w	r0, r7, #20
 80010e2:	e9cd 2300 	strd	r2, r3, [sp]
 80010e6:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <DisplayData_task+0xec>)
 80010e8:	210b      	movs	r1, #11
 80010ea:	f008 fb0b 	bl	8009704 <sniprintf>
		snprintf(hum_text, sizeof(hum_text), "Hum:  %.2f", hum);
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <DisplayData_task+0xf0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	f107 0008 	add.w	r0, r7, #8
 8001100:	e9cd 2300 	strd	r2, r3, [sp]
 8001104:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <DisplayData_task+0xf4>)
 8001106:	210b      	movs	r1, #11
 8001108:	f008 fafc 	bl	8009704 <sniprintf>
		osSemaphoreWait(i2cSemHandle, osWaitForever);
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <DisplayData_task+0xf8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	4618      	mov	r0, r3
 8001116:	f004 ff25 	bl	8005f64 <osSemaphoreWait>
		ssd1306_SetCursor(3, 3);
 800111a:	2103      	movs	r1, #3
 800111c:	2003      	movs	r0, #3
 800111e:	f000 fe2d 	bl	8001d7c <ssd1306_SetCursor>
		ssd1306_WriteString(temp_text, Font_11x18, White);
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <DisplayData_task+0xfc>)
 8001124:	f107 0014 	add.w	r0, r7, #20
 8001128:	2301      	movs	r3, #1
 800112a:	ca06      	ldmia	r2, {r1, r2}
 800112c:	f000 fe00 	bl	8001d30 <ssd1306_WriteString>
		ssd1306_SetCursor(3, 45);
 8001130:	212d      	movs	r1, #45	; 0x2d
 8001132:	2003      	movs	r0, #3
 8001134:	f000 fe22 	bl	8001d7c <ssd1306_SetCursor>
		ssd1306_WriteString(hum_text, Font_11x18, White);
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <DisplayData_task+0xfc>)
 800113a:	f107 0008 	add.w	r0, r7, #8
 800113e:	2301      	movs	r3, #1
 8001140:	ca06      	ldmia	r2, {r1, r2}
 8001142:	f000 fdf5 	bl	8001d30 <ssd1306_WriteString>
		ssd1306_DrawRectangle(0, 1, 127, 63, White);
 8001146:	2301      	movs	r3, #1
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	233f      	movs	r3, #63	; 0x3f
 800114c:	227f      	movs	r2, #127	; 0x7f
 800114e:	2101      	movs	r1, #1
 8001150:	2000      	movs	r0, #0
 8001152:	f000 fe97 	bl	8001e84 <ssd1306_DrawRectangle>
		if (indx != 0){
 8001156:	7ffb      	ldrb	r3, [r7, #31]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <DisplayData_task+0xa8>
			ssd1306_DrawPixel(125, indx+4, Black);
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	3304      	adds	r3, #4
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	207d      	movs	r0, #125	; 0x7d
 8001168:	f000 fd06 	bl	8001b78 <ssd1306_DrawPixel>
		}
		ssd1306_DrawPixel(125, indx+5, White);
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	3305      	adds	r3, #5
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	207d      	movs	r0, #125	; 0x7d
 8001178:	f000 fcfe 	bl	8001b78 <ssd1306_DrawPixel>
		ssd1306_UpdateScreen();
 800117c:	f000 fcd4 	bl	8001b28 <ssd1306_UpdateScreen>
		osSemaphoreRelease(i2cSemHandle);
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <DisplayData_task+0xf8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f004 ff3b 	bl	8006000 <osSemaphoreRelease>
		indx++;
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	3301      	adds	r3, #1
 800118e:	77fb      	strb	r3, [r7, #31]
		indx = indx%5;
 8001190:	7ffa      	ldrb	r2, [r7, #31]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <DisplayData_task+0x100>)
 8001194:	fba3 1302 	umull	r1, r3, r3, r2
 8001198:	0899      	lsrs	r1, r3, #2
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	77fb      	strb	r3, [r7, #31]
		osDelay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f004 fe97 	bl	8005ed8 <osDelay>
	for (;;) {
 80011aa:	e791      	b.n	80010d0 <DisplayData_task+0xc>
 80011ac:	20007f7c 	.word	0x20007f7c
 80011b0:	0800b62c 	.word	0x0800b62c
 80011b4:	20007f78 	.word	0x20007f78
 80011b8:	0800b638 	.word	0x0800b638
 80011bc:	20007f90 	.word	0x20007f90
 80011c0:	20000008 	.word	0x20000008
 80011c4:	cccccccd 	.word	0xcccccccd

080011c8 <StoreSD_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StoreSD_task */
void StoreSD_task(void const * argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StoreSD_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f004 fe81 	bl	8005ed8 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StoreSD_task+0x8>

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_GPIO_Init+0xb8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <MX_GPIO_Init+0xb8>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_GPIO_Init+0xb8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_GPIO_Init+0xb8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <MX_GPIO_Init+0xb8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_GPIO_Init+0xb8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_GPIO_Init+0xb8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <MX_GPIO_Init+0xb8>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_GPIO_Init+0xb8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f001 fb79 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2108      	movs	r1, #8
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_GPIO_Init+0xbc>)
 8001248:	f001 fb74 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800124c:	2320      	movs	r3, #32
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f001 f9fb 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800126a:	2308      	movs	r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_GPIO_Init+0xbc>)
 8001282:	f001 f9ed 	bl	8002660 <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	48000400 	.word	0x48000400

08001298 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_I2C1_Init+0x7c>)
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <MX_I2C1_Init+0x80>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <MX_I2C1_Init+0x84>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012d4:	f001 fb46 	bl	8002964 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 f9a7 	bl	8001630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012e6:	f002 fb05 	bl	80038f4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 f99e 	bl	8001630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012f8:	f002 fb47 	bl	800398a <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 f995 	bl	8001630 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001306:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800130a:	f002 fb8b 	bl	8003a24 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20007fe0 	.word	0x20007fe0
 8001318:	40005400 	.word	0x40005400
 800131c:	00100413 	.word	0x00100413

08001320 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C3_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C3_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C3_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C3_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C3_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_I2C3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C3_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C3_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C3_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_I2C3_Init+0x74>)
 800135c:	f001 fb02 	bl	8002964 <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001366:	f000 f963 	bl	8001630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C3_Init+0x74>)
 800136e:	f002 fac1 	bl	80038f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 f95a 	bl	8001630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_I2C3_Init+0x74>)
 8001380:	f002 fb03 	bl	800398a <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 f951 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20007f94 	.word	0x20007f94
 8001398:	40005c00 	.word	0x40005c00
 800139c:	00707cbb 	.word	0x00707cbb

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0a2      	sub	sp, #136	; 0x88
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2254      	movs	r2, #84	; 0x54
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f007 fae6 	bl	8008992 <memset>
  if(i2cHandle->Instance==I2C1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_I2C_MspInit+0x168>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13a      	bne.n	8001446 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fa0d 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013e8:	f000 f922 	bl	8001630 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001404:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001408:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f001 f91a 	bl	8002660 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <HAL_I2C_MspInit+0x16c>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	4a36      	ldr	r2, [pc, #216]	; (800150c <HAL_I2C_MspInit+0x16c>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001436:	6593      	str	r3, [r2, #88]	; 0x58
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_I2C_MspInit+0x16c>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001444:	e05c      	b.n	8001500 <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C3)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_I2C_MspInit+0x170>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d157      	bne.n	8001500 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001456:	2300      	movs	r3, #0
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f9cc 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800146a:	f000 f8e1 	bl	8001630 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_I2C_MspInit+0x16c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_I2C_MspInit+0x16c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_I2C_MspInit+0x16c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_I2C_MspInit+0x16c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_I2C_MspInit+0x16c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_I2C_MspInit+0x16c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHT_SCL_Pin;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014b0:	2304      	movs	r3, #4
 80014b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(SHT_SCL_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f001 f8ce 	bl	8002660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SHT_SDA_Pin;
 80014c4:	2310      	movs	r3, #16
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d6:	2304      	movs	r3, #4
 80014d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(SHT_SDA_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_I2C_MspInit+0x174>)
 80014e4:	f001 f8bc 	bl	8002660 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80014ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_I2C_MspInit+0x16c>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	bf00      	nop
 8001502:	3788      	adds	r7, #136	; 0x88
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40021000 	.word	0x40021000
 8001510:	40005c00 	.word	0x40005c00
 8001514:	48000400 	.word	0x48000400

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151c:	f000 ff61 	bl	80023e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f812 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f7ff fe58 	bl	80011d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001528:	f000 fe98 	bl	800225c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800152c:	f7ff feb4 	bl	8001298 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001530:	f7ff fef6 	bl	8001320 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001534:	f000 f9b0 	bl	8001898 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001538:	f004 fb80 	bl	8005c3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800153c:	f7ff fcf2 	bl	8000f24 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001540:	f004 fc6b 	bl	8005e1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001544:	e7fe      	b.n	8001544 <main+0x2c>
	...

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2244      	movs	r2, #68	; 0x44
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f007 fa1b 	bl	8008992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800156a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800156e:	f002 fa97 	bl	8003aa0 <HAL_PWREx_ControlVoltageScaling>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001578:	f000 f85a 	bl	8001630 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800157c:	f002 fa72 	bl	8003a64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <SystemClock_Config+0xc0>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <SystemClock_Config+0xc0>)
 8001588:	f023 0318 	bic.w	r3, r3, #24
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001590:	2314      	movs	r3, #20
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015a8:	2301      	movs	r3, #1
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80015b0:	2310      	movs	r3, #16
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015b4:	2307      	movs	r3, #7
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fac1 	bl	8003b4c <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015d0:	f000 f82e 	bl	8001630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2303      	movs	r3, #3
 80015da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fecd 	bl	800438c <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015f8:	f000 f81a 	bl	8001630 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015fc:	f003 faf2 	bl	8004be4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001600:	bf00      	nop
 8001602:	3758      	adds	r7, #88	; 0x58
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800161e:	f000 fef9 	bl	8002414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40014400 	.word	0x40014400

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>

0800163a <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800163a:	b480      	push	{r7}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001644:	23ff      	movs	r3, #255	; 0xff
 8001646:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	e020      	b.n	8001690 <calculate_crc+0x56>
		crc ^= data[i];
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4413      	add	r3, r2
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	4053      	eors	r3, r2
 800165a:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e010      	b.n	8001684 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	da06      	bge.n	8001678 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001674:	75fb      	strb	r3, [r7, #23]
 8001676:	e002      	b.n	800167e <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b07      	cmp	r3, #7
 8001688:	d9eb      	bls.n	8001662 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3301      	adds	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3da      	bcc.n	800164e <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001698:	7dfb      	ldrb	r3, [r7, #23]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	733b      	strb	r3, [r7, #12]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	b299      	uxth	r1, r3
 80016ce:	f107 020c 	add.w	r2, r7, #12
 80016d2:	231e      	movs	r3, #30
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	f001 f9d4 	bl	8002a84 <HAL_I2C_Master_Transmit>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <sht3x_send_command+0x42>
	}

	return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	b29b      	uxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b29a      	uxth	r2, r3
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b29b      	uxth	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <sht3x_init+0x1e>
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <sht3x_init+0x74>)
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <sht3x_init+0x78>)
 8001732:	2138      	movs	r1, #56	; 0x38
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <sht3x_init+0x7c>)
 8001736:	f006 ffb1 	bl	800869c <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	b299      	uxth	r1, r3
 8001746:	231e      	movs	r3, #30
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2303      	movs	r3, #3
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2302      	movs	r3, #2
 8001756:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800175a:	f001 fc91 	bl	8003080 <HAL_I2C_Mem_Read>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001764:	2300      	movs	r3, #0
 8001766:	e00e      	b.n	8001786 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff63 	bl	800163a <calculate_crc>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <sht3x_init+0x68>
		return false;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <sht3x_init+0x6a>
	}

	return true;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800b644 	.word	0x0800b644
 8001794:	0800b6b4 	.word	0x0800b6b4
 8001798:	0800b684 	.word	0x0800b684

0800179c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80017a8:	f642 4106 	movw	r1, #11270	; 0x2c06
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff ff7a 	bl	80016a6 <sht3x_send_command>

	HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fe4e 	bl	8002454 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	889b      	ldrh	r3, [r3, #4]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b299      	uxth	r1, r3
 80017c4:	f107 0214 	add.w	r2, r7, #20
 80017c8:	231e      	movs	r3, #30
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2306      	movs	r3, #6
 80017ce:	f001 fa4d 	bl	8002c6c <HAL_I2C_Master_Receive>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e050      	b.n	800187e <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff29 	bl	800163a <calculate_crc>
 80017e8:	4603      	mov	r3, r0
 80017ea:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	3303      	adds	r3, #3
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff20 	bl	800163a <calculate_crc>
 80017fa:	4603      	mov	r3, r0
 80017fc:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 80017fe:	7dbb      	ldrb	r3, [r7, #22]
 8001800:	7ffa      	ldrb	r2, [r7, #31]
 8001802:	429a      	cmp	r2, r3
 8001804:	d103      	bne.n	800180e <sht3x_read_temperature_and_humidity+0x72>
 8001806:	7e7b      	ldrb	r3, [r7, #25]
 8001808:	7fba      	ldrb	r2, [r7, #30]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 800180e:	2300      	movs	r3, #0
 8001810:	e035      	b.n	800187e <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8001812:	7d3b      	ldrb	r3, [r7, #20]
 8001814:	7d7a      	ldrb	r2, [r7, #21]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff69 	bl	80016f0 <uint8_to_uint16>
 800181e:	4603      	mov	r3, r0
 8001820:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	7e3a      	ldrb	r2, [r7, #24]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff61 	bl	80016f0 <uint8_to_uint16>
 800182e:	4603      	mov	r3, r0
 8001830:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001832:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001888 <sht3x_read_temperature_and_humidity+0xec>
 8001842:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001846:	eddf 6a11 	vldr	s13, [pc, #68]	; 800188c <sht3x_read_temperature_and_humidity+0xf0>
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001890 <sht3x_read_temperature_and_humidity+0xf4>
 8001852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800185c:	8b7b      	ldrh	r3, [r7, #26]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001866:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001894 <sht3x_read_temperature_and_humidity+0xf8>
 800186a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800188c <sht3x_read_temperature_and_humidity+0xf0>
 8001872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edc3 7a00 	vstr	s15, [r3]

	return true;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	432f0000 	.word	0x432f0000
 800188c:	477fff00 	.word	0x477fff00
 8001890:	42340000 	.word	0x42340000
 8001894:	42c80000 	.word	0x42c80000

08001898 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_SPI1_Init+0x74>)
 800189e:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <MX_SPI1_Init+0x78>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_SPI1_Init+0x74>)
 80018a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0x74>)
 80018b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_SPI1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0x74>)
 80018c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0x74>)
 80018ce:	2230      	movs	r2, #48	; 0x30
 80018d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_SPI1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0x74>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0x74>)
 80018f2:	2208      	movs	r2, #8
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_SPI1_Init+0x74>)
 80018f8:	f003 fa76 	bl	8004de8 <HAL_SPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001902:	f7ff fe95 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000802c 	.word	0x2000802c
 8001910:	40013000 	.word	0x40013000

08001914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_SPI_MspInit+0x80>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d129      	bne.n	800198a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_SPI_MspInit+0x84>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_SPI_MspInit+0x84>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001966:	f241 0342 	movw	r3, #4162	; 0x1042
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001978:	2305      	movs	r3, #5
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f000 fe6b 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40013000 	.word	0x40013000
 8001998:	40021000 	.word	0x40021000

0800199c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	2200      	movs	r2, #0
 80019c8:	2178      	movs	r1, #120	; 0x78
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <ssd1306_WriteCommand+0x2c>)
 80019cc:	f001 fa44 	bl	8002e58 <HAL_I2C_Mem_Write>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20007fe0 	.word	0x20007fe0

080019dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f04f 32ff 	mov.w	r2, #4294967295
 80019ee:	9202      	str	r2, [sp, #8]
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	2178      	movs	r1, #120	; 0x78
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <ssd1306_WriteData+0x30>)
 80019fe:	f001 fa2b 	bl	8002e58 <HAL_I2C_Mem_Write>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20007fe0 	.word	0x20007fe0

08001a10 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a14:	f7ff ffc2 	bl	800199c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	f000 fd1b 	bl	8002454 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 fa7a 	bl	8001f18 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a24:	2020      	movs	r0, #32
 8001a26:	f7ff ffc1 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff ffbe 	bl	80019ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a30:	20b0      	movs	r0, #176	; 0xb0
 8001a32:	f7ff ffbb 	bl	80019ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a36:	20c8      	movs	r0, #200	; 0xc8
 8001a38:	f7ff ffb8 	bl	80019ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff ffb5 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a42:	2010      	movs	r0, #16
 8001a44:	f7ff ffb2 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a48:	2040      	movs	r0, #64	; 0x40
 8001a4a:	f7ff ffaf 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a4e:	20ff      	movs	r0, #255	; 0xff
 8001a50:	f000 fa4f 	bl	8001ef2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a54:	20a1      	movs	r0, #161	; 0xa1
 8001a56:	f7ff ffa9 	bl	80019ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a5a:	20a6      	movs	r0, #166	; 0xa6
 8001a5c:	f7ff ffa6 	bl	80019ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a60:	20a8      	movs	r0, #168	; 0xa8
 8001a62:	f7ff ffa3 	bl	80019ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a66:	203f      	movs	r0, #63	; 0x3f
 8001a68:	f7ff ffa0 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a6c:	20a4      	movs	r0, #164	; 0xa4
 8001a6e:	f7ff ff9d 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a72:	20d3      	movs	r0, #211	; 0xd3
 8001a74:	f7ff ff9a 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ff97 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a7e:	20d5      	movs	r0, #213	; 0xd5
 8001a80:	f7ff ff94 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a84:	20f0      	movs	r0, #240	; 0xf0
 8001a86:	f7ff ff91 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a8a:	20d9      	movs	r0, #217	; 0xd9
 8001a8c:	f7ff ff8e 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a90:	2022      	movs	r0, #34	; 0x22
 8001a92:	f7ff ff8b 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a96:	20da      	movs	r0, #218	; 0xda
 8001a98:	f7ff ff88 	bl	80019ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a9c:	2012      	movs	r0, #18
 8001a9e:	f7ff ff85 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001aa2:	20db      	movs	r0, #219	; 0xdb
 8001aa4:	f7ff ff82 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001aa8:	2020      	movs	r0, #32
 8001aaa:	f7ff ff7f 	bl	80019ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001aae:	208d      	movs	r0, #141	; 0x8d
 8001ab0:	f7ff ff7c 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ab4:	2014      	movs	r0, #20
 8001ab6:	f7ff ff79 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fa2c 	bl	8001f18 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 f80f 	bl	8001ae4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ac6:	f000 f82f 	bl	8001b28 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <ssd1306_Init+0xd0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <ssd1306_Init+0xd0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ad6:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <ssd1306_Init+0xd0>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	711a      	strb	r2, [r3, #4]
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200008d4 	.word	0x200008d4

08001ae4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	e00d      	b.n	8001b10 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <ssd1306_Fill+0x1a>
 8001afa:	2100      	movs	r1, #0
 8001afc:	e000      	b.n	8001b00 <ssd1306_Fill+0x1c>
 8001afe:	21ff      	movs	r1, #255	; 0xff
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <ssd1306_Fill+0x40>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	460a      	mov	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	d3ed      	bcc.n	8001af4 <ssd1306_Fill+0x10>
    }
    ssd1306_UpdateScreen();
 8001b18:	f000 f806 	bl	8001b28 <ssd1306_UpdateScreen>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200004d4 	.word	0x200004d4

08001b28 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	e016      	b.n	8001b62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	3b50      	subs	r3, #80	; 0x50
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff36 	bl	80019ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ff33 	bl	80019ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001b46:	2010      	movs	r0, #16
 8001b48:	f7ff ff30 	bl	80019ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <ssd1306_UpdateScreen+0x4c>)
 8001b52:	4413      	add	r3, r2
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff40 	bl	80019dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d9e5      	bls.n	8001b34 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200004d4 	.word	0x200004d4

08001b78 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	460b      	mov	r3, r1
 8001b84:	71bb      	strb	r3, [r7, #6]
 8001b86:	4613      	mov	r3, r2
 8001b88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db3d      	blt.n	8001c0e <ssd1306_DrawPixel+0x96>
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	2b3f      	cmp	r3, #63	; 0x3f
 8001b96:	d83a      	bhi.n	8001c0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d11a      	bne.n	8001bd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	b2d8      	uxtb	r0, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	01db      	lsls	r3, r3, #7
 8001baa:	4413      	add	r3, r2
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	b25a      	sxtb	r2, r3
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b259      	sxtb	r1, r3
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	01db      	lsls	r3, r3, #7
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2c9      	uxtb	r1, r1
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001bd0:	54d1      	strb	r1, [r2, r3]
 8001bd2:	e01d      	b.n	8001c10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b2d8      	uxtb	r0, r3
 8001bdc:	4603      	mov	r3, r0
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	4413      	add	r3, r2
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	b25a      	sxtb	r2, r3
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b259      	sxtb	r1, r3
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4603      	mov	r3, r0
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	4413      	add	r3, r2
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
 8001c0c:	e000      	b.n	8001c10 <ssd1306_DrawPixel+0x98>
        return;
 8001c0e:	bf00      	nop
    }
}
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200004d4 	.word	0x200004d4

08001c20 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4604      	mov	r4, r0
 8001c28:	1d38      	adds	r0, r7, #4
 8001c2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	4613      	mov	r3, r2
 8001c36:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b1f      	cmp	r3, #31
 8001c3c:	d902      	bls.n	8001c44 <ssd1306_WriteChar+0x24>
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b7e      	cmp	r3, #126	; 0x7e
 8001c42:	d901      	bls.n	8001c48 <ssd1306_WriteChar+0x28>
        return 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e06d      	b.n	8001d24 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	793b      	ldrb	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	dc06      	bgt.n	8001c64 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001c58:	885b      	ldrh	r3, [r3, #2]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	797b      	ldrb	r3, [r7, #5]
 8001c5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	dd01      	ble.n	8001c68 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e05d      	b.n	8001d24 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	e04c      	b.n	8001d08 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3b20      	subs	r3, #32
 8001c74:	7979      	ldrb	r1, [r7, #5]
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	440b      	add	r3, r1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	e034      	b.n	8001cf8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	b2d8      	uxtb	r0, r3
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	7bba      	ldrb	r2, [r7, #14]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7ff ff5b 	bl	8001b78 <ssd1306_DrawPixel>
 8001cc2:	e016      	b.n	8001cf2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	b2d8      	uxtb	r0, r3
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001cd4:	885b      	ldrh	r3, [r3, #2]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b2d9      	uxtb	r1, r3
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	f7ff ff43 	bl	8001b78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	793b      	ldrb	r3, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d3c5      	bcc.n	8001c8e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d3ad      	bcc.n	8001c6e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	793b      	ldrb	r3, [r7, #4]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <ssd1306_WriteChar+0x10c>)
 8001d20:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3724      	adds	r7, #36	; 0x24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	200008d4 	.word	0x200008d4

08001d30 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	1d38      	adds	r0, r7, #4
 8001d3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d3e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001d40:	e012      	b.n	8001d68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	7818      	ldrb	r0, [r3, #0]
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	1d3a      	adds	r2, r7, #4
 8001d4a:	ca06      	ldmia	r2, {r1, r2}
 8001d4c:	f7ff ff68 	bl	8001c20 <ssd1306_WriteChar>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d002      	beq.n	8001d62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	e008      	b.n	8001d74 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e8      	bne.n	8001d42 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <ssd1306_SetCursor+0x2c>)
 8001d92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <ssd1306_SetCursor+0x2c>)
 8001d9a:	805a      	strh	r2, [r3, #2]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	200008d4 	.word	0x200008d4

08001dac <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71bb      	strb	r3, [r7, #6]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	717b      	strb	r3, [r7, #5]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001dca:	797a      	ldrb	r2, [r7, #5]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bfb8      	it	lt
 8001dd4:	425b      	neglt	r3, r3
 8001dd6:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001dd8:	793a      	ldrb	r2, [r7, #4]
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfb8      	it	lt
 8001de2:	425b      	neglt	r3, r3
 8001de4:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d201      	bcs.n	8001df2 <ssd1306_Line+0x46>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e001      	b.n	8001df6 <ssd1306_Line+0x4a>
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001df8:	79ba      	ldrb	r2, [r7, #6]
 8001dfa:	793b      	ldrb	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d201      	bcs.n	8001e04 <ssd1306_Line+0x58>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e001      	b.n	8001e08 <ssd1306_Line+0x5c>
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001e12:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e16:	7939      	ldrb	r1, [r7, #4]
 8001e18:	797b      	ldrb	r3, [r7, #5]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff feac 	bl	8001b78 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001e20:	e024      	b.n	8001e6c <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001e22:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e26:	79b9      	ldrb	r1, [r7, #6]
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fea4 	bl	8001b78 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	425b      	negs	r3, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dd08      	ble.n	8001e52 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4413      	add	r3, r2
 8001e50:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	da08      	bge.n	8001e6c <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4413      	add	r3, r2
 8001e60:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	79bb      	ldrb	r3, [r7, #6]
 8001e68:	4413      	add	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1d6      	bne.n	8001e22 <ssd1306_Line+0x76>
 8001e74:	79ba      	ldrb	r2, [r7, #6]
 8001e76:	793b      	ldrb	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1d2      	bne.n	8001e22 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001e7c:	bf00      	nop
}
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}

08001e84 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	4603      	mov	r3, r0
 8001e98:	71bb      	strb	r3, [r7, #6]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	717b      	strb	r3, [r7, #5]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001ea2:	79bc      	ldrb	r4, [r7, #6]
 8001ea4:	797a      	ldrb	r2, [r7, #5]
 8001ea6:	79b9      	ldrb	r1, [r7, #6]
 8001ea8:	79f8      	ldrb	r0, [r7, #7]
 8001eaa:	7e3b      	ldrb	r3, [r7, #24]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4623      	mov	r3, r4
 8001eb0:	f7ff ff7c 	bl	8001dac <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001eb4:	793c      	ldrb	r4, [r7, #4]
 8001eb6:	797a      	ldrb	r2, [r7, #5]
 8001eb8:	79b9      	ldrb	r1, [r7, #6]
 8001eba:	7978      	ldrb	r0, [r7, #5]
 8001ebc:	7e3b      	ldrb	r3, [r7, #24]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	f7ff ff73 	bl	8001dac <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8001ec6:	793c      	ldrb	r4, [r7, #4]
 8001ec8:	79fa      	ldrb	r2, [r7, #7]
 8001eca:	7939      	ldrb	r1, [r7, #4]
 8001ecc:	7978      	ldrb	r0, [r7, #5]
 8001ece:	7e3b      	ldrb	r3, [r7, #24]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4623      	mov	r3, r4
 8001ed4:	f7ff ff6a 	bl	8001dac <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8001ed8:	79bc      	ldrb	r4, [r7, #6]
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	7939      	ldrb	r1, [r7, #4]
 8001ede:	79f8      	ldrb	r0, [r7, #7]
 8001ee0:	7e3b      	ldrb	r3, [r7, #24]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	f7ff ff61 	bl	8001dac <ssd1306_Line>

  return;
 8001eea:	bf00      	nop
}
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}

08001ef2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001efc:	2381      	movs	r3, #129	; 0x81
 8001efe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd52 	bl	80019ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd4e 	bl	80019ac <ssd1306_WriteCommand>
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f28:	23af      	movs	r3, #175	; 0xaf
 8001f2a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <ssd1306_SetDisplayOn+0x38>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	715a      	strb	r2, [r3, #5]
 8001f32:	e004      	b.n	8001f3e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f34:	23ae      	movs	r3, #174	; 0xae
 8001f36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <ssd1306_SetDisplayOn+0x38>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fd33 	bl	80019ac <ssd1306_WriteCommand>
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200008d4 	.word	0x200008d4

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	f000 fb3b 	bl	800260c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2019      	movs	r0, #25
 8001fba:	f000 fb27 	bl	800260c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fbe:	2019      	movs	r0, #25
 8001fc0:	f000 fb40 	bl	8002644 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_InitTick+0x9c>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_InitTick+0x9c>)
 8001fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fce:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_InitTick+0x9c>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fdc:	f107 0210 	add.w	r2, r7, #16
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fb76 	bl	80046d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fec:	f002 fb5e 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8001ff0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_InitTick+0xa0>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_InitTick+0xa4>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_InitTick+0xa8>)
 8002004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_InitTick+0xa4>)
 8002008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <HAL_InitTick+0xa4>)
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_InitTick+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_InitTick+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <HAL_InitTick+0xa4>)
 8002022:	f002 ff84 	bl	8004f2e <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <HAL_InitTick+0xa4>)
 800202e:	f002 ffdf 	bl	8004ff0 <HAL_TIM_Base_Start_IT>
 8002032:	4603      	mov	r3, r0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3730      	adds	r7, #48	; 0x30
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	431bde83 	.word	0x431bde83
 8002048:	20008090 	.word	0x20008090
 800204c:	40014400 	.word	0x40014400

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>
	...

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2108      	movs	r1, #8
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <HardFault_Handler+0x18>)
 8002062:	f000 fc67 	bl	8002934 <HAL_GPIO_WritePin>
printf("hard error occured");
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <HardFault_Handler+0x1c>)
 8002068:	f007 faba 	bl	80095e0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <HardFault_Handler+0x14>
 800206e:	bf00      	nop
 8002070:	48000400 	.word	0x48000400
 8002074:	0800b698 	.word	0x0800b698

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler+0x4>

0800207e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <UsageFault_Handler+0x4>

0800208a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800209e:	f002 fffb 	bl	8005098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20008090 	.word	0x20008090

080020ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_kill>:

int _kill(int pid, int sig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020c6:	f006 fb07 	bl	80086d8 <__errno>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2216      	movs	r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
	return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_exit>:

void _exit (int status)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffe7 	bl	80020bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ee:	e7fe      	b.n	80020ee <_exit+0x12>

080020f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
	}

return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
	}
	return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218a:	605a      	str	r2, [r3, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f006 fa6c 	bl	80086d8 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000c000 	.word	0x2000c000
 800222c:	00000400 	.word	0x00000400
 8002230:	200008dc 	.word	0x200008dc
 8002234:	200085e0 	.word	0x200085e0

08002238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <MX_USART2_UART_Init+0x5c>)
 8002264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800226c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_USART2_UART_Init+0x58>)
 80022a0:	f003 f8c4 	bl	800542c <HAL_UART_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022aa:	f7ff f9c1 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200080dc 	.word	0x200080dc
 80022b8:	40004400 	.word	0x40004400

080022bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b09e      	sub	sp, #120	; 0x78
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	2254      	movs	r2, #84	; 0x54
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f006 fb58 	bl	8008992 <memset>
  if(uartHandle->Instance==USART2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_UART_MspInit+0xcc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d148      	bne.n	800237e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fa7f 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002304:	f7ff f994 	bl	8001630 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_UART_MspInit+0xd0>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <HAL_UART_MspInit+0xd0>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_UART_MspInit+0xd0>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_UART_MspInit+0xd0>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_UART_MspInit+0xd0>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_UART_MspInit+0xd0>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002338:	2304      	movs	r3, #4
 800233a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002348:	2307      	movs	r3, #7
 800234a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f000 f983 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800235a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800236c:	2303      	movs	r3, #3
 800236e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f000 f971 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800237e:	bf00      	nop
 8002380:	3778      	adds	r7, #120	; 0x78
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004400 	.word	0x40004400
 800238c:	40021000 	.word	0x40021000

08002390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002394:	f7ff ff50 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002398:	480c      	ldr	r0, [pc, #48]	; (80023cc <LoopForever+0x6>)
  ldr r1, =_edata
 800239a:	490d      	ldr	r1, [pc, #52]	; (80023d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <LoopForever+0xe>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b0:	4c0a      	ldr	r4, [pc, #40]	; (80023dc <LoopForever+0x16>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023be:	f006 fa99 	bl	80088f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023c2:	f7ff f8a9 	bl	8001518 <main>

080023c6 <LoopForever>:

LoopForever:
    b LoopForever
 80023c6:	e7fe      	b.n	80023c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023c8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80023d4:	0800c858 	.word	0x0800c858
  ldr r2, =_sbss
 80023d8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80023dc:	200085e0 	.word	0x200085e0

080023e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC1_IRQHandler>

080023e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ec:	2003      	movs	r0, #3
 80023ee:	f000 f902 	bl	80025f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f2:	200f      	movs	r0, #15
 80023f4:	f7ff fdd6 	bl	8001fa4 <HAL_InitTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	e001      	b.n	8002408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002404:	f7ff fda6 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002408:	79fb      	ldrb	r3, [r7, #7]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000018 	.word	0x20000018
 8002438:	20008160 	.word	0x20008160

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20008160 	.word	0x20008160

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000018 	.word	0x20000018

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff4c 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800261e:	f7ff ff61 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002622:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	f7ff ffb1 	bl	8002590 <NVIC_EncodePriority>
 800262e:	4602      	mov	r2, r0
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff80 	bl	800253c <__NVIC_SetPriority>
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff54 	bl	8002500 <__NVIC_EnableIRQ>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e148      	b.n	8002902 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 813a 	beq.w	80028fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d005      	beq.n	80026a0 <HAL_GPIO_Init+0x40>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d6:	2201      	movs	r2, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d017      	beq.n	800273e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d123      	bne.n	8002792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8094 	beq.w	80028fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d4:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_GPIO_Init+0x2c0>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_GPIO_Init+0x2c0>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6613      	str	r3, [r2, #96]	; 0x60
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <HAL_GPIO_Init+0x2c0>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ec:	4a4d      	ldr	r2, [pc, #308]	; (8002924 <HAL_GPIO_Init+0x2c4>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1d4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_GPIO_Init+0x2c8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1d0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_GPIO_Init+0x2cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1cc>
 8002828:	2302      	movs	r3, #2
 800282a:	e004      	b.n	8002836 <HAL_GPIO_Init+0x1d6>
 800282c:	2307      	movs	r3, #7
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x1d6>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_GPIO_Init+0x1d6>
 8002834:	2300      	movs	r3, #0
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	f002 0203 	and.w	r2, r2, #3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4093      	lsls	r3, r2
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_GPIO_Init+0x2c4>)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002878:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f aeaf 	bne.w	8002670 <HAL_GPIO_Init+0x10>
  }
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	48000400 	.word	0x48000400
 800292c:	48000800 	.word	0x48000800
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002950:	e002      	b.n	8002958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e081      	b.n	8002a7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fd08 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	; 0x24
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	e006      	b.n	80029ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d104      	bne.n	80029fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
 8002a94:	4613      	mov	r3, r2
 8002a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	f040 80da 	bne.w	8002c5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0x30>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0d3      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002abc:	f7ff fcbe 	bl	800243c <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2319      	movs	r3, #25
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fcbc 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0be      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2221      	movs	r2, #33	; 0x21
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	893a      	ldrh	r2, [r7, #8]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2bff      	cmp	r3, #255	; 0xff
 8002b0e:	d90e      	bls.n	8002b2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 feb2 	bl	8003890 <I2C_TransferConfig>
 8002b2c:	e06c      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	8979      	ldrh	r1, [r7, #10]
 8002b40:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fea1 	bl	8003890 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b4e:	e05b      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fcb9 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e07b      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d034      	beq.n	8002c08 <HAL_I2C_Master_Transmit+0x184>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d130      	bne.n	8002c08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fc4b 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04d      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d90e      	bls.n	8002be8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	22ff      	movs	r2, #255	; 0xff
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fe55 	bl	8003890 <I2C_TransferConfig>
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fe44 	bl	8003890 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d19e      	bne.n	8002b50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fc98 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01a      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	80002000 	.word	0x80002000
 8002c68:	fe00e800 	.word	0xfe00e800

08002c6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	461a      	mov	r2, r3
 8002c78:	460b      	mov	r3, r1
 8002c7a:	817b      	strh	r3, [r7, #10]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	f040 80db 	bne.w	8002e44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2C_Master_Receive+0x30>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e0d4      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca4:	f7ff fbca 	bl	800243c <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2319      	movs	r3, #25
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fbc8 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0bf      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2222      	movs	r2, #34	; 0x22
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	893a      	ldrh	r2, [r7, #8]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2bff      	cmp	r3, #255	; 0xff
 8002cf6:	d90e      	bls.n	8002d16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <HAL_I2C_Master_Receive+0x1e4>)
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fdbe 	bl	8003890 <I2C_TransferConfig>
 8002d14:	e06d      	b.n	8002df2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_I2C_Master_Receive+0x1e4>)
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fdad 	bl	8003890 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002d36:	e05c      	b.n	8002df2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6a39      	ldr	r1, [r7, #32]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fc41 	bl	80035c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e07c      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d034      	beq.n	8002df2 <HAL_I2C_Master_Receive+0x186>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d130      	bne.n	8002df2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fb56 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e04d      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	d90e      	bls.n	8002dd2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	8979      	ldrh	r1, [r7, #10]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fd60 	bl	8003890 <I2C_TransferConfig>
 8002dd0:	e00f      	b.n	8002df2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	8979      	ldrh	r1, [r7, #10]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fd4f 	bl	8003890 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d19d      	bne.n	8002d38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fba3 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e01a      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2220      	movs	r2, #32
 8002e16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <HAL_I2C_Master_Receive+0x1e8>)
 8002e24:	400b      	ands	r3, r1
 8002e26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	80002400 	.word	0x80002400
 8002e54:	fe00e800 	.word	0xfe00e800

08002e58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	f040 80f9 	bne.w	8003072 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_I2C_Mem_Write+0x34>
 8002e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0ed      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2C_Mem_Write+0x4e>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0e6      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eae:	f7ff fac5 	bl	800243c <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2319      	movs	r3, #25
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fac3 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0d1      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef8:	88f8      	ldrh	r0, [r7, #6]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4603      	mov	r3, r0
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f9d3 	bl	80032b4 <I2C_RequestMemoryWrite>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0a9      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	d90e      	bls.n	8002f48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	22ff      	movs	r2, #255	; 0xff
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fca5 	bl	8003890 <I2C_TransferConfig>
 8002f46:	e00f      	b.n	8002f68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fc94 	bl	8003890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 faad 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e07b      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d034      	beq.n	8003020 <HAL_I2C_Mem_Write+0x1c8>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d130      	bne.n	8003020 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fa3f 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04d      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d90e      	bls.n	8003000 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fc49 	bl	8003890 <I2C_TransferConfig>
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	b2da      	uxtb	r2, r3
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fc38 	bl	8003890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d19e      	bne.n	8002f68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa8c 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01a      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_I2C_Mem_Write+0x224>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	fe00e800 	.word	0xfe00e800

08003080 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	f040 80fd 	bne.w	80032a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_I2C_Mem_Read+0x34>
 80030ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0f1      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Mem_Read+0x4e>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0ea      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030d6:	f7ff f9b1 	bl	800243c <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2319      	movs	r3, #25
 80030e2:	2201      	movs	r2, #1
 80030e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9af 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d5      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2222      	movs	r2, #34	; 0x22
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003120:	88f8      	ldrh	r0, [r7, #6]
 8003122:	893a      	ldrh	r2, [r7, #8]
 8003124:	8979      	ldrh	r1, [r7, #10]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4603      	mov	r3, r0
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f913 	bl	800335c <I2C_RequestMemoryRead>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0ad      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	d90e      	bls.n	8003170 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	4b52      	ldr	r3, [pc, #328]	; (80032ac <HAL_I2C_Mem_Read+0x22c>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb91 	bl	8003890 <I2C_TransferConfig>
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	b2da      	uxtb	r2, r3
 8003180:	8979      	ldrh	r1, [r7, #10]
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_I2C_Mem_Read+0x22c>)
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fb80 	bl	8003890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	2200      	movs	r2, #0
 8003198:	2104      	movs	r1, #4
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f956 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07c      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d034      	beq.n	8003250 <HAL_I2C_Mem_Read+0x1d0>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d130      	bne.n	8003250 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	2200      	movs	r2, #0
 80031f6:	2180      	movs	r1, #128	; 0x80
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f927 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e04d      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d90e      	bls.n	8003230 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	2300      	movs	r3, #0
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fb31 	bl	8003890 <I2C_TransferConfig>
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	2300      	movs	r3, #0
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb20 	bl	8003890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d19a      	bne.n	8003190 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f974 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e01a      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2220      	movs	r2, #32
 8003274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_I2C_Mem_Read+0x230>)
 8003282:	400b      	ands	r3, r1
 8003284:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	80002400 	.word	0x80002400
 80032b0:	fe00e800 	.word	0xfe00e800

080032b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <I2C_RequestMemoryWrite+0xa4>)
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fad7 	bl	8003890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	69b9      	ldr	r1, [r7, #24]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8f0 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02c      	b.n	8003350 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
 8003306:	e015      	b.n	8003334 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f8d6 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e012      	b.n	8003350 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2200      	movs	r2, #0
 800333c:	2180      	movs	r1, #128	; 0x80
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f884 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	80002000 	.word	0x80002000

0800335c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	817b      	strh	r3, [r7, #10]
 800336e:	460b      	mov	r3, r1
 8003370:	813b      	strh	r3, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <I2C_RequestMemoryRead+0xa4>)
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2300      	movs	r3, #0
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fa84 	bl	8003890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f89d 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e02c      	b.n	80033f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
 80033ac:	e015      	b.n	80033da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033ae:	893b      	ldrh	r3, [r7, #8]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f883 	bl	80034cc <I2C_WaitOnTXISFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e012      	b.n	80033f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2140      	movs	r1, #64	; 0x40
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f831 	bl	800344c <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	80002000 	.word	0x80002000

08003404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d103      	bne.n	8003422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d007      	beq.n	8003440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	619a      	str	r2, [r3, #24]
  }
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345c:	e022      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d01e      	beq.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7fe ffe9 	bl	800243c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e00f      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d0cd      	beq.n	800345e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d8:	e02c      	b.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8ea 	bl	80036b8 <I2C_IsErrorOccurred>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e02a      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d01e      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe ffa1 	bl	800243c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d1cb      	bne.n	80034da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	e028      	b.n	80035ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f8aa 	bl	80036b8 <I2C_IsErrorOccurred>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e026      	b.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe ff65 	bl	800243c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d113      	bne.n	80035ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d1cf      	bne.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d0:	e064      	b.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f86e 	bl	80036b8 <I2C_IsErrorOccurred>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e062      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d138      	bne.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d105      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e04e      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d107      	bne.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2204      	movs	r2, #4
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
 800362a:	e002      	b.n	8003632 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2220      	movs	r2, #32
 8003638:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003646:	400b      	ands	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe fee9 	bl	800243c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10f      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e007      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d193      	bne.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	fe00e800 	.word	0xfe00e800

080036b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d075      	beq.n	80037d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ec:	e056      	b.n	800379c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d052      	beq.n	800379c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fea1 	bl	800243c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_IsErrorOccurred+0x54>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d147      	bne.n	800379c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800371e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800372a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372e:	d12e      	bne.n	800378e <I2C_IsErrorOccurred+0xd6>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003736:	d02a      	beq.n	800378e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b20      	cmp	r3, #32
 800373c:	d027      	beq.n	800378e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374e:	f7fe fe75 	bl	800243c <HAL_GetTick>
 8003752:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	e01b      	b.n	800378e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003756:	f7fe fe71 	bl	800243c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b19      	cmp	r3, #25
 8003762:	d914      	bls.n	800378e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d1dc      	bne.n	8003756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d003      	beq.n	80037b2 <I2C_IsErrorOccurred+0xfa>
 80037aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d09d      	beq.n	80036ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2220      	movs	r2, #32
 80037c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800383e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01c      	beq.n	8003880 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fddc 	bl	8003404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <I2C_IsErrorOccurred+0x1d4>)
 8003858:	400b      	ands	r3, r1
 800385a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003884:	4618      	mov	r0, r3
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	fe00e800 	.word	0xfe00e800

08003890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	4613      	mov	r3, r2
 80038a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a8:	7a7b      	ldrb	r3, [r7, #9]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038be:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	0d5b      	lsrs	r3, r3, #21
 80038ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <I2C_TransferConfig+0x60>)
 80038d0:	430b      	orrs	r3, r1
 80038d2:	43db      	mvns	r3, r3
 80038d4:	ea02 0103 	and.w	r1, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	03ff63ff 	.word	0x03ff63ff

080038f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	d138      	bne.n	800397c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003914:	2302      	movs	r3, #2
 8003916:	e032      	b.n	800397e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003946:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d139      	bne.n	8003a14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e033      	b.n	8003a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2224      	movs	r2, #36	; 0x24
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6613      	str	r3, [r2, #96]	; 0x60
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4905      	ldr	r1, [pc, #20]	; (8003a60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40010000 	.word	0x40010000

08003a64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007000 	.word	0x40007000

08003a84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40007000 	.word	0x40007000

08003aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aae:	d130      	bne.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab0:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d038      	beq.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac6:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2232      	movs	r2, #50	; 0x32
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0c9b      	lsrs	r3, r3, #18
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae4:	e002      	b.n	8003aec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af8:	d102      	bne.n	8003b00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f2      	bne.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d110      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e00f      	b.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d007      	beq.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b28:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40007000 	.word	0x40007000
 8003b44:	20000010 	.word	0x20000010
 8003b48:	431bde83 	.word	0x431bde83

08003b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f000 bc11 	b.w	8004382 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b60:	4ba0      	ldr	r3, [pc, #640]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b6a:	4b9e      	ldr	r3, [pc, #632]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80e4 	beq.w	8003d4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4c>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	f040 808b 	bne.w	8003ca6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f040 8087 	bne.w	8003ca6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b98:	4b92      	ldr	r3, [pc, #584]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x64>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e3e8      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1a      	ldr	r2, [r3, #32]
 8003bb4:	4b8b      	ldr	r3, [pc, #556]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_RCC_OscConfig+0x7e>
 8003bc0:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCC_OscConfig+0x8a>
 8003bca:	4b86      	ldr	r3, [pc, #536]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d223      	bcs.n	8003c22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fdac 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e3c9      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bee:	4b7d      	ldr	r3, [pc, #500]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bf4:	f043 0308 	orr.w	r3, r3, #8
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4977      	ldr	r1, [pc, #476]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c0c:	4b75      	ldr	r3, [pc, #468]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	4972      	ldr	r1, [pc, #456]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	e025      	b.n	8003c6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c22:	4b70      	ldr	r3, [pc, #448]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6f      	ldr	r2, [pc, #444]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c28:	f043 0308 	orr.w	r3, r3, #8
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	496a      	ldr	r1, [pc, #424]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4965      	ldr	r1, [pc, #404]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd6c 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e389      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c6e:	f000 fc6f 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	495a      	ldr	r1, [pc, #360]	; (8003de8 <HAL_RCC_OscConfig+0x29c>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8a:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_OscConfig+0x2a0>)
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c8e:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_RCC_OscConfig+0x2a4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f986 	bl	8001fa4 <HAL_InitTick>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d052      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	e36d      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d032      	beq.n	8003d14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cba:	f7fe fbbf 	bl	800243c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fbbb 	bl	800243c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e356      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd4:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce0:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3f      	ldr	r2, [pc, #252]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	493a      	ldr	r1, [pc, #232]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfe:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	4935      	ldr	r1, [pc, #212]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
 8003d12:	e01a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d14:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fb8c 	bl	800243c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d28:	f7fe fb88 	bl	800243c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e323      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x1dc>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d073      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_OscConfig+0x21c>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d10e      	bne.n	8003d80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d063      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d15f      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e300      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x24c>
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x288>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x270>
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x288>
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <HAL_RCC_OscConfig+0x298>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fb2e 	bl	800243c <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e010      	b.n	8003e06 <HAL_RCC_OscConfig+0x2ba>
 8003de4:	40021000 	.word	0x40021000
 8003de8:	0800c41c 	.word	0x0800c41c
 8003dec:	20000010 	.word	0x20000010
 8003df0:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fb22 	bl	800243c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e2bd      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e06:	4baf      	ldr	r3, [pc, #700]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2a8>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe fb12 	bl	800243c <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fb0e 	bl	800243c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e2a9      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2e:	4ba5      	ldr	r3, [pc, #660]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x2d0>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d060      	beq.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x310>
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d116      	bne.n	8003e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5c:	4b99      	ldr	r3, [pc, #612]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_OscConfig+0x328>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e286      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b93      	ldr	r3, [pc, #588]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	4990      	ldr	r1, [pc, #576]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e88:	e040      	b.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d023      	beq.n	8003eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e92:	4b8c      	ldr	r3, [pc, #560]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a8b      	ldr	r2, [pc, #556]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fe facd 	bl	800243c <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fe fac9 	bl	800243c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e264      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	4b82      	ldr	r3, [pc, #520]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	497c      	ldr	r1, [pc, #496]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	e018      	b.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b7a      	ldr	r3, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a79      	ldr	r2, [pc, #484]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fe faa9 	bl	800243c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe faa5 	bl	800243c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e240      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f00:	4b70      	ldr	r3, [pc, #448]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d03c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f26:	4a67      	ldr	r2, [pc, #412]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fa84 	bl	800243c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fa80 	bl	800243c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e21b      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ef      	beq.n	8003f38 <HAL_RCC_OscConfig+0x3ec>
 8003f58:	e01b      	b.n	8003f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5a:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f60:	4a58      	ldr	r2, [pc, #352]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fa67 	bl	800243c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fe fa63 	bl	800243c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1fe      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f84:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ef      	bne.n	8003f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80a6 	beq.w	80040ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fa4:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b44      	ldr	r3, [pc, #272]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	4a43      	ldr	r2, [pc, #268]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbc:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fcc:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <HAL_RCC_OscConfig+0x57c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d118      	bne.n	800400a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x57c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <HAL_RCC_OscConfig+0x57c>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fa2a 	bl	800243c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fe fa26 	bl	800243c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1c1      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x57c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_RCC_OscConfig+0x4d8>
 8004012:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004022:	e024      	b.n	800406e <HAL_RCC_OscConfig+0x522>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d110      	bne.n	800404e <HAL_RCC_OscConfig+0x502>
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404c:	e00f      	b.n	800406e <HAL_RCC_OscConfig+0x522>
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800405e:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe f9e1 	bl	800243c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe f9dd 	bl	800243c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e176      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_OscConfig+0x578>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ed      	beq.n	800407e <HAL_RCC_OscConfig+0x532>
 80040a2:	e01a      	b.n	80040da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fe f9ca 	bl	800243c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040aa:	e00f      	b.n	80040cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fe f9c6 	bl	800243c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d906      	bls.n	80040cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e15f      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040cc:	4baa      	ldr	r3, [pc, #680]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e8      	bne.n	80040ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	4ba5      	ldr	r3, [pc, #660]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4aa4      	ldr	r2, [pc, #656]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80040e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d03c      	beq.n	8004172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004100:	4b9d      	ldr	r3, [pc, #628]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004106:	4a9c      	ldr	r2, [pc, #624]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fe f994 	bl	800243c <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004118:	f7fe f990 	bl	800243c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e12b      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800412a:	4b93      	ldr	r3, [pc, #588]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <HAL_RCC_OscConfig+0x5cc>
 8004138:	e01b      	b.n	8004172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800413a:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800413c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004140:	4a8d      	ldr	r2, [pc, #564]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fe f977 	bl	800243c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004152:	f7fe f973 	bl	800243c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e10e      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004164:	4b84      	ldr	r3, [pc, #528]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1ef      	bne.n	8004152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8102 	beq.w	8004380 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	2b02      	cmp	r3, #2
 8004182:	f040 80c5 	bne.w	8004310 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004186:	4b7c      	ldr	r3, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0203 	and.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	429a      	cmp	r2, r3
 8004198:	d12c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	3b01      	subs	r3, #1
 80041a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d123      	bne.n	80041f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d11b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d113      	bne.n	80041f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	3b01      	subs	r3, #1
 80041da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d109      	bne.n	80041f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	3b01      	subs	r3, #1
 80041ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d067      	beq.n	80042c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d062      	beq.n	80042c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0bb      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a5a      	ldr	r2, [pc, #360]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004214:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004216:	f7fe f911 	bl	800243c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe f90d 	bl	800243c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0a8      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004230:	4b51      	ldr	r3, [pc, #324]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800423c:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCC_OscConfig+0x830>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800424c:	3a01      	subs	r2, #1
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004256:	0212      	lsls	r2, r2, #8
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0552      	lsls	r2, r2, #21
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800426a:	0852      	lsrs	r2, r2, #1
 800426c:	3a01      	subs	r2, #1
 800426e:	0652      	lsls	r2, r2, #25
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004276:	06d2      	lsls	r2, r2, #27
 8004278:	430a      	orrs	r2, r1
 800427a:	493f      	ldr	r1, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a39      	ldr	r2, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004298:	f7fe f8d0 	bl	800243c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fe f8cc 	bl	800243c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e067      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042be:	e05f      	b.n	8004380 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e05e      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d157      	bne.n	8004380 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042d0:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042e8:	f7fe f8a8 	bl	800243c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe f8a4 	bl	800243c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e03f      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x7a4>
 800430e:	e037      	b.n	8004380 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d02d      	beq.n	8004372 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800431c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004320:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4a11      	ldr	r2, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004334:	f023 0303 	bic.w	r3, r3, #3
 8004338:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004340:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004348:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fe f877 	bl	800243c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe f873 	bl	800243c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e00e      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <HAL_RCC_OscConfig+0x82c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x806>
 8004370:	e006      	b.n	8004380 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e005      	b.n	8004382 <HAL_RCC_OscConfig+0x836>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0c8      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a0:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d910      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	4961      	ldr	r1, [pc, #388]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b5f      	ldr	r3, [pc, #380]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b0      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d04c      	beq.n	8004476 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e4:	4b56      	ldr	r3, [pc, #344]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d121      	bne.n	8004434 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e09e      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fc:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e092      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004414:	4b4a      	ldr	r3, [pc, #296]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e086      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e07e      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004434:	4b42      	ldr	r3, [pc, #264]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 0203 	bic.w	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	493f      	ldr	r1, [pc, #252]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fd fff9 	bl	800243c <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444c:	e00a      	b.n	8004464 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fd fff5 	bl	800243c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e066      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004464:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 020c 	and.w	r2, r3, #12
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	429a      	cmp	r2, r3
 8004474:	d1eb      	bne.n	800444e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	492c      	ldr	r1, [pc, #176]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d210      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 0207 	bic.w	r2, r3, #7
 80044aa:	4924      	ldr	r1, [pc, #144]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_RCC_ClockConfig+0x1b0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e036      	b.n	8004532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4918      	ldr	r1, [pc, #96]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4910      	ldr	r1, [pc, #64]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004502:	f000 f825 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCC_ClockConfig+0x1b4>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490c      	ldr	r1, [pc, #48]	; (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fd3c 	bl	8001fa4 <HAL_InitTick>
 800452c:	4603      	mov	r3, r0
 800452e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004530:	7afb      	ldrb	r3, [r7, #11]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000
 8004540:	40021000 	.word	0x40021000
 8004544:	0800c41c 	.word	0x0800c41c
 8004548:	20000010 	.word	0x20000010
 800454c:	20000014 	.word	0x20000014

08004550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x34>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d11e      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004584:	4b34      	ldr	r3, [pc, #208]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004590:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045a0:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045ac:	4a2b      	ldr	r2, [pc, #172]	; (800465c <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d102      	bne.n	80045ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e004      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCC_GetSysClockFreq+0x114>)
 80045d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d134      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d003      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0xac>
 80045f4:	e005      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_RCC_GetSysClockFreq+0x110>)
 80045f8:	617b      	str	r3, [r7, #20]
      break;
 80045fa:	e005      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_GetSysClockFreq+0x114>)
 80045fe:	617b      	str	r3, [r7, #20]
      break;
 8004600:	e002      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	617b      	str	r3, [r7, #20]
      break;
 8004606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	3301      	adds	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	fb02 f203 	mul.w	r2, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	0e5b      	lsrs	r3, r3, #25
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	3301      	adds	r3, #1
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004648:	69bb      	ldr	r3, [r7, #24]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	0800c434 	.word	0x0800c434
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000010 	.word	0x20000010

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800c42c 	.word	0x0800c42c

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046b0:	f7ff ffda 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0adb      	lsrs	r3, r3, #11
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	0800c42c 	.word	0x0800c42c

080046d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	220f      	movs	r2, #15
 80046e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCC_GetClockConfig+0x60>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0207 	and.w	r2, r3, #7
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40022000 	.word	0x40022000

0800473c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004754:	f7ff f996 	bl	8003a84 <HAL_PWREx_GetVoltageRange>
 8004758:	6178      	str	r0, [r7, #20]
 800475a:	e014      	b.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	6593      	str	r3, [r2, #88]	; 0x58
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004774:	f7ff f986 	bl	8003a84 <HAL_PWREx_GetVoltageRange>
 8004778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004784:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478c:	d10b      	bne.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d919      	bls.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2ba0      	cmp	r3, #160	; 0xa0
 8004798:	d902      	bls.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800479a:	2302      	movs	r3, #2
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e013      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a0:	2301      	movs	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e010      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d902      	bls.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047ac:	2303      	movs	r3, #3
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e00a      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d102      	bne.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b8:	2302      	movs	r3, #2
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e004      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b70      	cmp	r3, #112	; 0x70
 80047c2:	d101      	bne.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c4:	2301      	movs	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 0207 	bic.w	r2, r3, #7
 80047d0:	4909      	ldr	r1, [pc, #36]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d001      	beq.n	80047ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40022000 	.word	0x40022000

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004804:	2300      	movs	r3, #0
 8004806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004808:	2300      	movs	r3, #0
 800480a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d031      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004820:	d01a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004822:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004826:	d814      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800482c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004830:	d10f      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004832:	4bac      	ldr	r3, [pc, #688]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4aab      	ldr	r2, [pc, #684]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f9dc 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004850:	e003      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	74fb      	strb	r3, [r7, #19]
      break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004860:	4ba0      	ldr	r3, [pc, #640]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	499d      	ldr	r1, [pc, #628]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8099 	beq.w	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800488e:	4b95      	ldr	r3, [pc, #596]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	4a8e      	ldr	r2, [pc, #568]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6593      	str	r3, [r2, #88]	; 0x58
 80048b0:	4b8c      	ldr	r3, [pc, #560]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c0:	4b89      	ldr	r3, [pc, #548]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a88      	ldr	r2, [pc, #544]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048cc:	f7fd fdb6 	bl	800243c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d2:	e009      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fd fdb2 	bl	800243c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	74fb      	strb	r3, [r7, #19]
        break;
 80048e6:	e005      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e8:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d155      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fa:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01e      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	429a      	cmp	r2, r3
 8004914:	d019      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004916:	4b73      	ldr	r3, [pc, #460]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004922:	4b70      	ldr	r3, [pc, #448]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004942:	4a68      	ldr	r2, [pc, #416]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fd72 	bl	800243c <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	e00b      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd fd6e 	bl	800243c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d902      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	74fb      	strb	r3, [r7, #19]
            break;
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004974:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ec      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004988:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	4953      	ldr	r1, [pc, #332]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
 80049a4:	e001      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049aa:	7c7b      	ldrb	r3, [r7, #17]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	4a4b      	ldr	r2, [pc, #300]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c8:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4943      	ldr	r1, [pc, #268]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ea:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f023 020c 	bic.w	r2, r3, #12
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	493a      	ldr	r1, [pc, #232]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a0c:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	4932      	ldr	r1, [pc, #200]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	4929      	ldr	r1, [pc, #164]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	4921      	ldr	r1, [pc, #132]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4918      	ldr	r1, [pc, #96]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	4910      	ldr	r1, [pc, #64]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02c      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	4907      	ldr	r1, [pc, #28]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad4:	d10a      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad6:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4a02      	ldr	r2, [pc, #8]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae0:	60d3      	str	r3, [r2, #12]
 8004ae2:	e015      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	2101      	movs	r1, #1
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f881 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d028      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b1c:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	492d      	ldr	r1, [pc, #180]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b46:	60d3      	str	r3, [r2, #12]
 8004b48:	e011      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b52:	d10c      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f852 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01c      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b88:	4915      	ldr	r1, [pc, #84]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f82f 	bl	8004c04 <RCCEx_PLLSAI1_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000

08004be4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000

08004c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c12:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c1e:	4b71      	ldr	r3, [pc, #452]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d10d      	bne.n	8004c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
       ||
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c36:	4b6b      	ldr	r3, [pc, #428]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
       ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d047      	beq.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
 8004c4e:	e044      	b.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d018      	beq.n	8004c8a <RCCEx_PLLSAI1_Config+0x86>
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d825      	bhi.n	8004ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d002      	beq.n	8004c66 <RCCEx_PLLSAI1_Config+0x62>
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d009      	beq.n	8004c78 <RCCEx_PLLSAI1_Config+0x74>
 8004c64:	e020      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d11d      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c76:	e01a      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c78:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c88:	e013      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ca6:	e006      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e004      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cbe:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	4943      	ldr	r1, [pc, #268]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d17c      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ce0:	4b40      	ldr	r3, [pc, #256]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a3f      	ldr	r2, [pc, #252]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fd fba6 	bl	800243c <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cf4:	f7fd fba2 	bl	800243c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
        break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ef      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d15f      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d110      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6892      	ldr	r2, [r2, #8]
 8004d30:	0211      	lsls	r1, r2, #8
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	06d2      	lsls	r2, r2, #27
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	492a      	ldr	r1, [pc, #168]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
 8004d40:	e027      	b.n	8004d92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d112      	bne.n	8004d6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6892      	ldr	r2, [r2, #8]
 8004d58:	0211      	lsls	r1, r2, #8
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6912      	ldr	r2, [r2, #16]
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0552      	lsls	r2, r2, #21
 8004d64:	430a      	orrs	r2, r1
 8004d66:	491f      	ldr	r1, [pc, #124]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	610b      	str	r3, [r1, #16]
 8004d6c:	e011      	b.n	8004d92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	0211      	lsls	r1, r2, #8
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6952      	ldr	r2, [r2, #20]
 8004d84:	0852      	lsrs	r2, r2, #1
 8004d86:	3a01      	subs	r2, #1
 8004d88:	0652      	lsls	r2, r2, #25
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	4915      	ldr	r1, [pc, #84]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fb4d 	bl	800243c <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da4:	e009      	b.n	8004dba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da6:	f7fd fb49 	bl	800243c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d902      	bls.n	8004dba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	73fb      	strb	r3, [r7, #15]
          break;
 8004db8:	e005      	b.n	8004dc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ef      	beq.n	8004da6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000

08004de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e095      	b.n	8004f26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d009      	beq.n	8004e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e005      	b.n	8004e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc fd6a 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e60:	d902      	bls.n	8004e68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e002      	b.n	8004e6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e76:	d007      	beq.n	8004e88 <HAL_SPI_Init+0xa0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	ea42 0103 	orr.w	r1, r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	f003 0204 	and.w	r2, r3, #4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e049      	b.n	8004fd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f841 	bl	8004fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 f9db 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e03b      	b.n	8005080 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_TIM_Base_Start_IT+0x9c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x4e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d004      	beq.n	800503e <HAL_TIM_Base_Start_IT+0x4e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a15      	ldr	r2, [pc, #84]	; (8005090 <HAL_TIM_Base_Start_IT+0xa0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d115      	bne.n	800506a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <HAL_TIM_Base_Start_IT+0xa4>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d015      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x8c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d011      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e008      	b.n	800507c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e000      	b.n	800507e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40014000 	.word	0x40014000
 8005094:	00010007 	.word	0x00010007

08005098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0202 	mvn.w	r2, #2
 80050c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f905 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8f7 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f908 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0204 	mvn.w	r2, #4
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8db 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8cd 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8de 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b08      	cmp	r3, #8
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0208 	mvn.w	r2, #8
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2204      	movs	r2, #4
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8b1 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8a3 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8b4 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0210 	mvn.w	r2, #16
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2208      	movs	r2, #8
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f887 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f879 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f88a 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0201 	mvn.w	r2, #1
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc f9f8 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d107      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8de 	bl	8005404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d10e      	bne.n	8005276 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d107      	bne.n	8005276 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8d1 	bl	8005418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d10e      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f838 	bl	8005312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d10e      	bne.n	80052ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d107      	bne.n	80052ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0220 	mvn.w	r2, #32
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f891 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <TIM_Base_SetConfig+0xbc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x20>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <TIM_Base_SetConfig+0xbc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x52>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x52>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <TIM_Base_SetConfig+0xc0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x52>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <TIM_Base_SetConfig+0xc4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0c      	ldr	r2, [pc, #48]	; (80053e4 <TIM_Base_SetConfig+0xbc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_Base_SetConfig+0xa0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <TIM_Base_SetConfig+0xc0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_Base_SetConfig+0xa0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <TIM_Base_SetConfig+0xc4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	615a      	str	r2, [r3, #20]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e040      	b.n	80054c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc ff34 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f82c 	bl	80054c8 <UART_SetConfig>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa2a 	bl	80058dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fab1 	bl	8005a20 <UART_CheckIdleState>
 80054be:	4603      	mov	r3, r0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4baf      	ldr	r3, [pc, #700]	; (80057b0 <UART_SetConfig+0x2e8>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	69f9      	ldr	r1, [r7, #28]
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4aa4      	ldr	r2, [pc, #656]	; (80057b4 <UART_SetConfig+0x2ec>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a9b      	ldr	r2, [pc, #620]	; (80057b8 <UART_SetConfig+0x2f0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d121      	bne.n	8005592 <UART_SetConfig+0xca>
 800554e:	4b9b      	ldr	r3, [pc, #620]	; (80057bc <UART_SetConfig+0x2f4>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b03      	cmp	r3, #3
 800555a:	d817      	bhi.n	800558c <UART_SetConfig+0xc4>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x9c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575
 8005568:	08005581 	.word	0x08005581
 800556c:	0800557b 	.word	0x0800557b
 8005570:	08005587 	.word	0x08005587
 8005574:	2301      	movs	r3, #1
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e070      	b.n	800565c <UART_SetConfig+0x194>
 800557a:	2302      	movs	r3, #2
 800557c:	76fb      	strb	r3, [r7, #27]
 800557e:	e06d      	b.n	800565c <UART_SetConfig+0x194>
 8005580:	2304      	movs	r3, #4
 8005582:	76fb      	strb	r3, [r7, #27]
 8005584:	e06a      	b.n	800565c <UART_SetConfig+0x194>
 8005586:	2308      	movs	r3, #8
 8005588:	76fb      	strb	r3, [r7, #27]
 800558a:	e067      	b.n	800565c <UART_SetConfig+0x194>
 800558c:	2310      	movs	r3, #16
 800558e:	76fb      	strb	r3, [r7, #27]
 8005590:	e064      	b.n	800565c <UART_SetConfig+0x194>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a8a      	ldr	r2, [pc, #552]	; (80057c0 <UART_SetConfig+0x2f8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d132      	bne.n	8005602 <UART_SetConfig+0x13a>
 800559c:	4b87      	ldr	r3, [pc, #540]	; (80057bc <UART_SetConfig+0x2f4>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d828      	bhi.n	80055fc <UART_SetConfig+0x134>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0xe8>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	080055fd 	.word	0x080055fd
 80055c8:	080055fd 	.word	0x080055fd
 80055cc:	080055fd 	.word	0x080055fd
 80055d0:	080055eb 	.word	0x080055eb
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	080055f7 	.word	0x080055f7
 80055e4:	2300      	movs	r3, #0
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e038      	b.n	800565c <UART_SetConfig+0x194>
 80055ea:	2302      	movs	r3, #2
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e035      	b.n	800565c <UART_SetConfig+0x194>
 80055f0:	2304      	movs	r3, #4
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e032      	b.n	800565c <UART_SetConfig+0x194>
 80055f6:	2308      	movs	r3, #8
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e02f      	b.n	800565c <UART_SetConfig+0x194>
 80055fc:	2310      	movs	r3, #16
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	e02c      	b.n	800565c <UART_SetConfig+0x194>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a6b      	ldr	r2, [pc, #428]	; (80057b4 <UART_SetConfig+0x2ec>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d125      	bne.n	8005658 <UART_SetConfig+0x190>
 800560c:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <UART_SetConfig+0x2f4>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561a:	d017      	beq.n	800564c <UART_SetConfig+0x184>
 800561c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005620:	d817      	bhi.n	8005652 <UART_SetConfig+0x18a>
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d00b      	beq.n	8005640 <UART_SetConfig+0x178>
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562c:	d811      	bhi.n	8005652 <UART_SetConfig+0x18a>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <UART_SetConfig+0x172>
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005636:	d006      	beq.n	8005646 <UART_SetConfig+0x17e>
 8005638:	e00b      	b.n	8005652 <UART_SetConfig+0x18a>
 800563a:	2300      	movs	r3, #0
 800563c:	76fb      	strb	r3, [r7, #27]
 800563e:	e00d      	b.n	800565c <UART_SetConfig+0x194>
 8005640:	2302      	movs	r3, #2
 8005642:	76fb      	strb	r3, [r7, #27]
 8005644:	e00a      	b.n	800565c <UART_SetConfig+0x194>
 8005646:	2304      	movs	r3, #4
 8005648:	76fb      	strb	r3, [r7, #27]
 800564a:	e007      	b.n	800565c <UART_SetConfig+0x194>
 800564c:	2308      	movs	r3, #8
 800564e:	76fb      	strb	r3, [r7, #27]
 8005650:	e004      	b.n	800565c <UART_SetConfig+0x194>
 8005652:	2310      	movs	r3, #16
 8005654:	76fb      	strb	r3, [r7, #27]
 8005656:	e001      	b.n	800565c <UART_SetConfig+0x194>
 8005658:	2310      	movs	r3, #16
 800565a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <UART_SetConfig+0x2ec>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d173      	bne.n	800574e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005666:	7efb      	ldrb	r3, [r7, #27]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d824      	bhi.n	80056b6 <UART_SetConfig+0x1ee>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x1ac>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005699 	.word	0x08005699
 8005678:	080056b7 	.word	0x080056b7
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056b7 	.word	0x080056b7
 8005684:	080056a7 	.word	0x080056a7
 8005688:	080056b7 	.word	0x080056b7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056af 	.word	0x080056af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fff2 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800569c:	6178      	str	r0, [r7, #20]
        break;
 800569e:	e00f      	b.n	80056c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b48      	ldr	r3, [pc, #288]	; (80057c4 <UART_SetConfig+0x2fc>)
 80056a2:	617b      	str	r3, [r7, #20]
        break;
 80056a4:	e00c      	b.n	80056c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7fe ff53 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80056aa:	6178      	str	r0, [r7, #20]
        break;
 80056ac:	e008      	b.n	80056c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b2:	617b      	str	r3, [r7, #20]
        break;
 80056b4:	e004      	b.n	80056c0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	76bb      	strb	r3, [r7, #26]
        break;
 80056be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80fc 	beq.w	80058c0 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4413      	add	r3, r2
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d305      	bcc.n	80056e4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	76bb      	strb	r3, [r7, #26]
 80056e8:	e0ea      	b.n	80058c0 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	020b      	lsls	r3, r1, #8
 80056fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005700:	0202      	lsls	r2, r0, #8
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	6849      	ldr	r1, [r1, #4]
 8005706:	0849      	lsrs	r1, r1, #1
 8005708:	4608      	mov	r0, r1
 800570a:	f04f 0100 	mov.w	r1, #0
 800570e:	1814      	adds	r4, r2, r0
 8005710:	eb43 0501 	adc.w	r5, r3, r1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	461a      	mov	r2, r3
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb fa41 	bl	8000ba8 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4613      	mov	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005734:	d308      	bcc.n	8005748 <UART_SetConfig+0x280>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573c:	d204      	bcs.n	8005748 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	e0bb      	b.n	80058c0 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	76bb      	strb	r3, [r7, #26]
 800574c:	e0b8      	b.n	80058c0 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d167      	bne.n	8005828 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8005758:	7efb      	ldrb	r3, [r7, #27]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d834      	bhi.n	80057c8 <UART_SetConfig+0x300>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x29c>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005789 	.word	0x08005789
 8005768:	08005791 	.word	0x08005791
 800576c:	08005799 	.word	0x08005799
 8005770:	080057c9 	.word	0x080057c9
 8005774:	0800579f 	.word	0x0800579f
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057a7 	.word	0x080057a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe ff7a 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800578c:	6178      	str	r0, [r7, #20]
        break;
 800578e:	e020      	b.n	80057d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005790:	f7fe ff8c 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8005794:	6178      	str	r0, [r7, #20]
        break;
 8005796:	e01c      	b.n	80057d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <UART_SetConfig+0x2fc>)
 800579a:	617b      	str	r3, [r7, #20]
        break;
 800579c:	e019      	b.n	80057d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579e:	f7fe fed7 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80057a2:	6178      	str	r0, [r7, #20]
        break;
 80057a4:	e015      	b.n	80057d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057aa:	617b      	str	r3, [r7, #20]
        break;
 80057ac:	e011      	b.n	80057d2 <UART_SetConfig+0x30a>
 80057ae:	bf00      	nop
 80057b0:	efff69f3 	.word	0xefff69f3
 80057b4:	40008000 	.word	0x40008000
 80057b8:	40013800 	.word	0x40013800
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40004400 	.word	0x40004400
 80057c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	76bb      	strb	r3, [r7, #26]
        break;
 80057d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d073      	beq.n	80058c0 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005a      	lsls	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b0f      	cmp	r3, #15
 80057f2:	d916      	bls.n	8005822 <UART_SetConfig+0x35a>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d212      	bcs.n	8005822 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f023 030f 	bic.w	r3, r3, #15
 8005804:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	b29b      	uxth	r3, r3
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	b29a      	uxth	r2, r3
 8005812:	89fb      	ldrh	r3, [r7, #14]
 8005814:	4313      	orrs	r3, r2
 8005816:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	89fa      	ldrh	r2, [r7, #14]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	e04e      	b.n	80058c0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	76bb      	strb	r3, [r7, #26]
 8005826:	e04b      	b.n	80058c0 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005828:	7efb      	ldrb	r3, [r7, #27]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d827      	bhi.n	800587e <UART_SetConfig+0x3b6>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x36c>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe ff12 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800585c:	6178      	str	r0, [r7, #20]
        break;
 800585e:	e013      	b.n	8005888 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fe ff24 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8005864:	6178      	str	r0, [r7, #20]
        break;
 8005866:	e00f      	b.n	8005888 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <UART_SetConfig+0x410>)
 800586a:	617b      	str	r3, [r7, #20]
        break;
 800586c:	e00c      	b.n	8005888 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fe fe6f 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8005872:	6178      	str	r0, [r7, #20]
        break;
 8005874:	e008      	b.n	8005888 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	617b      	str	r3, [r7, #20]
        break;
 800587c:	e004      	b.n	8005888 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	76bb      	strb	r3, [r7, #26]
        break;
 8005886:	bf00      	nop
    }

    if (pclk != 0U)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	085a      	lsrs	r2, r3, #1
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	441a      	add	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b0f      	cmp	r3, #15
 80058a6:	d909      	bls.n	80058bc <UART_SetConfig+0x3f4>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ae:	d205      	bcs.n	80058bc <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	e001      	b.n	80058c0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	00f42400 	.word	0x00f42400

080058dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059da:	d10a      	bne.n	80059f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a30:	f7fc fd04 	bl	800243c <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d10e      	bne.n	8005a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f82d 	bl	8005ab2 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e023      	b.n	8005aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d10e      	bne.n	8005a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f817 	bl	8005ab2 <UART_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e00d      	b.n	8005aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b09c      	sub	sp, #112	; 0x70
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	e0a5      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	f000 80a1 	beq.w	8005c10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fc fcb5 	bl	800243c <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d13e      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af8:	667b      	str	r3, [r7, #100]	; 0x64
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e6      	bne.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e067      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d04f      	beq.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7e:	d147      	bne.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e010      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69da      	ldr	r2, [r3, #28]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	f43f af4a 	beq.w	8005ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3770      	adds	r7, #112	; 0x70
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c40:	4904      	ldr	r1, [pc, #16]	; (8005c54 <MX_FATFS_Init+0x18>)
 8005c42:	4805      	ldr	r0, [pc, #20]	; (8005c58 <MX_FATFS_Init+0x1c>)
 8005c44:	f000 f8b0 	bl	8005da8 <FATFS_LinkDriver>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <MX_FATFS_Init+0x20>)
 8005c4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c50:	bf00      	nop
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20008164 	.word	0x20008164
 8005c58:	2000001c 	.word	0x2000001c
 8005c5c:	20008168 	.word	0x20008168

08005c60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <USER_initialize+0x24>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <USER_initialize+0x24>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000019 	.word	0x20000019

08005c88 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <USER_status+0x24>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005c98:	4b04      	ldr	r3, [pc, #16]	; (8005cac <USER_status+0x24>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000019 	.word	0x20000019

08005cb0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005cc0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005cde:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	603a      	str	r2, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
    return res;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d28:	7a5b      	ldrb	r3, [r3, #9]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d131      	bne.n	8005d94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d32:	7a5b      	ldrb	r3, [r3, #9]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d40:	7a5b      	ldrb	r3, [r3, #9]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d50:	7a5b      	ldrb	r3, [r3, #9]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	79fa      	ldrb	r2, [r7, #7]
 8005d5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d60:	7a5b      	ldrb	r3, [r3, #9]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	b2d1      	uxtb	r1, r2
 8005d68:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <FATFS_LinkDriverEx+0x94>)
 8005d6a:	7251      	strb	r1, [r2, #9]
 8005d6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005d6e:	7dbb      	ldrb	r3, [r7, #22]
 8005d70:	3330      	adds	r3, #48	; 0x30
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	223a      	movs	r2, #58	; 0x3a
 8005d7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3302      	adds	r3, #2
 8005d84:	222f      	movs	r2, #47	; 0x2f
 8005d86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	3303      	adds	r3, #3
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	200008e0 	.word	0x200008e0

08005da8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005db2:	2200      	movs	r2, #0
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffaa 	bl	8005d10 <FATFS_LinkDriverEx>
 8005dbc:	4603      	mov	r3, r0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd8:	2b84      	cmp	r3, #132	; 0x84
 8005dda:	d005      	beq.n	8005de8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ddc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	3303      	adds	r3, #3
 8005de6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005de8:	68fb      	ldr	r3, [r7, #12]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfc:	f3ef 8305 	mrs	r3, IPSR
 8005e00:	607b      	str	r3, [r7, #4]
  return(result);
 8005e02:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e1e:	f001 f9c1 	bl	80071a4 <vTaskStartScheduler>
  
  return osOK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d020      	beq.n	8005e7c <osThreadCreate+0x54>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01c      	beq.n	8005e7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685c      	ldr	r4, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691e      	ldr	r6, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ffb6 	bl	8005dc6 <makeFreeRtosPriority>
 8005e5a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	9100      	str	r1, [sp, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 ff29 	bl	8006cc8 <xTaskCreateStatic>
 8005e76:	4603      	mov	r3, r0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e01c      	b.n	8005eb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685c      	ldr	r4, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e88:	b29e      	uxth	r6, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ff98 	bl	8005dc6 <makeFreeRtosPriority>
 8005e96:	4602      	mov	r2, r0
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	9200      	str	r2, [sp, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 ff6b 	bl	8006d82 <xTaskCreate>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d001      	beq.n	8005eb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ec0 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 f8a7 	bl	800701c <vTaskDelete>
  return osOK;
 8005ece:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <osDelay+0x16>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	e000      	b.n	8005ef0 <osDelay+0x18>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f923 	bl	800713c <vTaskDelay>
  
  return osOK;
 8005ef6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10a      	bne.n	8005f2e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	9200      	str	r2, [sp, #0]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2100      	movs	r1, #0
 8005f24:	2001      	movs	r0, #1
 8005f26:	f000 f9bd 	bl	80062a4 <xQueueGenericCreateStatic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e016      	b.n	8005f5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e014      	b.n	8005f5c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d110      	bne.n	8005f5a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005f38:	2203      	movs	r2, #3
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f000 fa29 	bl	8006394 <xQueueGenericCreate>
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <osSemaphoreCreate+0x56>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fa79 	bl	8006448 <xQueueGenericSend>
      return sema;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e000      	b.n	8005f5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005f5a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	e03a      	b.n	8005ff2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d103      	bne.n	8005f90 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e009      	b.n	8005fa4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d006      	beq.n	8005fa4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <osSemaphoreWait+0x40>
      ticks = 1;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005fa4:	f7ff ff27 	bl	8005df6 <inHandlerMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fcde 	bl	8006978 <xQueueReceiveFromISR>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005fc2:	23ff      	movs	r3, #255	; 0xff
 8005fc4:	e015      	b.n	8005ff2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d011      	beq.n	8005ff0 <osSemaphoreWait+0x8c>
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <osSemaphoreWait+0x98>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	e008      	b.n	8005ff0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fbbd 	bl	8006760 <xQueueSemaphoreTake>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005fec:	23ff      	movs	r3, #255	; 0xff
 8005fee:	e000      	b.n	8005ff2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006010:	f7ff fef1 	bl	8005df6 <inHandlerMode>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb0f 	bl	8006644 <xQueueGiveFromISR>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800602c:	23ff      	movs	r3, #255	; 0xff
 800602e:	e017      	b.n	8006060 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d013      	beq.n	800605e <osSemaphoreRelease+0x5e>
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <osSemaphoreRelease+0x68>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	e00a      	b.n	800605e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006048:	2300      	movs	r3, #0
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9fa 	bl	8006448 <xQueueGenericSend>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800605a:	23ff      	movs	r3, #255	; 0xff
 800605c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0208 	add.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f103 0208 	add.w	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f103 0208 	add.w	r2, r3, #8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d103      	bne.n	800612e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e00c      	b.n	8006148 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3308      	adds	r3, #8
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <vListInsert+0x2e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d2f6      	bcs.n	8006136 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6852      	ldr	r2, [r2, #4]
 80061a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d103      	bne.n	80061b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061fe:	f001 ff41 	bl	8008084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	3b01      	subs	r3, #1
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	441a      	add	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	22ff      	movs	r2, #255	; 0xff
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d114      	bne.n	800627e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01a      	beq.n	8006292 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3310      	adds	r3, #16
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fa01 	bl	8007668 <xTaskRemoveFromEventList>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d012      	beq.n	8006292 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <xQueueGenericReset+0xcc>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	e009      	b.n	8006292 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3310      	adds	r3, #16
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fef2 	bl	800606c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff feed 	bl	800606c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006292:	f001 ff27 	bl	80080e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006296:	2301      	movs	r3, #1
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	; 0x38
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <xQueueGenericCreateStatic+0x52>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <xQueueGenericCreateStatic+0x56>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericCreateStatic+0x58>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <xQueueGenericCreateStatic+0x7e>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueGenericCreateStatic+0x82>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <xQueueGenericCreateStatic+0x84>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61fb      	str	r3, [r7, #28]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006342:	2348      	movs	r3, #72	; 0x48
 8006344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b48      	cmp	r3, #72	; 0x48
 800634a:	d00a      	beq.n	8006362 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	61bb      	str	r3, [r7, #24]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006362:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006376:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	4613      	mov	r3, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f83f 	bl	8006408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3730      	adds	r7, #48	; 0x30
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xQueueGenericCreate+0x2a>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	613b      	str	r3, [r7, #16]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	3348      	adds	r3, #72	; 0x48
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 ff7b 	bl	80082c8 <pvPortMalloc>
 80063d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	3348      	adds	r3, #72	; 0x48
 80063e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063ec:	79fa      	ldrb	r2, [r7, #7]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f805 	bl	8006408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e002      	b.n	800642a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006436:	2101      	movs	r1, #1
 8006438:	69b8      	ldr	r0, [r7, #24]
 800643a:	f7ff fecb 	bl	80061d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08e      	sub	sp, #56	; 0x38
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006456:	2300      	movs	r3, #0
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericSend+0x32>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueGenericSend+0x40>
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <xQueueGenericSend+0x44>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <xQueueGenericSend+0x46>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d103      	bne.n	80064b6 <xQueueGenericSend+0x6e>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <xQueueGenericSend+0x72>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueGenericSend+0x74>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d6:	f001 fa87 	bl	80079e8 <xTaskGetSchedulerState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <xQueueGenericSend+0x9e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <xQueueGenericSend+0xa2>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <xQueueGenericSend+0xa4>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xQueueGenericSend+0xbe>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61fb      	str	r3, [r7, #28]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006506:	f001 fdbd 	bl	8008084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <xQueueGenericSend+0xd4>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d129      	bne.n	8006570 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006522:	f000 fac1 	bl	8006aa8 <prvCopyDataToQueue>
 8006526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f897 	bl	8007668 <xTaskRemoveFromEventList>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d013      	beq.n	8006568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <xQueueGenericSend+0x1f8>)
 8006542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	e00a      	b.n	8006568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006558:	4b39      	ldr	r3, [pc, #228]	; (8006640 <xQueueGenericSend+0x1f8>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006568:	f001 fdbc 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 800656c:	2301      	movs	r3, #1
 800656e:	e063      	b.n	8006638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006576:	f001 fdb5 	bl	80080e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800657a:	2300      	movs	r3, #0
 800657c:	e05c      	b.n	8006638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	4618      	mov	r0, r3
 800658a:	f001 f8cf 	bl	800772c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006592:	f001 fda7 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006596:	f000 fe6f 	bl	8007278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800659a:	f001 fd73 	bl	8008084 <vPortEnterCritical>
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a4:	b25b      	sxtb	r3, r3
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d103      	bne.n	80065b4 <xQueueGenericSend+0x16c>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ba:	b25b      	sxtb	r3, r3
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d103      	bne.n	80065ca <xQueueGenericSend+0x182>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ca:	f001 fd8b 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ce:	1d3a      	adds	r2, r7, #4
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 f8be 	bl	8007758 <xTaskCheckForTimeOut>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d124      	bne.n	800662c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e4:	f000 fb58 	bl	8006c98 <prvIsQueueFull>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d018      	beq.n	8006620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	3310      	adds	r3, #16
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f812 	bl	8007620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065fe:	f000 fae3 	bl	8006bc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006602:	f000 fe47 	bl	8007294 <xTaskResumeAll>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	f47f af7c 	bne.w	8006506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <xQueueGenericSend+0x1f8>)
 8006610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	e772      	b.n	8006506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006622:	f000 fad1 	bl	8006bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006626:	f000 fe35 	bl	8007294 <xTaskResumeAll>
 800662a:	e76c      	b.n	8006506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800662c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800662e:	f000 facb 	bl	8006bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006632:	f000 fe2f 	bl	8007294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006638:	4618      	mov	r0, r3
 800663a:	3738      	adds	r7, #56	; 0x38
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08e      	sub	sp, #56	; 0x38
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	623b      	str	r3, [r7, #32]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <xQueueGiveFromISR+0x48>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	61fb      	str	r3, [r7, #28]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <xQueueGiveFromISR+0x58>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <xQueueGiveFromISR+0x5c>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <xQueueGiveFromISR+0x5e>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <xQueueGiveFromISR+0x78>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	61bb      	str	r3, [r7, #24]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066bc:	f001 fdc4 	bl	8008248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066c0:	f3ef 8211 	mrs	r2, BASEPRI
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	617a      	str	r2, [r7, #20]
 80066d6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d22b      	bcs.n	8006744 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d112      	bne.n	800672e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d016      	beq.n	800673e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 ffa7 	bl	8007668 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e007      	b.n	800673e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800672e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006732:	3301      	adds	r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	b25a      	sxtb	r2, r3
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800673e:	2301      	movs	r3, #1
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
 8006742:	e001      	b.n	8006748 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006744:	2300      	movs	r3, #0
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006752:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006756:	4618      	mov	r0, r3
 8006758:	3738      	adds	r7, #56	; 0x38
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	; 0x38
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	623b      	str	r3, [r7, #32]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	61fb      	str	r3, [r7, #28]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b0:	f001 f91a 	bl	80079e8 <xTaskGetSchedulerState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <xQueueSemaphoreTake+0x60>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <xQueueSemaphoreTake+0x64>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <xQueueSemaphoreTake+0x66>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61bb      	str	r3, [r7, #24]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067e0:	f001 fc50 	bl	8008084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d024      	beq.n	800683a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	1e5a      	subs	r2, r3, #1
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006800:	f001 fa9a 	bl	8007d38 <pvTaskIncrementMutexHeldCount>
 8006804:	4602      	mov	r2, r0
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00f      	beq.n	8006832 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	3310      	adds	r3, #16
 8006816:	4618      	mov	r0, r3
 8006818:	f000 ff26 	bl	8007668 <xTaskRemoveFromEventList>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006822:	4b54      	ldr	r3, [pc, #336]	; (8006974 <xQueueSemaphoreTake+0x214>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006832:	f001 fc57 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8006836:	2301      	movs	r3, #1
 8006838:	e097      	b.n	800696a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d111      	bne.n	8006864 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	617b      	str	r3, [r7, #20]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800685c:	f001 fc42 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006860:	2300      	movs	r3, #0
 8006862:	e082      	b.n	800696a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800686a:	f107 030c 	add.w	r3, r7, #12
 800686e:	4618      	mov	r0, r3
 8006870:	f000 ff5c 	bl	800772c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006878:	f001 fc34 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800687c:	f000 fcfc 	bl	8007278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006880:	f001 fc00 	bl	8008084 <vPortEnterCritical>
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800688a:	b25b      	sxtb	r3, r3
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d103      	bne.n	800689a <xQueueSemaphoreTake+0x13a>
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d103      	bne.n	80068b0 <xQueueSemaphoreTake+0x150>
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b0:	f001 fc18 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068b4:	463a      	mov	r2, r7
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 ff4b 	bl	8007758 <xTaskCheckForTimeOut>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d132      	bne.n	800692e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ca:	f000 f9cf 	bl	8006c6c <prvIsQueueEmpty>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d026      	beq.n	8006922 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80068dc:	f001 fbd2 	bl	8008084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f89d 	bl	8007a24 <xTaskPriorityInherit>
 80068ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80068ec:	f001 fbfa 	bl	80080e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fe91 	bl	8007620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006900:	f000 f962 	bl	8006bc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006904:	f000 fcc6 	bl	8007294 <xTaskResumeAll>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f47f af68 	bne.w	80067e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <xQueueSemaphoreTake+0x214>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	e75e      	b.n	80067e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006924:	f000 f950 	bl	8006bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006928:	f000 fcb4 	bl	8007294 <xTaskResumeAll>
 800692c:	e758      	b.n	80067e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800692e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006930:	f000 f94a 	bl	8006bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006934:	f000 fcae 	bl	8007294 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800693a:	f000 f997 	bl	8006c6c <prvIsQueueEmpty>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	f43f af4d 	beq.w	80067e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800694c:	f001 fb9a 	bl	8008084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006952:	f000 f891 	bl	8006a78 <prvGetDisinheritPriorityAfterTimeout>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f001 f95c 	bl	8007c1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006964:	f001 fbbe 	bl	80080e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800696a:	4618      	mov	r0, r3
 800696c:	3738      	adds	r7, #56	; 0x38
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	; 0x38
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	623b      	str	r3, [r7, #32]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <xQueueReceiveFromISR+0x3a>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <xQueueReceiveFromISR+0x3e>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <xQueueReceiveFromISR+0x40>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61fb      	str	r3, [r7, #28]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069d2:	f001 fc39 	bl	8008248 <vPortValidateInterruptPriority>
	__asm volatile
 80069d6:	f3ef 8211 	mrs	r2, BASEPRI
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	61ba      	str	r2, [r7, #24]
 80069ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02f      	beq.n	8006a5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a0c:	f000 f8b6 	bl	8006b7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	1e5a      	subs	r2, r3, #1
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d112      	bne.n	8006a48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d016      	beq.n	8006a58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fe1a 	bl	8007668 <xTaskRemoveFromEventList>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e007      	b.n	8006a58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	b25a      	sxtb	r2, r3
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5c:	e001      	b.n	8006a62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f383 8811 	msr	BASEPRI, r3
}
 8006a6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3738      	adds	r7, #56	; 0x38
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f1c3 0307 	rsb	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e001      	b.n	8006a9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10d      	bne.n	8006ae2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d14d      	bne.n	8006b6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 f81c 	bl	8007b10 <xTaskPriorityDisinherit>
 8006ad8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	e043      	b.n	8006b6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d119      	bne.n	8006b1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6858      	ldr	r0, [r3, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	461a      	mov	r2, r3
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	f001 ff25 	bl	8008942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d32b      	bcc.n	8006b6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	e026      	b.n	8006b6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68d8      	ldr	r0, [r3, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	461a      	mov	r2, r3
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	f001 ff0b 	bl	8008942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	425b      	negs	r3, r3
 8006b36:	441a      	add	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d207      	bcs.n	8006b58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	425b      	negs	r3, r3
 8006b52:	441a      	add	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d105      	bne.n	8006b6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b72:	697b      	ldr	r3, [r7, #20]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d303      	bcc.n	8006bb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68d9      	ldr	r1, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6838      	ldr	r0, [r7, #0]
 8006bbc:	f001 fec1 	bl	8008942 <memcpy>
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bd0:	f001 fa58 	bl	8008084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bdc:	e011      	b.n	8006c02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d012      	beq.n	8006c0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3324      	adds	r3, #36	; 0x24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fd3c 	bl	8007668 <xTaskRemoveFromEventList>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bf6:	f000 fe11 	bl	800781c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dce9      	bgt.n	8006bde <prvUnlockQueue+0x16>
 8006c0a:	e000      	b.n	8006c0e <prvUnlockQueue+0x46>
					break;
 8006c0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	22ff      	movs	r2, #255	; 0xff
 8006c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c16:	f001 fa65 	bl	80080e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c1a:	f001 fa33 	bl	8008084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c26:	e011      	b.n	8006c4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d012      	beq.n	8006c56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3310      	adds	r3, #16
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fd17 	bl	8007668 <xTaskRemoveFromEventList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c40:	f000 fdec 	bl	800781c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dce9      	bgt.n	8006c28 <prvUnlockQueue+0x60>
 8006c54:	e000      	b.n	8006c58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c60:	f001 fa40 	bl	80080e4 <vPortExitCritical>
}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c74:	f001 fa06 	bl	8008084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e001      	b.n	8006c8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c8a:	f001 fa2b 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ca0:	f001 f9f0 	bl	8008084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d102      	bne.n	8006cb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e001      	b.n	8006cba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 fa13 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08e      	sub	sp, #56	; 0x38
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <xTaskCreateStatic+0x46>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	61fb      	str	r3, [r7, #28]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d0e:	23b4      	movs	r3, #180	; 0xb4
 8006d10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2bb4      	cmp	r3, #180	; 0xb4
 8006d16:	d00a      	beq.n	8006d2e <xTaskCreateStatic+0x66>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	61bb      	str	r3, [r7, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01e      	beq.n	8006d74 <xTaskCreateStatic+0xac>
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01b      	beq.n	8006d74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	9302      	str	r3, [sp, #8]
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f850 	bl	8006e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d6e:	f000 f8eb 	bl	8006f48 <prvAddNewTaskToReadyList>
 8006d72:	e001      	b.n	8006d78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d78:	697b      	ldr	r3, [r7, #20]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3728      	adds	r7, #40	; 0x28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08c      	sub	sp, #48	; 0x30
 8006d86:	af04      	add	r7, sp, #16
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 fa96 	bl	80082c8 <pvPortMalloc>
 8006d9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00e      	beq.n	8006dc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006da4:	20b4      	movs	r0, #180	; 0xb4
 8006da6:	f001 fa8f 	bl	80082c8 <pvPortMalloc>
 8006daa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
 8006db8:	e005      	b.n	8006dc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dba:	6978      	ldr	r0, [r7, #20]
 8006dbc:	f001 fb50 	bl	8008460 <vPortFree>
 8006dc0:	e001      	b.n	8006dc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	9302      	str	r3, [sp, #8]
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f80e 	bl	8006e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006df0:	69f8      	ldr	r0, [r7, #28]
 8006df2:	f000 f8a9 	bl	8006f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e002      	b.n	8006e02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e02:	69bb      	ldr	r3, [r7, #24]
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3720      	adds	r7, #32
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e24:	3b01      	subs	r3, #1
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	617b      	str	r3, [r7, #20]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01f      	beq.n	8006e9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	e012      	b.n	8006e86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	7819      	ldrb	r1, [r3, #0]
 8006e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3334      	adds	r3, #52	; 0x34
 8006e70:	460a      	mov	r2, r1
 8006e72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	2b0f      	cmp	r3, #15
 8006e8a:	d9e9      	bls.n	8006e60 <prvInitialiseNewTask+0x54>
 8006e8c:	e000      	b.n	8006e90 <prvInitialiseNewTask+0x84>
			{
				break;
 8006e8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e98:	e003      	b.n	8006ea2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d901      	bls.n	8006eac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ea8:	2306      	movs	r3, #6
 8006eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	2200      	movs	r2, #0
 8006ebc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff f8f2 	bl	80060ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	3318      	adds	r3, #24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff f8ed 	bl	80060ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	f1c3 0207 	rsb	r2, r3, #7
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	334c      	adds	r3, #76	; 0x4c
 8006efc:	2260      	movs	r2, #96	; 0x60
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fd46 	bl	8008992 <memset>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <prvInitialiseNewTask+0x130>)
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	; (8006f40 <prvInitialiseNewTask+0x134>)
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	4a0b      	ldr	r2, [pc, #44]	; (8006f44 <prvInitialiseNewTask+0x138>)
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	69b8      	ldr	r0, [r7, #24]
 8006f1e:	f000 ff85 	bl	8007e2c <pxPortInitialiseStack>
 8006f22:	4602      	mov	r2, r0
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f34:	bf00      	nop
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	0800c4c0 	.word	0x0800c4c0
 8006f40:	0800c4e0 	.word	0x0800c4e0
 8006f44:	0800c4a0 	.word	0x0800c4a0

08006f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f50:	f001 f898 	bl	8008084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f54:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a29      	ldr	r2, [pc, #164]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f66:	4a27      	ldr	r2, [pc, #156]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f6c:	4b24      	ldr	r3, [pc, #144]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d110      	bne.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f74:	f000 fc76 	bl	8007864 <prvInitialiseTaskLists>
 8006f78:	e00d      	b.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f7a:	4b23      	ldr	r3, [pc, #140]	; (8007008 <prvAddNewTaskToReadyList+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f82:	4b20      	ldr	r3, [pc, #128]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d802      	bhi.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <prvAddNewTaskToReadyList+0xc4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	4b19      	ldr	r3, [pc, #100]	; (8007010 <prvAddNewTaskToReadyList+0xc8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <prvAddNewTaskToReadyList+0xc8>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <prvAddNewTaskToReadyList+0xcc>)
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7ff f87c 	bl	80060c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fce:	f001 f889 	bl	80080e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <prvAddNewTaskToReadyList+0xc0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00e      	beq.n	8006ff8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d207      	bcs.n	8006ff8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvAddNewTaskToReadyList+0xd0>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	200009ec 	.word	0x200009ec
 8007004:	200008ec 	.word	0x200008ec
 8007008:	200009f8 	.word	0x200009f8
 800700c:	20000a08 	.word	0x20000a08
 8007010:	200009f4 	.word	0x200009f4
 8007014:	200008f0 	.word	0x200008f0
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007024:	f001 f82e 	bl	8008084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <vTaskDelete+0x18>
 800702e:	4b39      	ldr	r3, [pc, #228]	; (8007114 <vTaskDelete+0xf8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	e000      	b.n	8007036 <vTaskDelete+0x1a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3304      	adds	r3, #4
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff f89f 	bl	8006180 <uxListRemove>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4932      	ldr	r1, [pc, #200]	; (8007118 <vTaskDelete+0xfc>)
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <vTaskDelete+0x58>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	43da      	mvns	r2, r3
 800706a:	4b2c      	ldr	r3, [pc, #176]	; (800711c <vTaskDelete+0x100>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4013      	ands	r3, r2
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <vTaskDelete+0x100>)
 8007072:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3318      	adds	r3, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff f87d 	bl	8006180 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <vTaskDelete+0x104>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	4a24      	ldr	r2, [pc, #144]	; (8007120 <vTaskDelete+0x104>)
 800708e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007090:	4b20      	ldr	r3, [pc, #128]	; (8007114 <vTaskDelete+0xf8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	429a      	cmp	r2, r3
 8007098:	d10b      	bne.n	80070b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4820      	ldr	r0, [pc, #128]	; (8007124 <vTaskDelete+0x108>)
 80070a2:	f7ff f810 	bl	80060c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80070a6:	4b20      	ldr	r3, [pc, #128]	; (8007128 <vTaskDelete+0x10c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <vTaskDelete+0x10c>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	e009      	b.n	80070c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80070b2:	4b1e      	ldr	r3, [pc, #120]	; (800712c <vTaskDelete+0x110>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <vTaskDelete+0x110>)
 80070ba:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fc3f 	bl	8007940 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80070c2:	f000 fc71 	bl	80079a8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80070c6:	f001 f80d 	bl	80080e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80070ca:	4b19      	ldr	r3, [pc, #100]	; (8007130 <vTaskDelete+0x114>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <vTaskDelete+0xf8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d116      	bne.n	800710a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80070dc:	4b15      	ldr	r3, [pc, #84]	; (8007134 <vTaskDelete+0x118>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <vTaskDelete+0xde>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60bb      	str	r3, [r7, #8]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80070fa:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <vTaskDelete+0x11c>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200008ec 	.word	0x200008ec
 8007118:	200008f0 	.word	0x200008f0
 800711c:	200009f4 	.word	0x200009f4
 8007120:	20000a08 	.word	0x20000a08
 8007124:	200009c0 	.word	0x200009c0
 8007128:	200009d4 	.word	0x200009d4
 800712c:	200009ec 	.word	0x200009ec
 8007130:	200009f8 	.word	0x200009f8
 8007134:	20000a14 	.word	0x20000a14
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d017      	beq.n	800717e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <vTaskDelay+0x60>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <vTaskDelay+0x30>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60bb      	str	r3, [r7, #8]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800716c:	f000 f884 	bl	8007278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fdf4 	bl	8007d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007178:	f000 f88c 	bl	8007294 <xTaskResumeAll>
 800717c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d107      	bne.n	8007194 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <vTaskDelay+0x64>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000a14 	.word	0x20000a14
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071b2:	463a      	mov	r2, r7
 80071b4:	1d39      	adds	r1, r7, #4
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7f9 fe98 	bl	8000ef0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	460a      	mov	r2, r1
 80071d2:	4921      	ldr	r1, [pc, #132]	; (8007258 <vTaskStartScheduler+0xb4>)
 80071d4:	4821      	ldr	r0, [pc, #132]	; (800725c <vTaskStartScheduler+0xb8>)
 80071d6:	f7ff fd77 	bl	8006cc8 <xTaskCreateStatic>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a20      	ldr	r2, [pc, #128]	; (8007260 <vTaskStartScheduler+0xbc>)
 80071de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071e0:	4b1f      	ldr	r3, [pc, #124]	; (8007260 <vTaskStartScheduler+0xbc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	e001      	b.n	80071f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d11b      	bne.n	8007230 <vTaskStartScheduler+0x8c>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	613b      	str	r3, [r7, #16]
}
 800720a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <vTaskStartScheduler+0xc0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	334c      	adds	r3, #76	; 0x4c
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <vTaskStartScheduler+0xc4>)
 8007214:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <vTaskStartScheduler+0xc8>)
 8007218:	f04f 32ff 	mov.w	r2, #4294967295
 800721c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <vTaskStartScheduler+0xcc>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007224:	4b13      	ldr	r3, [pc, #76]	; (8007274 <vTaskStartScheduler+0xd0>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800722a:	f000 fe89 	bl	8007f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800722e:	e00e      	b.n	800724e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d10a      	bne.n	800724e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <vTaskStartScheduler+0xa8>
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	0800b6ac 	.word	0x0800b6ac
 800725c:	08007835 	.word	0x08007835
 8007260:	20000a10 	.word	0x20000a10
 8007264:	200008ec 	.word	0x200008ec
 8007268:	20000034 	.word	0x20000034
 800726c:	20000a0c 	.word	0x20000a0c
 8007270:	200009f8 	.word	0x200009f8
 8007274:	200009f0 	.word	0x200009f0

08007278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <vTaskSuspendAll+0x18>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	4a03      	ldr	r2, [pc, #12]	; (8007290 <vTaskSuspendAll+0x18>)
 8007284:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007286:	bf00      	nop
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	20000a14 	.word	0x20000a14

08007294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072a2:	4b41      	ldr	r3, [pc, #260]	; (80073a8 <xTaskResumeAll+0x114>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072c0:	f000 fee0 	bl	8008084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072c4:	4b38      	ldr	r3, [pc, #224]	; (80073a8 <xTaskResumeAll+0x114>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	4a37      	ldr	r2, [pc, #220]	; (80073a8 <xTaskResumeAll+0x114>)
 80072cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ce:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <xTaskResumeAll+0x114>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d161      	bne.n	800739a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072d6:	4b35      	ldr	r3, [pc, #212]	; (80073ac <xTaskResumeAll+0x118>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d05d      	beq.n	800739a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072de:	e02e      	b.n	800733e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	4b33      	ldr	r3, [pc, #204]	; (80073b0 <xTaskResumeAll+0x11c>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3318      	adds	r3, #24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe ff47 	bl	8006180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe ff42 	bl	8006180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	2201      	movs	r2, #1
 8007302:	409a      	lsls	r2, r3
 8007304:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <xTaskResumeAll+0x120>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	4a2a      	ldr	r2, [pc, #168]	; (80073b4 <xTaskResumeAll+0x120>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4a27      	ldr	r2, [pc, #156]	; (80073b8 <xTaskResumeAll+0x124>)
 800731c:	441a      	add	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f7fe fece 	bl	80060c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	4b23      	ldr	r3, [pc, #140]	; (80073bc <xTaskResumeAll+0x128>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007338:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <xTaskResumeAll+0x12c>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <xTaskResumeAll+0x11c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1cc      	bne.n	80072e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800734c:	f000 fb2c 	bl	80079a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007350:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <xTaskResumeAll+0x130>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800735c:	f000 f836 	bl	80073cc <xTaskIncrementTick>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <xTaskResumeAll+0x12c>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3b01      	subs	r3, #1
 8007370:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f1      	bne.n	800735c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007378:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <xTaskResumeAll+0x130>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <xTaskResumeAll+0x12c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007386:	2301      	movs	r3, #1
 8007388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <xTaskResumeAll+0x134>)
 800738c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800739a:	f000 fea3 	bl	80080e4 <vPortExitCritical>

	return xAlreadyYielded;
 800739e:	68bb      	ldr	r3, [r7, #8]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000a14 	.word	0x20000a14
 80073ac:	200009ec 	.word	0x200009ec
 80073b0:	200009ac 	.word	0x200009ac
 80073b4:	200009f4 	.word	0x200009f4
 80073b8:	200008f0 	.word	0x200008f0
 80073bc:	200008ec 	.word	0x200008ec
 80073c0:	20000a00 	.word	0x20000a00
 80073c4:	200009fc 	.word	0x200009fc
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d6:	4b4e      	ldr	r3, [pc, #312]	; (8007510 <xTaskIncrementTick+0x144>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 808e 	bne.w	80074fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073e0:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <xTaskIncrementTick+0x148>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073e8:	4a4a      	ldr	r2, [pc, #296]	; (8007514 <xTaskIncrementTick+0x148>)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d120      	bne.n	8007436 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073f4:	4b48      	ldr	r3, [pc, #288]	; (8007518 <xTaskIncrementTick+0x14c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <xTaskIncrementTick+0x48>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xTaskIncrementTick+0x46>
 8007414:	4b40      	ldr	r3, [pc, #256]	; (8007518 <xTaskIncrementTick+0x14c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	4b40      	ldr	r3, [pc, #256]	; (800751c <xTaskIncrementTick+0x150>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a3e      	ldr	r2, [pc, #248]	; (8007518 <xTaskIncrementTick+0x14c>)
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	4a3e      	ldr	r2, [pc, #248]	; (800751c <xTaskIncrementTick+0x150>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4b3d      	ldr	r3, [pc, #244]	; (8007520 <xTaskIncrementTick+0x154>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <xTaskIncrementTick+0x154>)
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	f000 fab9 	bl	80079a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007436:	4b3b      	ldr	r3, [pc, #236]	; (8007524 <xTaskIncrementTick+0x158>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	429a      	cmp	r2, r3
 800743e:	d348      	bcc.n	80074d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007440:	4b35      	ldr	r3, [pc, #212]	; (8007518 <xTaskIncrementTick+0x14c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744a:	4b36      	ldr	r3, [pc, #216]	; (8007524 <xTaskIncrementTick+0x158>)
 800744c:	f04f 32ff 	mov.w	r2, #4294967295
 8007450:	601a      	str	r2, [r3, #0]
					break;
 8007452:	e03e      	b.n	80074d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007454:	4b30      	ldr	r3, [pc, #192]	; (8007518 <xTaskIncrementTick+0x14c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d203      	bcs.n	8007474 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800746c:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <xTaskIncrementTick+0x158>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007472:	e02e      	b.n	80074d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3304      	adds	r3, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fe81 	bl	8006180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3318      	adds	r3, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fe78 	bl	8006180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	2201      	movs	r2, #1
 8007496:	409a      	lsls	r2, r3
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <xTaskIncrementTick+0x15c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4313      	orrs	r3, r2
 800749e:	4a22      	ldr	r2, [pc, #136]	; (8007528 <xTaskIncrementTick+0x15c>)
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a1f      	ldr	r2, [pc, #124]	; (800752c <xTaskIncrementTick+0x160>)
 80074b0:	441a      	add	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe fe04 	bl	80060c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <xTaskIncrementTick+0x164>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3b9      	bcc.n	8007440 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074d0:	e7b6      	b.n	8007440 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xTaskIncrementTick+0x164>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4914      	ldr	r1, [pc, #80]	; (800752c <xTaskIncrementTick+0x160>)
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d901      	bls.n	80074ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074ee:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xTaskIncrementTick+0x168>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e004      	b.n	8007506 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <xTaskIncrementTick+0x16c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	4a0d      	ldr	r2, [pc, #52]	; (8007538 <xTaskIncrementTick+0x16c>)
 8007504:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007506:	697b      	ldr	r3, [r7, #20]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000a14 	.word	0x20000a14
 8007514:	200009f0 	.word	0x200009f0
 8007518:	200009a4 	.word	0x200009a4
 800751c:	200009a8 	.word	0x200009a8
 8007520:	20000a04 	.word	0x20000a04
 8007524:	20000a0c 	.word	0x20000a0c
 8007528:	200009f4 	.word	0x200009f4
 800752c:	200008f0 	.word	0x200008f0
 8007530:	200008ec 	.word	0x200008ec
 8007534:	20000a00 	.word	0x20000a00
 8007538:	200009fc 	.word	0x200009fc

0800753c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <vTaskSwitchContext+0xcc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800754a:	4b30      	ldr	r3, [pc, #192]	; (800760c <vTaskSwitchContext+0xd0>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007550:	e055      	b.n	80075fe <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8007552:	4b2e      	ldr	r3, [pc, #184]	; (800760c <vTaskSwitchContext+0xd0>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007558:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <vTaskSwitchContext+0xd4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b2c      	ldr	r3, [pc, #176]	; (8007610 <vTaskSwitchContext+0xd4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	429a      	cmp	r2, r3
 8007566:	d808      	bhi.n	800757a <vTaskSwitchContext+0x3e>
 8007568:	4b29      	ldr	r3, [pc, #164]	; (8007610 <vTaskSwitchContext+0xd4>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	4b28      	ldr	r3, [pc, #160]	; (8007610 <vTaskSwitchContext+0xd4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3334      	adds	r3, #52	; 0x34
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7f9 fc93 	bl	8000ea0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <vTaskSwitchContext+0xd8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	fab3 f383 	clz	r3, r3
 8007586:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	f1c3 031f 	rsb	r3, r3, #31
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	4921      	ldr	r1, [pc, #132]	; (8007618 <vTaskSwitchContext+0xdc>)
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <vTaskSwitchContext+0x7e>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	607b      	str	r3, [r7, #4]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <vTaskSwitchContext+0x7c>
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <vTaskSwitchContext+0xdc>)
 80075c6:	4413      	add	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3308      	adds	r3, #8
 80075dc:	429a      	cmp	r2, r3
 80075de:	d104      	bne.n	80075ea <vTaskSwitchContext+0xae>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4a07      	ldr	r2, [pc, #28]	; (8007610 <vTaskSwitchContext+0xd4>)
 80075f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <vTaskSwitchContext+0xd4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	334c      	adds	r3, #76	; 0x4c
 80075fa:	4a08      	ldr	r2, [pc, #32]	; (800761c <vTaskSwitchContext+0xe0>)
 80075fc:	6013      	str	r3, [r2, #0]
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000a14 	.word	0x20000a14
 800760c:	20000a00 	.word	0x20000a00
 8007610:	200008ec 	.word	0x200008ec
 8007614:	200009f4 	.word	0x200009f4
 8007618:	200008f0 	.word	0x200008f0
 800761c:	20000034 	.word	0x20000034

08007620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007646:	4b07      	ldr	r3, [pc, #28]	; (8007664 <vTaskPlaceOnEventList+0x44>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3318      	adds	r3, #24
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fe fd5d 	bl	800610e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007654:	2101      	movs	r1, #1
 8007656:	6838      	ldr	r0, [r7, #0]
 8007658:	f000 fb82 	bl	8007d60 <prvAddCurrentTaskToDelayedList>
}
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200008ec 	.word	0x200008ec

08007668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3318      	adds	r3, #24
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fd71 	bl	8006180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769e:	4b1d      	ldr	r3, [pc, #116]	; (8007714 <xTaskRemoveFromEventList+0xac>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11c      	bne.n	80076e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fd68 	bl	8006180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	2201      	movs	r2, #1
 80076b6:	409a      	lsls	r2, r3
 80076b8:	4b17      	ldr	r3, [pc, #92]	; (8007718 <xTaskRemoveFromEventList+0xb0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4313      	orrs	r3, r2
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <xTaskRemoveFromEventList+0xb0>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a13      	ldr	r2, [pc, #76]	; (800771c <xTaskRemoveFromEventList+0xb4>)
 80076d0:	441a      	add	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fe fcf4 	bl	80060c6 <vListInsertEnd>
 80076de:	e005      	b.n	80076ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3318      	adds	r3, #24
 80076e4:	4619      	mov	r1, r3
 80076e6:	480e      	ldr	r0, [pc, #56]	; (8007720 <xTaskRemoveFromEventList+0xb8>)
 80076e8:	f7fe fced 	bl	80060c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <xTaskRemoveFromEventList+0xbc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d905      	bls.n	8007706 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <xTaskRemoveFromEventList+0xc0>)
 8007700:	2201      	movs	r2, #1
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e001      	b.n	800770a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800770a:	697b      	ldr	r3, [r7, #20]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20000a14 	.word	0x20000a14
 8007718:	200009f4 	.word	0x200009f4
 800771c:	200008f0 	.word	0x200008f0
 8007720:	200009ac 	.word	0x200009ac
 8007724:	200008ec 	.word	0x200008ec
 8007728:	20000a00 	.word	0x20000a00

0800772c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <vTaskInternalSetTimeOutState+0x24>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <vTaskInternalSetTimeOutState+0x28>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20000a04 	.word	0x20000a04
 8007754:	200009f0 	.word	0x200009f0

08007758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	613b      	str	r3, [r7, #16]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	60fb      	str	r3, [r7, #12]
}
 8007796:	bf00      	nop
 8007798:	e7fe      	b.n	8007798 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800779a:	f000 fc73 	bl	8008084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <xTaskCheckForTimeOut+0xbc>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d102      	bne.n	80077be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	e023      	b.n	8007806 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <xTaskCheckForTimeOut+0xc0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d007      	beq.n	80077da <xTaskCheckForTimeOut+0x82>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e015      	b.n	8007806 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d20b      	bcs.n	80077fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff ff9b 	bl	800772c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	e004      	b.n	8007806 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007802:	2301      	movs	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007806:	f000 fc6d 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 800780a:	69fb      	ldr	r3, [r7, #28]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200009f0 	.word	0x200009f0
 8007818:	20000a04 	.word	0x20000a04

0800781c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007820:	4b03      	ldr	r3, [pc, #12]	; (8007830 <vTaskMissedYield+0x14>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
}
 8007826:	bf00      	nop
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000a00 	.word	0x20000a00

08007834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800783c:	f000 f852 	bl	80078e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <prvIdleTask+0x28>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d9f9      	bls.n	800783c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007848:	4b05      	ldr	r3, [pc, #20]	; (8007860 <prvIdleTask+0x2c>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007858:	e7f0      	b.n	800783c <prvIdleTask+0x8>
 800785a:	bf00      	nop
 800785c:	200008f0 	.word	0x200008f0
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800786a:	2300      	movs	r3, #0
 800786c:	607b      	str	r3, [r7, #4]
 800786e:	e00c      	b.n	800788a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4a12      	ldr	r2, [pc, #72]	; (80078c4 <prvInitialiseTaskLists+0x60>)
 800787c:	4413      	add	r3, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fbf4 	bl	800606c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3301      	adds	r3, #1
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b06      	cmp	r3, #6
 800788e:	d9ef      	bls.n	8007870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007890:	480d      	ldr	r0, [pc, #52]	; (80078c8 <prvInitialiseTaskLists+0x64>)
 8007892:	f7fe fbeb 	bl	800606c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007896:	480d      	ldr	r0, [pc, #52]	; (80078cc <prvInitialiseTaskLists+0x68>)
 8007898:	f7fe fbe8 	bl	800606c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800789c:	480c      	ldr	r0, [pc, #48]	; (80078d0 <prvInitialiseTaskLists+0x6c>)
 800789e:	f7fe fbe5 	bl	800606c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078a2:	480c      	ldr	r0, [pc, #48]	; (80078d4 <prvInitialiseTaskLists+0x70>)
 80078a4:	f7fe fbe2 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078a8:	480b      	ldr	r0, [pc, #44]	; (80078d8 <prvInitialiseTaskLists+0x74>)
 80078aa:	f7fe fbdf 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <prvInitialiseTaskLists+0x78>)
 80078b0:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <prvInitialiseTaskLists+0x64>)
 80078b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078b4:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <prvInitialiseTaskLists+0x7c>)
 80078b6:	4a05      	ldr	r2, [pc, #20]	; (80078cc <prvInitialiseTaskLists+0x68>)
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200008f0 	.word	0x200008f0
 80078c8:	2000097c 	.word	0x2000097c
 80078cc:	20000990 	.word	0x20000990
 80078d0:	200009ac 	.word	0x200009ac
 80078d4:	200009c0 	.word	0x200009c0
 80078d8:	200009d8 	.word	0x200009d8
 80078dc:	200009a4 	.word	0x200009a4
 80078e0:	200009a8 	.word	0x200009a8

080078e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ea:	e019      	b.n	8007920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078ec:	f000 fbca 	bl	8008084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f0:	4b10      	ldr	r3, [pc, #64]	; (8007934 <prvCheckTasksWaitingTermination+0x50>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fc3f 	bl	8006180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007902:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <prvCheckTasksWaitingTermination+0x54>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3b01      	subs	r3, #1
 8007908:	4a0b      	ldr	r2, [pc, #44]	; (8007938 <prvCheckTasksWaitingTermination+0x54>)
 800790a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <prvCheckTasksWaitingTermination+0x58>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3b01      	subs	r3, #1
 8007912:	4a0a      	ldr	r2, [pc, #40]	; (800793c <prvCheckTasksWaitingTermination+0x58>)
 8007914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007916:	f000 fbe5 	bl	80080e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f810 	bl	8007940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <prvCheckTasksWaitingTermination+0x58>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e1      	bne.n	80078ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200009c0 	.word	0x200009c0
 8007938:	200009ec 	.word	0x200009ec
 800793c:	200009d4 	.word	0x200009d4

08007940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	334c      	adds	r3, #76	; 0x4c
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fe6d 	bl	800962c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d108      	bne.n	800796e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fd7d 	bl	8008460 <vPortFree>
				vPortFree( pxTCB );
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fd7a 	bl	8008460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800796c:	e018      	b.n	80079a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d103      	bne.n	8007980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fd71 	bl	8008460 <vPortFree>
	}
 800797e:	e00f      	b.n	80079a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007986:	2b02      	cmp	r3, #2
 8007988:	d00a      	beq.n	80079a0 <prvDeleteTCB+0x60>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	60fb      	str	r3, [r7, #12]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <prvDeleteTCB+0x5e>
	}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <prvResetNextTaskUnblockTime+0x38>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <prvResetNextTaskUnblockTime+0x3c>)
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079c0:	e008      	b.n	80079d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <prvResetNextTaskUnblockTime+0x38>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <prvResetNextTaskUnblockTime+0x3c>)
 80079d2:	6013      	str	r3, [r2, #0]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	200009a4 	.word	0x200009a4
 80079e4:	20000a0c 	.word	0x20000a0c

080079e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <xTaskGetSchedulerState+0x34>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079f6:	2301      	movs	r3, #1
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	e008      	b.n	8007a0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fc:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <xTaskGetSchedulerState+0x38>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a04:	2302      	movs	r3, #2
 8007a06:	607b      	str	r3, [r7, #4]
 8007a08:	e001      	b.n	8007a0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a0e:	687b      	ldr	r3, [r7, #4]
	}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200009f8 	.word	0x200009f8
 8007a20:	20000a14 	.word	0x20000a14

08007a24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d05e      	beq.n	8007af8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <xTaskPriorityInherit+0xe0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d24e      	bcs.n	8007ae6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db06      	blt.n	8007a5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a50:	4b2c      	ldr	r3, [pc, #176]	; (8007b04 <xTaskPriorityInherit+0xe0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	f1c3 0207 	rsb	r2, r3, #7
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6959      	ldr	r1, [r3, #20]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <xTaskPriorityInherit+0xe4>)
 8007a70:	4413      	add	r3, r2
 8007a72:	4299      	cmp	r1, r3
 8007a74:	d12f      	bne.n	8007ad6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fb80 	bl	8006180 <uxListRemove>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	43da      	mvns	r2, r3
 8007a92:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <xTaskPriorityInherit+0xe8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4013      	ands	r3, r2
 8007a98:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <xTaskPriorityInherit+0xe8>)
 8007a9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <xTaskPriorityInherit+0xe0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	2201      	movs	r2, #1
 8007aac:	409a      	lsls	r2, r3
 8007aae:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <xTaskPriorityInherit+0xe8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <xTaskPriorityInherit+0xe8>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <xTaskPriorityInherit+0xe4>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe faf9 	bl	80060c6 <vListInsertEnd>
 8007ad4:	e004      	b.n	8007ae0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <xTaskPriorityInherit+0xe0>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e008      	b.n	8007af8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <xTaskPriorityInherit+0xe0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d201      	bcs.n	8007af8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007af4:	2301      	movs	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007af8:	68fb      	ldr	r3, [r7, #12]
	}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200008ec 	.word	0x200008ec
 8007b08:	200008f0 	.word	0x200008f0
 8007b0c:	200009f4 	.word	0x200009f4

08007b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d06e      	beq.n	8007c04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b26:	4b3a      	ldr	r3, [pc, #232]	; (8007c10 <xTaskPriorityDisinherit+0x100>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d00a      	beq.n	8007b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60bb      	str	r3, [r7, #8]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d044      	beq.n	8007c04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d140      	bne.n	8007c04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fafa 	bl	8006180 <uxListRemove>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d115      	bne.n	8007bbe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	491f      	ldr	r1, [pc, #124]	; (8007c14 <xTaskPriorityDisinherit+0x104>)
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <xTaskPriorityDisinherit+0xae>
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	2201      	movs	r2, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43da      	mvns	r2, r3
 8007bb4:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <xTaskPriorityDisinherit+0x108>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <xTaskPriorityDisinherit+0x108>)
 8007bbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	f1c3 0207 	rsb	r2, r3, #7
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	409a      	lsls	r2, r3
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <xTaskPriorityDisinherit+0x108>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	4a0d      	ldr	r2, [pc, #52]	; (8007c18 <xTaskPriorityDisinherit+0x108>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <xTaskPriorityDisinherit+0x104>)
 8007bf2:	441a      	add	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fe fa63 	bl	80060c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c04:	697b      	ldr	r3, [r7, #20]
	}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200008ec 	.word	0x200008ec
 8007c14:	200008f0 	.word	0x200008f0
 8007c18:	200009f4 	.word	0x200009f4

08007c1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d077      	beq.n	8007d24 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d902      	bls.n	8007c62 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	e002      	b.n	8007c68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d058      	beq.n	8007d24 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d153      	bne.n	8007d24 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d10a      	bne.n	8007c9c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60bb      	str	r3, [r7, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db04      	blt.n	8007cba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f1c3 0207 	rsb	r2, r3, #7
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	6959      	ldr	r1, [r3, #20]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cca:	4413      	add	r3, r2
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	d129      	bne.n	8007d24 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fa53 	bl	8006180 <uxListRemove>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43da      	mvns	r2, r3
 8007cec:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cf4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	409a      	lsls	r2, r3
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	4a0b      	ldr	r2, [pc, #44]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4a06      	ldr	r2, [pc, #24]	; (8007d30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d16:	441a      	add	r2, r3
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	f7fe f9d1 	bl	80060c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d24:	bf00      	nop
 8007d26:	3720      	adds	r7, #32
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	200008ec 	.word	0x200008ec
 8007d30:	200008f0 	.word	0x200008f0
 8007d34:	200009f4 	.word	0x200009f4

08007d38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d50:	681b      	ldr	r3, [r3, #0]
	}
 8007d52:	4618      	mov	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	200008ec 	.word	0x200008ec

08007d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fa02 	bl	8006180 <uxListRemove>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43da      	mvns	r2, r3
 8007d90:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4013      	ands	r3, r2
 8007d96:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d10a      	bne.n	8007db8 <prvAddCurrentTaskToDelayedList+0x58>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4619      	mov	r1, r3
 8007db0:	481a      	ldr	r0, [pc, #104]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007db2:	f7fe f988 	bl	80060c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007db6:	e026      	b.n	8007e06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc0:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d209      	bcs.n	8007de4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd0:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe f996 	bl	800610e <vListInsert>
}
 8007de2:	e010      	b.n	8007e06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4619      	mov	r1, r3
 8007df0:	4610      	mov	r0, r2
 8007df2:	f7fe f98c 	bl	800610e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d202      	bcs.n	8007e06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e00:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6013      	str	r3, [r2, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200009f0 	.word	0x200009f0
 8007e14:	200008ec 	.word	0x200008ec
 8007e18:	200009f4 	.word	0x200009f4
 8007e1c:	200009d8 	.word	0x200009d8
 8007e20:	200009a8 	.word	0x200009a8
 8007e24:	200009a4 	.word	0x200009a4
 8007e28:	20000a0c 	.word	0x20000a0c

08007e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f023 0201 	bic.w	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e5c:	4a0c      	ldr	r2, [pc, #48]	; (8007e90 <pxPortInitialiseStack+0x64>)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3b14      	subs	r3, #20
 8007e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3b04      	subs	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f06f 0202 	mvn.w	r2, #2
 8007e7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3b20      	subs	r3, #32
 8007e80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e82:	68fb      	ldr	r3, [r7, #12]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	08007e95 	.word	0x08007e95

08007e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e9e:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <prvTaskExitError+0x54>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d00a      	beq.n	8007ebe <prvTaskExitError+0x2a>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <prvTaskExitError+0x28>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60bb      	str	r3, [r7, #8]
}
 8007ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ed2:	bf00      	nop
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0fc      	beq.n	8007ed4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	20000030 	.word	0x20000030
 8007eec:	00000000 	.word	0x00000000

08007ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <pxCurrentTCBConst2>)
 8007ef2:	6819      	ldr	r1, [r3, #0]
 8007ef4:	6808      	ldr	r0, [r1, #0]
 8007ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efa:	f380 8809 	msr	PSP, r0
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8811 	msr	BASEPRI, r0
 8007f0a:	4770      	bx	lr
 8007f0c:	f3af 8000 	nop.w

08007f10 <pxCurrentTCBConst2>:
 8007f10:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f18:	4808      	ldr	r0, [pc, #32]	; (8007f3c <prvPortStartFirstTask+0x24>)
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	6800      	ldr	r0, [r0, #0]
 8007f1e:	f380 8808 	msr	MSP, r0
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8814 	msr	CONTROL, r0
 8007f2a:	b662      	cpsie	i
 8007f2c:	b661      	cpsie	f
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	df00      	svc	0
 8007f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f3a:	bf00      	nop
 8007f3c:	e000ed08 	.word	0xe000ed08

08007f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <xPortStartScheduler+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a46      	ldr	r2, [pc, #280]	; (8008064 <xPortStartScheduler+0x124>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10a      	bne.n	8007f66 <xPortStartScheduler+0x26>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	613b      	str	r3, [r7, #16]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f66:	4b3e      	ldr	r3, [pc, #248]	; (8008060 <xPortStartScheduler+0x120>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a3f      	ldr	r2, [pc, #252]	; (8008068 <xPortStartScheduler+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10a      	bne.n	8007f86 <xPortStartScheduler+0x46>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f86:	4b39      	ldr	r3, [pc, #228]	; (800806c <xPortStartScheduler+0x12c>)
 8007f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	22ff      	movs	r2, #255	; 0xff
 8007f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b31      	ldr	r3, [pc, #196]	; (8008070 <xPortStartScheduler+0x130>)
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <xPortStartScheduler+0x134>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb4:	e009      	b.n	8007fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fb6:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <xPortStartScheduler+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a2d      	ldr	r2, [pc, #180]	; (8008074 <xPortStartScheduler+0x134>)
 8007fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d0ef      	beq.n	8007fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fd6:	4b27      	ldr	r3, [pc, #156]	; (8008074 <xPortStartScheduler+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1c3 0307 	rsb	r3, r3, #7
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00a      	beq.n	8007ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60bb      	str	r3, [r7, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <xPortStartScheduler+0x134>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <xPortStartScheduler+0x134>)
 8008000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008002:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <xPortStartScheduler+0x134>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800800a:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <xPortStartScheduler+0x134>)
 800800c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008016:	4b18      	ldr	r3, [pc, #96]	; (8008078 <xPortStartScheduler+0x138>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a17      	ldr	r2, [pc, #92]	; (8008078 <xPortStartScheduler+0x138>)
 800801c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <xPortStartScheduler+0x138>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a14      	ldr	r2, [pc, #80]	; (8008078 <xPortStartScheduler+0x138>)
 8008028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800802c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800802e:	f000 f8dd 	bl	80081ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <xPortStartScheduler+0x13c>)
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008038:	f000 f8fc 	bl	8008234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <xPortStartScheduler+0x140>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0f      	ldr	r2, [pc, #60]	; (8008080 <xPortStartScheduler+0x140>)
 8008042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008048:	f7ff ff66 	bl	8007f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800804c:	f7ff fa76 	bl	800753c <vTaskSwitchContext>
	prvTaskExitError();
 8008050:	f7ff ff20 	bl	8007e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	e000ed00 	.word	0xe000ed00
 8008064:	410fc271 	.word	0x410fc271
 8008068:	410fc270 	.word	0x410fc270
 800806c:	e000e400 	.word	0xe000e400
 8008070:	20000a18 	.word	0x20000a18
 8008074:	20000a1c 	.word	0x20000a1c
 8008078:	e000ed20 	.word	0xe000ed20
 800807c:	20000030 	.word	0x20000030
 8008080:	e000ef34 	.word	0xe000ef34

08008084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800809e:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <vPortEnterCritical+0x58>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <vPortEnterCritical+0x58>)
 80080a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <vPortEnterCritical+0x58>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10f      	bne.n	80080d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080b0:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <vPortEnterCritical+0x5c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	603b      	str	r3, [r7, #0]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vPortEnterCritical+0x4a>
	}
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20000030 	.word	0x20000030
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ea:	4b12      	ldr	r3, [pc, #72]	; (8008134 <vPortExitCritical+0x50>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <vPortExitCritical+0x24>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	607b      	str	r3, [r7, #4]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <vPortExitCritical+0x50>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	4a09      	ldr	r2, [pc, #36]	; (8008134 <vPortExitCritical+0x50>)
 8008110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <vPortExitCritical+0x42>
 800811a:	2300      	movs	r3, #0
 800811c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f383 8811 	msr	BASEPRI, r3
}
 8008124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20000030 	.word	0x20000030
	...

08008140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008140:	f3ef 8009 	mrs	r0, PSP
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <pxCurrentTCBConst>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f01e 0f10 	tst.w	lr, #16
 8008150:	bf08      	it	eq
 8008152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	6010      	str	r0, [r2, #0]
 800815c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008164:	f380 8811 	msr	BASEPRI, r0
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f7ff f9e4 	bl	800753c <vTaskSwitchContext>
 8008174:	f04f 0000 	mov.w	r0, #0
 8008178:	f380 8811 	msr	BASEPRI, r0
 800817c:	bc09      	pop	{r0, r3}
 800817e:	6819      	ldr	r1, [r3, #0]
 8008180:	6808      	ldr	r0, [r1, #0]
 8008182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008186:	f01e 0f10 	tst.w	lr, #16
 800818a:	bf08      	it	eq
 800818c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008190:	f380 8809 	msr	PSP, r0
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	f3af 8000 	nop.w

080081a0 <pxCurrentTCBConst>:
 80081a0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081c2:	f7ff f903 	bl	80073cc <xTaskIncrementTick>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <SysTick_Handler+0x40>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f383 8811 	msr	BASEPRI, r3
}
 80081de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <vPortSetupTimerInterrupt+0x34>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <vPortSetupTimerInterrupt+0x38>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <vPortSetupTimerInterrupt+0x3c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a0a      	ldr	r2, [pc, #40]	; (800822c <vPortSetupTimerInterrupt+0x40>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <vPortSetupTimerInterrupt+0x44>)
 800820a:	3b01      	subs	r3, #1
 800820c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800820e:	4b04      	ldr	r3, [pc, #16]	; (8008220 <vPortSetupTimerInterrupt+0x34>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	e000e010 	.word	0xe000e010
 8008224:	e000e018 	.word	0xe000e018
 8008228:	20000010 	.word	0x20000010
 800822c:	10624dd3 	.word	0x10624dd3
 8008230:	e000e014 	.word	0xe000e014

08008234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008244 <vPortEnableVFP+0x10>
 8008238:	6801      	ldr	r1, [r0, #0]
 800823a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800823e:	6001      	str	r1, [r0, #0]
 8008240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008242:	bf00      	nop
 8008244:	e000ed88 	.word	0xe000ed88

08008248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800824e:	f3ef 8305 	mrs	r3, IPSR
 8008252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b0f      	cmp	r3, #15
 8008258:	d914      	bls.n	8008284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <vPortValidateInterruptPriority+0x70>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <vPortValidateInterruptPriority+0x74>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	7afa      	ldrb	r2, [r7, #11]
 800826a:	429a      	cmp	r2, r3
 800826c:	d20a      	bcs.n	8008284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008284:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <vPortValidateInterruptPriority+0x78>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800828c:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <vPortValidateInterruptPriority+0x7c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d90a      	bls.n	80082aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	603b      	str	r3, [r7, #0]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <vPortValidateInterruptPriority+0x60>
	}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	e000e3f0 	.word	0xe000e3f0
 80082bc:	20000a18 	.word	0x20000a18
 80082c0:	e000ed0c 	.word	0xe000ed0c
 80082c4:	20000a1c 	.word	0x20000a1c

080082c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082d4:	f7fe ffd0 	bl	8007278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <pvPortMalloc+0x180>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082e0:	f000 f920 	bl	8008524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082e4:	4b59      	ldr	r3, [pc, #356]	; (800844c <pvPortMalloc+0x184>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 8093 	bne.w	8008418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01d      	beq.n	8008334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082f8:	2208      	movs	r2, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d014      	beq.n	8008334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f023 0307 	bic.w	r3, r3, #7
 8008310:	3308      	adds	r3, #8
 8008312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <pvPortMalloc+0x6c>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	617b      	str	r3, [r7, #20]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d06e      	beq.n	8008418 <pvPortMalloc+0x150>
 800833a:	4b45      	ldr	r3, [pc, #276]	; (8008450 <pvPortMalloc+0x188>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d869      	bhi.n	8008418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008344:	4b43      	ldr	r3, [pc, #268]	; (8008454 <pvPortMalloc+0x18c>)
 8008346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008348:	4b42      	ldr	r3, [pc, #264]	; (8008454 <pvPortMalloc+0x18c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800834e:	e004      	b.n	800835a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d903      	bls.n	800836c <pvPortMalloc+0xa4>
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f1      	bne.n	8008350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800836c:	4b36      	ldr	r3, [pc, #216]	; (8008448 <pvPortMalloc+0x180>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	429a      	cmp	r2, r3
 8008374:	d050      	beq.n	8008418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2208      	movs	r2, #8
 800837c:	4413      	add	r3, r2
 800837e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	2308      	movs	r3, #8
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	429a      	cmp	r2, r3
 8008396:	d91f      	bls.n	80083d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <pvPortMalloc+0xf8>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	613b      	str	r3, [r7, #16]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083d2:	69b8      	ldr	r0, [r7, #24]
 80083d4:	f000 f908 	bl	80085e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083d8:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <pvPortMalloc+0x188>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	4a1b      	ldr	r2, [pc, #108]	; (8008450 <pvPortMalloc+0x188>)
 80083e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <pvPortMalloc+0x188>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <pvPortMalloc+0x190>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d203      	bcs.n	80083fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <pvPortMalloc+0x188>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a18      	ldr	r2, [pc, #96]	; (8008458 <pvPortMalloc+0x190>)
 80083f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	4b13      	ldr	r3, [pc, #76]	; (800844c <pvPortMalloc+0x184>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	431a      	orrs	r2, r3
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <pvPortMalloc+0x194>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	4a11      	ldr	r2, [pc, #68]	; (800845c <pvPortMalloc+0x194>)
 8008416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008418:	f7fe ff3c 	bl	8007294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <pvPortMalloc+0x174>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <pvPortMalloc+0x172>
	return pvReturn;
 800843c:	69fb      	ldr	r3, [r7, #28]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3728      	adds	r7, #40	; 0x28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20007f58 	.word	0x20007f58
 800844c:	20007f6c 	.word	0x20007f6c
 8008450:	20007f5c 	.word	0x20007f5c
 8008454:	20007f50 	.word	0x20007f50
 8008458:	20007f60 	.word	0x20007f60
 800845c:	20007f64 	.word	0x20007f64

08008460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d04d      	beq.n	800850e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008472:	2308      	movs	r3, #8
 8008474:	425b      	negs	r3, r3
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4413      	add	r3, r2
 800847a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	4b24      	ldr	r3, [pc, #144]	; (8008518 <vPortFree+0xb8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <vPortFree+0x44>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	60fb      	str	r3, [r7, #12]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <vPortFree+0x62>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60bb      	str	r3, [r7, #8]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <vPortFree+0xb8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01e      	beq.n	800850e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11a      	bne.n	800850e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <vPortFree+0xb8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	43db      	mvns	r3, r3
 80084e2:	401a      	ands	r2, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084e8:	f7fe fec6 	bl	8007278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <vPortFree+0xbc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	4a09      	ldr	r2, [pc, #36]	; (800851c <vPortFree+0xbc>)
 80084f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084fa:	6938      	ldr	r0, [r7, #16]
 80084fc:	f000 f874 	bl	80085e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <vPortFree+0xc0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a06      	ldr	r2, [pc, #24]	; (8008520 <vPortFree+0xc0>)
 8008508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800850a:	f7fe fec3 	bl	8007294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20007f6c 	.word	0x20007f6c
 800851c:	20007f5c 	.word	0x20007f5c
 8008520:	20007f68 	.word	0x20007f68

08008524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800852a:	f247 5330 	movw	r3, #30000	; 0x7530
 800852e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008530:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <prvHeapInit+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3307      	adds	r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0307 	bic.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvHeapInit+0xac>)
 8008554:	4413      	add	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <prvHeapInit+0xb0>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <prvHeapInit+0xb0>)
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008570:	2208      	movs	r2, #8
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <prvHeapInit+0xb4>)
 8008584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <prvHeapInit+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <prvHeapInit+0xb4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvHeapInit+0xb4>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <prvHeapInit+0xb8>)
 80085b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <prvHeapInit+0xbc>)
 80085ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <prvHeapInit+0xc0>)
 80085be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000a20 	.word	0x20000a20
 80085d4:	20007f50 	.word	0x20007f50
 80085d8:	20007f58 	.word	0x20007f58
 80085dc:	20007f60 	.word	0x20007f60
 80085e0:	20007f5c 	.word	0x20007f5c
 80085e4:	20007f6c 	.word	0x20007f6c

080085e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <prvInsertBlockIntoFreeList+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e002      	b.n	80085fc <prvInsertBlockIntoFreeList+0x14>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d8f7      	bhi.n	80085f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d108      	bne.n	800862a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d118      	bne.n	8008670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d00d      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	441a      	add	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e003      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d002      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20007f50 	.word	0x20007f50
 8008698:	20007f58 	.word	0x20007f58

0800869c <__assert_func>:
 800869c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800869e:	4614      	mov	r4, r2
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <__assert_func+0x2c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4605      	mov	r5, r0
 80086a8:	68d8      	ldr	r0, [r3, #12]
 80086aa:	b14c      	cbz	r4, 80086c0 <__assert_func+0x24>
 80086ac:	4b07      	ldr	r3, [pc, #28]	; (80086cc <__assert_func+0x30>)
 80086ae:	9100      	str	r1, [sp, #0]
 80086b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086b4:	4906      	ldr	r1, [pc, #24]	; (80086d0 <__assert_func+0x34>)
 80086b6:	462b      	mov	r3, r5
 80086b8:	f000 f8ea 	bl	8008890 <fiprintf>
 80086bc:	f001 f96c 	bl	8009998 <abort>
 80086c0:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <__assert_func+0x38>)
 80086c2:	461c      	mov	r4, r3
 80086c4:	e7f3      	b.n	80086ae <__assert_func+0x12>
 80086c6:	bf00      	nop
 80086c8:	20000034 	.word	0x20000034
 80086cc:	0800c464 	.word	0x0800c464
 80086d0:	0800c471 	.word	0x0800c471
 80086d4:	0800c49f 	.word	0x0800c49f

080086d8 <__errno>:
 80086d8:	4b01      	ldr	r3, [pc, #4]	; (80086e0 <__errno+0x8>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000034 	.word	0x20000034

080086e4 <std>:
 80086e4:	2300      	movs	r3, #0
 80086e6:	b510      	push	{r4, lr}
 80086e8:	4604      	mov	r4, r0
 80086ea:	e9c0 3300 	strd	r3, r3, [r0]
 80086ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086f2:	6083      	str	r3, [r0, #8]
 80086f4:	8181      	strh	r1, [r0, #12]
 80086f6:	6643      	str	r3, [r0, #100]	; 0x64
 80086f8:	81c2      	strh	r2, [r0, #14]
 80086fa:	6183      	str	r3, [r0, #24]
 80086fc:	4619      	mov	r1, r3
 80086fe:	2208      	movs	r2, #8
 8008700:	305c      	adds	r0, #92	; 0x5c
 8008702:	f000 f946 	bl	8008992 <memset>
 8008706:	4b05      	ldr	r3, [pc, #20]	; (800871c <std+0x38>)
 8008708:	6263      	str	r3, [r4, #36]	; 0x24
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <std+0x3c>)
 800870c:	62a3      	str	r3, [r4, #40]	; 0x28
 800870e:	4b05      	ldr	r3, [pc, #20]	; (8008724 <std+0x40>)
 8008710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <std+0x44>)
 8008714:	6224      	str	r4, [r4, #32]
 8008716:	6323      	str	r3, [r4, #48]	; 0x30
 8008718:	bd10      	pop	{r4, pc}
 800871a:	bf00      	nop
 800871c:	0800976d 	.word	0x0800976d
 8008720:	0800978f 	.word	0x0800978f
 8008724:	080097c7 	.word	0x080097c7
 8008728:	080097eb 	.word	0x080097eb

0800872c <_cleanup_r>:
 800872c:	4901      	ldr	r1, [pc, #4]	; (8008734 <_cleanup_r+0x8>)
 800872e:	f000 b8c1 	b.w	80088b4 <_fwalk_reent>
 8008732:	bf00      	nop
 8008734:	0800a7c5 	.word	0x0800a7c5

08008738 <__sfmoreglue>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	1e4a      	subs	r2, r1, #1
 800873c:	2568      	movs	r5, #104	; 0x68
 800873e:	4355      	muls	r5, r2
 8008740:	460e      	mov	r6, r1
 8008742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008746:	f000 f92d 	bl	80089a4 <_malloc_r>
 800874a:	4604      	mov	r4, r0
 800874c:	b140      	cbz	r0, 8008760 <__sfmoreglue+0x28>
 800874e:	2100      	movs	r1, #0
 8008750:	e9c0 1600 	strd	r1, r6, [r0]
 8008754:	300c      	adds	r0, #12
 8008756:	60a0      	str	r0, [r4, #8]
 8008758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800875c:	f000 f919 	bl	8008992 <memset>
 8008760:	4620      	mov	r0, r4
 8008762:	bd70      	pop	{r4, r5, r6, pc}

08008764 <__sfp_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	; (800876c <__sfp_lock_acquire+0x8>)
 8008766:	f000 b8ea 	b.w	800893e <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	200085d8 	.word	0x200085d8

08008770 <__sfp_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__sfp_lock_release+0x8>)
 8008772:	f000 b8e5 	b.w	8008940 <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	200085d8 	.word	0x200085d8

0800877c <__sinit_lock_acquire>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__sinit_lock_acquire+0x8>)
 800877e:	f000 b8de 	b.w	800893e <__retarget_lock_acquire_recursive>
 8008782:	bf00      	nop
 8008784:	200085d3 	.word	0x200085d3

08008788 <__sinit_lock_release>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__sinit_lock_release+0x8>)
 800878a:	f000 b8d9 	b.w	8008940 <__retarget_lock_release_recursive>
 800878e:	bf00      	nop
 8008790:	200085d3 	.word	0x200085d3

08008794 <__sinit>:
 8008794:	b510      	push	{r4, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	f7ff fff0 	bl	800877c <__sinit_lock_acquire>
 800879c:	69a3      	ldr	r3, [r4, #24]
 800879e:	b11b      	cbz	r3, 80087a8 <__sinit+0x14>
 80087a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a4:	f7ff bff0 	b.w	8008788 <__sinit_lock_release>
 80087a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087ac:	6523      	str	r3, [r4, #80]	; 0x50
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <__sinit+0x68>)
 80087b0:	4a13      	ldr	r2, [pc, #76]	; (8008800 <__sinit+0x6c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	bf04      	itt	eq
 80087ba:	2301      	moveq	r3, #1
 80087bc:	61a3      	streq	r3, [r4, #24]
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f820 	bl	8008804 <__sfp>
 80087c4:	6060      	str	r0, [r4, #4]
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 f81c 	bl	8008804 <__sfp>
 80087cc:	60a0      	str	r0, [r4, #8]
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f818 	bl	8008804 <__sfp>
 80087d4:	2200      	movs	r2, #0
 80087d6:	60e0      	str	r0, [r4, #12]
 80087d8:	2104      	movs	r1, #4
 80087da:	6860      	ldr	r0, [r4, #4]
 80087dc:	f7ff ff82 	bl	80086e4 <std>
 80087e0:	68a0      	ldr	r0, [r4, #8]
 80087e2:	2201      	movs	r2, #1
 80087e4:	2109      	movs	r1, #9
 80087e6:	f7ff ff7d 	bl	80086e4 <std>
 80087ea:	68e0      	ldr	r0, [r4, #12]
 80087ec:	2202      	movs	r2, #2
 80087ee:	2112      	movs	r1, #18
 80087f0:	f7ff ff78 	bl	80086e4 <std>
 80087f4:	2301      	movs	r3, #1
 80087f6:	61a3      	str	r3, [r4, #24]
 80087f8:	e7d2      	b.n	80087a0 <__sinit+0xc>
 80087fa:	bf00      	nop
 80087fc:	0800c500 	.word	0x0800c500
 8008800:	0800872d 	.word	0x0800872d

08008804 <__sfp>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	4607      	mov	r7, r0
 8008808:	f7ff ffac 	bl	8008764 <__sfp_lock_acquire>
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <__sfp+0x84>)
 800880e:	681e      	ldr	r6, [r3, #0]
 8008810:	69b3      	ldr	r3, [r6, #24]
 8008812:	b913      	cbnz	r3, 800881a <__sfp+0x16>
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff ffbd 	bl	8008794 <__sinit>
 800881a:	3648      	adds	r6, #72	; 0x48
 800881c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	d503      	bpl.n	800882c <__sfp+0x28>
 8008824:	6833      	ldr	r3, [r6, #0]
 8008826:	b30b      	cbz	r3, 800886c <__sfp+0x68>
 8008828:	6836      	ldr	r6, [r6, #0]
 800882a:	e7f7      	b.n	800881c <__sfp+0x18>
 800882c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008830:	b9d5      	cbnz	r5, 8008868 <__sfp+0x64>
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <__sfp+0x88>)
 8008834:	60e3      	str	r3, [r4, #12]
 8008836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800883a:	6665      	str	r5, [r4, #100]	; 0x64
 800883c:	f000 f87e 	bl	800893c <__retarget_lock_init_recursive>
 8008840:	f7ff ff96 	bl	8008770 <__sfp_lock_release>
 8008844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800884c:	6025      	str	r5, [r4, #0]
 800884e:	61a5      	str	r5, [r4, #24]
 8008850:	2208      	movs	r2, #8
 8008852:	4629      	mov	r1, r5
 8008854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008858:	f000 f89b 	bl	8008992 <memset>
 800885c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008864:	4620      	mov	r0, r4
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008868:	3468      	adds	r4, #104	; 0x68
 800886a:	e7d9      	b.n	8008820 <__sfp+0x1c>
 800886c:	2104      	movs	r1, #4
 800886e:	4638      	mov	r0, r7
 8008870:	f7ff ff62 	bl	8008738 <__sfmoreglue>
 8008874:	4604      	mov	r4, r0
 8008876:	6030      	str	r0, [r6, #0]
 8008878:	2800      	cmp	r0, #0
 800887a:	d1d5      	bne.n	8008828 <__sfp+0x24>
 800887c:	f7ff ff78 	bl	8008770 <__sfp_lock_release>
 8008880:	230c      	movs	r3, #12
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	e7ee      	b.n	8008864 <__sfp+0x60>
 8008886:	bf00      	nop
 8008888:	0800c500 	.word	0x0800c500
 800888c:	ffff0001 	.word	0xffff0001

08008890 <fiprintf>:
 8008890:	b40e      	push	{r1, r2, r3}
 8008892:	b503      	push	{r0, r1, lr}
 8008894:	4601      	mov	r1, r0
 8008896:	ab03      	add	r3, sp, #12
 8008898:	4805      	ldr	r0, [pc, #20]	; (80088b0 <fiprintf+0x20>)
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	6800      	ldr	r0, [r0, #0]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f000 f903 	bl	8008aac <_vfiprintf_r>
 80088a6:	b002      	add	sp, #8
 80088a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ac:	b003      	add	sp, #12
 80088ae:	4770      	bx	lr
 80088b0:	20000034 	.word	0x20000034

080088b4 <_fwalk_reent>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4606      	mov	r6, r0
 80088ba:	4688      	mov	r8, r1
 80088bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088c0:	2700      	movs	r7, #0
 80088c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088c6:	f1b9 0901 	subs.w	r9, r9, #1
 80088ca:	d505      	bpl.n	80088d8 <_fwalk_reent+0x24>
 80088cc:	6824      	ldr	r4, [r4, #0]
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	d1f7      	bne.n	80088c2 <_fwalk_reent+0xe>
 80088d2:	4638      	mov	r0, r7
 80088d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d8:	89ab      	ldrh	r3, [r5, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d907      	bls.n	80088ee <_fwalk_reent+0x3a>
 80088de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088e2:	3301      	adds	r3, #1
 80088e4:	d003      	beq.n	80088ee <_fwalk_reent+0x3a>
 80088e6:	4629      	mov	r1, r5
 80088e8:	4630      	mov	r0, r6
 80088ea:	47c0      	blx	r8
 80088ec:	4307      	orrs	r7, r0
 80088ee:	3568      	adds	r5, #104	; 0x68
 80088f0:	e7e9      	b.n	80088c6 <_fwalk_reent+0x12>
	...

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4d0d      	ldr	r5, [pc, #52]	; (800892c <__libc_init_array+0x38>)
 80088f8:	4c0d      	ldr	r4, [pc, #52]	; (8008930 <__libc_init_array+0x3c>)
 80088fa:	1b64      	subs	r4, r4, r5
 80088fc:	10a4      	asrs	r4, r4, #2
 80088fe:	2600      	movs	r6, #0
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	4d0b      	ldr	r5, [pc, #44]	; (8008934 <__libc_init_array+0x40>)
 8008906:	4c0c      	ldr	r4, [pc, #48]	; (8008938 <__libc_init_array+0x44>)
 8008908:	f002 fe26 	bl	800b558 <_init>
 800890c:	1b64      	subs	r4, r4, r5
 800890e:	10a4      	asrs	r4, r4, #2
 8008910:	2600      	movs	r6, #0
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	f855 3b04 	ldr.w	r3, [r5], #4
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	f855 3b04 	ldr.w	r3, [r5], #4
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	0800c850 	.word	0x0800c850
 8008930:	0800c850 	.word	0x0800c850
 8008934:	0800c850 	.word	0x0800c850
 8008938:	0800c854 	.word	0x0800c854

0800893c <__retarget_lock_init_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_acquire_recursive>:
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_release_recursive>:
 8008940:	4770      	bx	lr

08008942 <memcpy>:
 8008942:	440a      	add	r2, r1
 8008944:	4291      	cmp	r1, r2
 8008946:	f100 33ff 	add.w	r3, r0, #4294967295
 800894a:	d100      	bne.n	800894e <memcpy+0xc>
 800894c:	4770      	bx	lr
 800894e:	b510      	push	{r4, lr}
 8008950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008958:	4291      	cmp	r1, r2
 800895a:	d1f9      	bne.n	8008950 <memcpy+0xe>
 800895c:	bd10      	pop	{r4, pc}

0800895e <memmove>:
 800895e:	4288      	cmp	r0, r1
 8008960:	b510      	push	{r4, lr}
 8008962:	eb01 0402 	add.w	r4, r1, r2
 8008966:	d902      	bls.n	800896e <memmove+0x10>
 8008968:	4284      	cmp	r4, r0
 800896a:	4623      	mov	r3, r4
 800896c:	d807      	bhi.n	800897e <memmove+0x20>
 800896e:	1e43      	subs	r3, r0, #1
 8008970:	42a1      	cmp	r1, r4
 8008972:	d008      	beq.n	8008986 <memmove+0x28>
 8008974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800897c:	e7f8      	b.n	8008970 <memmove+0x12>
 800897e:	4402      	add	r2, r0
 8008980:	4601      	mov	r1, r0
 8008982:	428a      	cmp	r2, r1
 8008984:	d100      	bne.n	8008988 <memmove+0x2a>
 8008986:	bd10      	pop	{r4, pc}
 8008988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800898c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008990:	e7f7      	b.n	8008982 <memmove+0x24>

08008992 <memset>:
 8008992:	4402      	add	r2, r0
 8008994:	4603      	mov	r3, r0
 8008996:	4293      	cmp	r3, r2
 8008998:	d100      	bne.n	800899c <memset+0xa>
 800899a:	4770      	bx	lr
 800899c:	f803 1b01 	strb.w	r1, [r3], #1
 80089a0:	e7f9      	b.n	8008996 <memset+0x4>
	...

080089a4 <_malloc_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	1ccd      	adds	r5, r1, #3
 80089a8:	f025 0503 	bic.w	r5, r5, #3
 80089ac:	3508      	adds	r5, #8
 80089ae:	2d0c      	cmp	r5, #12
 80089b0:	bf38      	it	cc
 80089b2:	250c      	movcc	r5, #12
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	4606      	mov	r6, r0
 80089b8:	db01      	blt.n	80089be <_malloc_r+0x1a>
 80089ba:	42a9      	cmp	r1, r5
 80089bc:	d903      	bls.n	80089c6 <_malloc_r+0x22>
 80089be:	230c      	movs	r3, #12
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	2000      	movs	r0, #0
 80089c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c6:	f001 ffbb 	bl	800a940 <__malloc_lock>
 80089ca:	4921      	ldr	r1, [pc, #132]	; (8008a50 <_malloc_r+0xac>)
 80089cc:	680a      	ldr	r2, [r1, #0]
 80089ce:	4614      	mov	r4, r2
 80089d0:	b99c      	cbnz	r4, 80089fa <_malloc_r+0x56>
 80089d2:	4f20      	ldr	r7, [pc, #128]	; (8008a54 <_malloc_r+0xb0>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	b923      	cbnz	r3, 80089e2 <_malloc_r+0x3e>
 80089d8:	4621      	mov	r1, r4
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 fe82 	bl	80096e4 <_sbrk_r>
 80089e0:	6038      	str	r0, [r7, #0]
 80089e2:	4629      	mov	r1, r5
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 fe7d 	bl	80096e4 <_sbrk_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	d123      	bne.n	8008a36 <_malloc_r+0x92>
 80089ee:	230c      	movs	r3, #12
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	4630      	mov	r0, r6
 80089f4:	f001 ffaa 	bl	800a94c <__malloc_unlock>
 80089f8:	e7e3      	b.n	80089c2 <_malloc_r+0x1e>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	1b5b      	subs	r3, r3, r5
 80089fe:	d417      	bmi.n	8008a30 <_malloc_r+0x8c>
 8008a00:	2b0b      	cmp	r3, #11
 8008a02:	d903      	bls.n	8008a0c <_malloc_r+0x68>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	441c      	add	r4, r3
 8008a08:	6025      	str	r5, [r4, #0]
 8008a0a:	e004      	b.n	8008a16 <_malloc_r+0x72>
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	42a2      	cmp	r2, r4
 8008a10:	bf0c      	ite	eq
 8008a12:	600b      	streq	r3, [r1, #0]
 8008a14:	6053      	strne	r3, [r2, #4]
 8008a16:	4630      	mov	r0, r6
 8008a18:	f001 ff98 	bl	800a94c <__malloc_unlock>
 8008a1c:	f104 000b 	add.w	r0, r4, #11
 8008a20:	1d23      	adds	r3, r4, #4
 8008a22:	f020 0007 	bic.w	r0, r0, #7
 8008a26:	1ac2      	subs	r2, r0, r3
 8008a28:	d0cc      	beq.n	80089c4 <_malloc_r+0x20>
 8008a2a:	1a1b      	subs	r3, r3, r0
 8008a2c:	50a3      	str	r3, [r4, r2]
 8008a2e:	e7c9      	b.n	80089c4 <_malloc_r+0x20>
 8008a30:	4622      	mov	r2, r4
 8008a32:	6864      	ldr	r4, [r4, #4]
 8008a34:	e7cc      	b.n	80089d0 <_malloc_r+0x2c>
 8008a36:	1cc4      	adds	r4, r0, #3
 8008a38:	f024 0403 	bic.w	r4, r4, #3
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	d0e3      	beq.n	8008a08 <_malloc_r+0x64>
 8008a40:	1a21      	subs	r1, r4, r0
 8008a42:	4630      	mov	r0, r6
 8008a44:	f000 fe4e 	bl	80096e4 <_sbrk_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d1dd      	bne.n	8008a08 <_malloc_r+0x64>
 8008a4c:	e7cf      	b.n	80089ee <_malloc_r+0x4a>
 8008a4e:	bf00      	nop
 8008a50:	20007f70 	.word	0x20007f70
 8008a54:	20007f74 	.word	0x20007f74

08008a58 <__sfputc_r>:
 8008a58:	6893      	ldr	r3, [r2, #8]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	b410      	push	{r4}
 8008a60:	6093      	str	r3, [r2, #8]
 8008a62:	da08      	bge.n	8008a76 <__sfputc_r+0x1e>
 8008a64:	6994      	ldr	r4, [r2, #24]
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	db01      	blt.n	8008a6e <__sfputc_r+0x16>
 8008a6a:	290a      	cmp	r1, #10
 8008a6c:	d103      	bne.n	8008a76 <__sfputc_r+0x1e>
 8008a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a72:	f000 bebf 	b.w	80097f4 <__swbuf_r>
 8008a76:	6813      	ldr	r3, [r2, #0]
 8008a78:	1c58      	adds	r0, r3, #1
 8008a7a:	6010      	str	r0, [r2, #0]
 8008a7c:	7019      	strb	r1, [r3, #0]
 8008a7e:	4608      	mov	r0, r1
 8008a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <__sfputs_r>:
 8008a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a88:	4606      	mov	r6, r0
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	18d5      	adds	r5, r2, r3
 8008a90:	42ac      	cmp	r4, r5
 8008a92:	d101      	bne.n	8008a98 <__sfputs_r+0x12>
 8008a94:	2000      	movs	r0, #0
 8008a96:	e007      	b.n	8008aa8 <__sfputs_r+0x22>
 8008a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9c:	463a      	mov	r2, r7
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f7ff ffda 	bl	8008a58 <__sfputc_r>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d1f3      	bne.n	8008a90 <__sfputs_r+0xa>
 8008aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aac <_vfiprintf_r>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	b09d      	sub	sp, #116	; 0x74
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	4698      	mov	r8, r3
 8008ab8:	4606      	mov	r6, r0
 8008aba:	b118      	cbz	r0, 8008ac4 <_vfiprintf_r+0x18>
 8008abc:	6983      	ldr	r3, [r0, #24]
 8008abe:	b90b      	cbnz	r3, 8008ac4 <_vfiprintf_r+0x18>
 8008ac0:	f7ff fe68 	bl	8008794 <__sinit>
 8008ac4:	4b89      	ldr	r3, [pc, #548]	; (8008cec <_vfiprintf_r+0x240>)
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	d11b      	bne.n	8008b02 <_vfiprintf_r+0x56>
 8008aca:	6875      	ldr	r5, [r6, #4]
 8008acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ace:	07d9      	lsls	r1, r3, #31
 8008ad0:	d405      	bmi.n	8008ade <_vfiprintf_r+0x32>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	059a      	lsls	r2, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_vfiprintf_r+0x32>
 8008ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ada:	f7ff ff30 	bl	800893e <__retarget_lock_acquire_recursive>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	071b      	lsls	r3, r3, #28
 8008ae2:	d501      	bpl.n	8008ae8 <_vfiprintf_r+0x3c>
 8008ae4:	692b      	ldr	r3, [r5, #16]
 8008ae6:	b9eb      	cbnz	r3, 8008b24 <_vfiprintf_r+0x78>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 fee6 	bl	80098bc <__swsetup_r>
 8008af0:	b1c0      	cbz	r0, 8008b24 <_vfiprintf_r+0x78>
 8008af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af4:	07dc      	lsls	r4, r3, #31
 8008af6:	d50e      	bpl.n	8008b16 <_vfiprintf_r+0x6a>
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	b01d      	add	sp, #116	; 0x74
 8008afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b02:	4b7b      	ldr	r3, [pc, #492]	; (8008cf0 <_vfiprintf_r+0x244>)
 8008b04:	429d      	cmp	r5, r3
 8008b06:	d101      	bne.n	8008b0c <_vfiprintf_r+0x60>
 8008b08:	68b5      	ldr	r5, [r6, #8]
 8008b0a:	e7df      	b.n	8008acc <_vfiprintf_r+0x20>
 8008b0c:	4b79      	ldr	r3, [pc, #484]	; (8008cf4 <_vfiprintf_r+0x248>)
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf08      	it	eq
 8008b12:	68f5      	ldreq	r5, [r6, #12]
 8008b14:	e7da      	b.n	8008acc <_vfiprintf_r+0x20>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	0598      	lsls	r0, r3, #22
 8008b1a:	d4ed      	bmi.n	8008af8 <_vfiprintf_r+0x4c>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1e:	f7ff ff0f 	bl	8008940 <__retarget_lock_release_recursive>
 8008b22:	e7e9      	b.n	8008af8 <_vfiprintf_r+0x4c>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9309      	str	r3, [sp, #36]	; 0x24
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b32:	2330      	movs	r3, #48	; 0x30
 8008b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cf8 <_vfiprintf_r+0x24c>
 8008b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	4623      	mov	r3, r4
 8008b42:	469a      	mov	sl, r3
 8008b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b48:	b10a      	cbz	r2, 8008b4e <_vfiprintf_r+0xa2>
 8008b4a:	2a25      	cmp	r2, #37	; 0x25
 8008b4c:	d1f9      	bne.n	8008b42 <_vfiprintf_r+0x96>
 8008b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b52:	d00b      	beq.n	8008b6c <_vfiprintf_r+0xc0>
 8008b54:	465b      	mov	r3, fp
 8008b56:	4622      	mov	r2, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ff93 	bl	8008a86 <__sfputs_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	f000 80aa 	beq.w	8008cba <_vfiprintf_r+0x20e>
 8008b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b68:	445a      	add	r2, fp
 8008b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80a2 	beq.w	8008cba <_vfiprintf_r+0x20e>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b80:	f10a 0a01 	add.w	sl, sl, #1
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2205      	movs	r2, #5
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	4858      	ldr	r0, [pc, #352]	; (8008cf8 <_vfiprintf_r+0x24c>)
 8008b98:	f7f7 fb22 	bl	80001e0 <memchr>
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	b9d8      	cbnz	r0, 8008bd8 <_vfiprintf_r+0x12c>
 8008ba0:	06d1      	lsls	r1, r2, #27
 8008ba2:	bf44      	itt	mi
 8008ba4:	2320      	movmi	r3, #32
 8008ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008baa:	0713      	lsls	r3, r2, #28
 8008bac:	bf44      	itt	mi
 8008bae:	232b      	movmi	r3, #43	; 0x2b
 8008bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bba:	d015      	beq.n	8008be8 <_vfiprintf_r+0x13c>
 8008bbc:	9a07      	ldr	r2, [sp, #28]
 8008bbe:	4654      	mov	r4, sl
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f04f 0c0a 	mov.w	ip, #10
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bcc:	3b30      	subs	r3, #48	; 0x30
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d94e      	bls.n	8008c70 <_vfiprintf_r+0x1c4>
 8008bd2:	b1b0      	cbz	r0, 8008c02 <_vfiprintf_r+0x156>
 8008bd4:	9207      	str	r2, [sp, #28]
 8008bd6:	e014      	b.n	8008c02 <_vfiprintf_r+0x156>
 8008bd8:	eba0 0308 	sub.w	r3, r0, r8
 8008bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	46a2      	mov	sl, r4
 8008be6:	e7d2      	b.n	8008b8e <_vfiprintf_r+0xe2>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbb      	ittet	lt
 8008bf4:	425b      	neglt	r3, r3
 8008bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfa:	9307      	strge	r3, [sp, #28]
 8008bfc:	9307      	strlt	r3, [sp, #28]
 8008bfe:	bfb8      	it	lt
 8008c00:	9204      	strlt	r2, [sp, #16]
 8008c02:	7823      	ldrb	r3, [r4, #0]
 8008c04:	2b2e      	cmp	r3, #46	; 0x2e
 8008c06:	d10c      	bne.n	8008c22 <_vfiprintf_r+0x176>
 8008c08:	7863      	ldrb	r3, [r4, #1]
 8008c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0c:	d135      	bne.n	8008c7a <_vfiprintf_r+0x1ce>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9203      	str	r2, [sp, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfb8      	it	lt
 8008c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1e:	3402      	adds	r4, #2
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d08 <_vfiprintf_r+0x25c>
 8008c26:	7821      	ldrb	r1, [r4, #0]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 fad8 	bl	80001e0 <memchr>
 8008c30:	b140      	cbz	r0, 8008c44 <_vfiprintf_r+0x198>
 8008c32:	2340      	movs	r3, #64	; 0x40
 8008c34:	eba0 000a 	sub.w	r0, r0, sl
 8008c38:	fa03 f000 	lsl.w	r0, r3, r0
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	4303      	orrs	r3, r0
 8008c40:	3401      	adds	r4, #1
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c48:	482c      	ldr	r0, [pc, #176]	; (8008cfc <_vfiprintf_r+0x250>)
 8008c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c4e:	2206      	movs	r2, #6
 8008c50:	f7f7 fac6 	bl	80001e0 <memchr>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d03f      	beq.n	8008cd8 <_vfiprintf_r+0x22c>
 8008c58:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <_vfiprintf_r+0x254>)
 8008c5a:	bb1b      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x1f8>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	3307      	adds	r3, #7
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	3308      	adds	r3, #8
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6a:	443b      	add	r3, r7
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	e767      	b.n	8008b40 <_vfiprintf_r+0x94>
 8008c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c74:	460c      	mov	r4, r1
 8008c76:	2001      	movs	r0, #1
 8008c78:	e7a5      	b.n	8008bc6 <_vfiprintf_r+0x11a>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	3401      	adds	r4, #1
 8008c7e:	9305      	str	r3, [sp, #20]
 8008c80:	4619      	mov	r1, r3
 8008c82:	f04f 0c0a 	mov.w	ip, #10
 8008c86:	4620      	mov	r0, r4
 8008c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8c:	3a30      	subs	r2, #48	; 0x30
 8008c8e:	2a09      	cmp	r2, #9
 8008c90:	d903      	bls.n	8008c9a <_vfiprintf_r+0x1ee>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0c5      	beq.n	8008c22 <_vfiprintf_r+0x176>
 8008c96:	9105      	str	r1, [sp, #20]
 8008c98:	e7c3      	b.n	8008c22 <_vfiprintf_r+0x176>
 8008c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e7f0      	b.n	8008c86 <_vfiprintf_r+0x1da>
 8008ca4:	ab03      	add	r3, sp, #12
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	462a      	mov	r2, r5
 8008caa:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <_vfiprintf_r+0x258>)
 8008cac:	a904      	add	r1, sp, #16
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f000 f8cc 	bl	8008e4c <_printf_float>
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	1c78      	adds	r0, r7, #1
 8008cb8:	d1d6      	bne.n	8008c68 <_vfiprintf_r+0x1bc>
 8008cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cbc:	07d9      	lsls	r1, r3, #31
 8008cbe:	d405      	bmi.n	8008ccc <_vfiprintf_r+0x220>
 8008cc0:	89ab      	ldrh	r3, [r5, #12]
 8008cc2:	059a      	lsls	r2, r3, #22
 8008cc4:	d402      	bmi.n	8008ccc <_vfiprintf_r+0x220>
 8008cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc8:	f7ff fe3a 	bl	8008940 <__retarget_lock_release_recursive>
 8008ccc:	89ab      	ldrh	r3, [r5, #12]
 8008cce:	065b      	lsls	r3, r3, #25
 8008cd0:	f53f af12 	bmi.w	8008af8 <_vfiprintf_r+0x4c>
 8008cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd6:	e711      	b.n	8008afc <_vfiprintf_r+0x50>
 8008cd8:	ab03      	add	r3, sp, #12
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <_vfiprintf_r+0x258>)
 8008ce0:	a904      	add	r1, sp, #16
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 fb56 	bl	8009394 <_printf_i>
 8008ce8:	e7e4      	b.n	8008cb4 <_vfiprintf_r+0x208>
 8008cea:	bf00      	nop
 8008cec:	0800c4c0 	.word	0x0800c4c0
 8008cf0:	0800c4e0 	.word	0x0800c4e0
 8008cf4:	0800c4a0 	.word	0x0800c4a0
 8008cf8:	0800c504 	.word	0x0800c504
 8008cfc:	0800c50e 	.word	0x0800c50e
 8008d00:	08008e4d 	.word	0x08008e4d
 8008d04:	08008a87 	.word	0x08008a87
 8008d08:	0800c50a 	.word	0x0800c50a

08008d0c <__cvt>:
 8008d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	ec55 4b10 	vmov	r4, r5, d0
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	460e      	mov	r6, r1
 8008d18:	4619      	mov	r1, r3
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	bfbb      	ittet	lt
 8008d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d22:	461d      	movlt	r5, r3
 8008d24:	2300      	movge	r3, #0
 8008d26:	232d      	movlt	r3, #45	; 0x2d
 8008d28:	700b      	strb	r3, [r1, #0]
 8008d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d30:	4691      	mov	r9, r2
 8008d32:	f023 0820 	bic.w	r8, r3, #32
 8008d36:	bfbc      	itt	lt
 8008d38:	4622      	movlt	r2, r4
 8008d3a:	4614      	movlt	r4, r2
 8008d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d40:	d005      	beq.n	8008d4e <__cvt+0x42>
 8008d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d46:	d100      	bne.n	8008d4a <__cvt+0x3e>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	e000      	b.n	8008d50 <__cvt+0x44>
 8008d4e:	2103      	movs	r1, #3
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	ab02      	add	r3, sp, #8
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	ec45 4b10 	vmov	d0, r4, r5
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	4632      	mov	r2, r6
 8008d60:	f000 febe 	bl	8009ae0 <_dtoa_r>
 8008d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d68:	4607      	mov	r7, r0
 8008d6a:	d102      	bne.n	8008d72 <__cvt+0x66>
 8008d6c:	f019 0f01 	tst.w	r9, #1
 8008d70:	d022      	beq.n	8008db8 <__cvt+0xac>
 8008d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d76:	eb07 0906 	add.w	r9, r7, r6
 8008d7a:	d110      	bne.n	8008d9e <__cvt+0x92>
 8008d7c:	783b      	ldrb	r3, [r7, #0]
 8008d7e:	2b30      	cmp	r3, #48	; 0x30
 8008d80:	d10a      	bne.n	8008d98 <__cvt+0x8c>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8e:	b918      	cbnz	r0, 8008d98 <__cvt+0x8c>
 8008d90:	f1c6 0601 	rsb	r6, r6, #1
 8008d94:	f8ca 6000 	str.w	r6, [sl]
 8008d98:	f8da 3000 	ldr.w	r3, [sl]
 8008d9c:	4499      	add	r9, r3
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008daa:	b108      	cbz	r0, 8008db0 <__cvt+0xa4>
 8008dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8008db0:	2230      	movs	r2, #48	; 0x30
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	454b      	cmp	r3, r9
 8008db6:	d307      	bcc.n	8008dc8 <__cvt+0xbc>
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dbc:	1bdb      	subs	r3, r3, r7
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	b004      	add	sp, #16
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	1c59      	adds	r1, r3, #1
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e7f0      	b.n	8008db2 <__cvt+0xa6>

08008dd0 <__exponent>:
 8008dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	4249      	neglt	r1, r1
 8008dda:	f803 2b02 	strb.w	r2, [r3], #2
 8008dde:	bfb4      	ite	lt
 8008de0:	222d      	movlt	r2, #45	; 0x2d
 8008de2:	222b      	movge	r2, #43	; 0x2b
 8008de4:	2909      	cmp	r1, #9
 8008de6:	7042      	strb	r2, [r0, #1]
 8008de8:	dd2a      	ble.n	8008e40 <__exponent+0x70>
 8008dea:	f10d 0407 	add.w	r4, sp, #7
 8008dee:	46a4      	mov	ip, r4
 8008df0:	270a      	movs	r7, #10
 8008df2:	46a6      	mov	lr, r4
 8008df4:	460a      	mov	r2, r1
 8008df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8008dfe:	3530      	adds	r5, #48	; 0x30
 8008e00:	2a63      	cmp	r2, #99	; 0x63
 8008e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	dcf1      	bgt.n	8008df2 <__exponent+0x22>
 8008e0e:	3130      	adds	r1, #48	; 0x30
 8008e10:	f1ae 0502 	sub.w	r5, lr, #2
 8008e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e18:	1c44      	adds	r4, r0, #1
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4561      	cmp	r1, ip
 8008e1e:	d30a      	bcc.n	8008e36 <__exponent+0x66>
 8008e20:	f10d 0209 	add.w	r2, sp, #9
 8008e24:	eba2 020e 	sub.w	r2, r2, lr
 8008e28:	4565      	cmp	r5, ip
 8008e2a:	bf88      	it	hi
 8008e2c:	2200      	movhi	r2, #0
 8008e2e:	4413      	add	r3, r2
 8008e30:	1a18      	subs	r0, r3, r0
 8008e32:	b003      	add	sp, #12
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e3e:	e7ed      	b.n	8008e1c <__exponent+0x4c>
 8008e40:	2330      	movs	r3, #48	; 0x30
 8008e42:	3130      	adds	r1, #48	; 0x30
 8008e44:	7083      	strb	r3, [r0, #2]
 8008e46:	70c1      	strb	r1, [r0, #3]
 8008e48:	1d03      	adds	r3, r0, #4
 8008e4a:	e7f1      	b.n	8008e30 <__exponent+0x60>

08008e4c <_printf_float>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	ed2d 8b02 	vpush	{d8}
 8008e54:	b08d      	sub	sp, #52	; 0x34
 8008e56:	460c      	mov	r4, r1
 8008e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	461f      	mov	r7, r3
 8008e60:	4605      	mov	r5, r0
 8008e62:	f001 fceb 	bl	800a83c <_localeconv_r>
 8008e66:	f8d0 a000 	ldr.w	sl, [r0]
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 f9b0 	bl	80001d0 <strlen>
 8008e70:	2300      	movs	r3, #0
 8008e72:	930a      	str	r3, [sp, #40]	; 0x28
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e80:	3307      	adds	r3, #7
 8008e82:	f023 0307 	bic.w	r3, r3, #7
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	f8c8 2000 	str.w	r2, [r8]
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	4b9f      	ldr	r3, [pc, #636]	; (8009128 <_printf_float+0x2dc>)
 8008eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	f7f7 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 8008eb6:	bb88      	cbnz	r0, 8008f1c <_printf_float+0xd0>
 8008eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_printf_float+0x2dc>)
 8008ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec2:	f7f7 fe15 	bl	8000af0 <__aeabi_dcmple>
 8008ec6:	bb48      	cbnz	r0, 8008f1c <_printf_float+0xd0>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe04 	bl	8000adc <__aeabi_dcmplt>
 8008ed4:	b110      	cbz	r0, 8008edc <_printf_float+0x90>
 8008ed6:	232d      	movs	r3, #45	; 0x2d
 8008ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008edc:	4b93      	ldr	r3, [pc, #588]	; (800912c <_printf_float+0x2e0>)
 8008ede:	4894      	ldr	r0, [pc, #592]	; (8009130 <_printf_float+0x2e4>)
 8008ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ee4:	bf94      	ite	ls
 8008ee6:	4698      	movls	r8, r3
 8008ee8:	4680      	movhi	r8, r0
 8008eea:	2303      	movs	r3, #3
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	f023 0204 	bic.w	r2, r3, #4
 8008ef4:	6022      	str	r2, [r4, #0]
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	9700      	str	r7, [sp, #0]
 8008efc:	4633      	mov	r3, r6
 8008efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f9d8 	bl	80092b8 <_printf_common>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f040 8090 	bne.w	800902e <_printf_float+0x1e2>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	b00d      	add	sp, #52	; 0x34
 8008f14:	ecbd 8b02 	vpop	{d8}
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fe02 	bl	8000b2c <__aeabi_dcmpun>
 8008f28:	b140      	cbz	r0, 8008f3c <_printf_float+0xf0>
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbc      	itt	lt
 8008f30:	232d      	movlt	r3, #45	; 0x2d
 8008f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f36:	487f      	ldr	r0, [pc, #508]	; (8009134 <_printf_float+0x2e8>)
 8008f38:	4b7f      	ldr	r3, [pc, #508]	; (8009138 <_printf_float+0x2ec>)
 8008f3a:	e7d1      	b.n	8008ee0 <_printf_float+0x94>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f42:	9206      	str	r2, [sp, #24]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	d13f      	bne.n	8008fc8 <_printf_float+0x17c>
 8008f48:	2306      	movs	r3, #6
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	6861      	ldr	r1, [r4, #4]
 8008f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f54:	2300      	movs	r3, #0
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	ab0a      	add	r3, sp, #40	; 0x28
 8008f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f5e:	ab09      	add	r3, sp, #36	; 0x24
 8008f60:	ec49 8b10 	vmov	d0, r8, r9
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fecd 	bl	8008d0c <__cvt>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	2b47      	cmp	r3, #71	; 0x47
 8008f78:	4680      	mov	r8, r0
 8008f7a:	d108      	bne.n	8008f8e <_printf_float+0x142>
 8008f7c:	1cc8      	adds	r0, r1, #3
 8008f7e:	db02      	blt.n	8008f86 <_printf_float+0x13a>
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	dd41      	ble.n	800900a <_printf_float+0x1be>
 8008f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8008f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f92:	d820      	bhi.n	8008fd6 <_printf_float+0x18a>
 8008f94:	3901      	subs	r1, #1
 8008f96:	465a      	mov	r2, fp
 8008f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f9e:	f7ff ff17 	bl	8008dd0 <__exponent>
 8008fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa4:	1813      	adds	r3, r2, r0
 8008fa6:	2a01      	cmp	r2, #1
 8008fa8:	4681      	mov	r9, r0
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	dc02      	bgt.n	8008fb4 <_printf_float+0x168>
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	07d2      	lsls	r2, r2, #31
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_float+0x16c>
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d09c      	beq.n	8008efa <_printf_float+0xae>
 8008fc0:	232d      	movs	r3, #45	; 0x2d
 8008fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc6:	e798      	b.n	8008efa <_printf_float+0xae>
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	2a47      	cmp	r2, #71	; 0x47
 8008fcc:	d1be      	bne.n	8008f4c <_printf_float+0x100>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1bc      	bne.n	8008f4c <_printf_float+0x100>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e7b9      	b.n	8008f4a <_printf_float+0xfe>
 8008fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fda:	d118      	bne.n	800900e <_printf_float+0x1c2>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	dd0b      	ble.n	8008ffa <_printf_float+0x1ae>
 8008fe2:	6121      	str	r1, [r4, #16]
 8008fe4:	b913      	cbnz	r3, 8008fec <_printf_float+0x1a0>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	07d0      	lsls	r0, r2, #31
 8008fea:	d502      	bpl.n	8008ff2 <_printf_float+0x1a6>
 8008fec:	3301      	adds	r3, #1
 8008fee:	440b      	add	r3, r1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	e7de      	b.n	8008fb8 <_printf_float+0x16c>
 8008ffa:	b913      	cbnz	r3, 8009002 <_printf_float+0x1b6>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	07d2      	lsls	r2, r2, #31
 8009000:	d501      	bpl.n	8009006 <_printf_float+0x1ba>
 8009002:	3302      	adds	r3, #2
 8009004:	e7f4      	b.n	8008ff0 <_printf_float+0x1a4>
 8009006:	2301      	movs	r3, #1
 8009008:	e7f2      	b.n	8008ff0 <_printf_float+0x1a4>
 800900a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800900e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009010:	4299      	cmp	r1, r3
 8009012:	db05      	blt.n	8009020 <_printf_float+0x1d4>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	07d8      	lsls	r0, r3, #31
 800901a:	d5ea      	bpl.n	8008ff2 <_printf_float+0x1a6>
 800901c:	1c4b      	adds	r3, r1, #1
 800901e:	e7e7      	b.n	8008ff0 <_printf_float+0x1a4>
 8009020:	2900      	cmp	r1, #0
 8009022:	bfd4      	ite	le
 8009024:	f1c1 0202 	rsble	r2, r1, #2
 8009028:	2201      	movgt	r2, #1
 800902a:	4413      	add	r3, r2
 800902c:	e7e0      	b.n	8008ff0 <_printf_float+0x1a4>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	055a      	lsls	r2, r3, #21
 8009032:	d407      	bmi.n	8009044 <_printf_float+0x1f8>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	4642      	mov	r2, r8
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	d12c      	bne.n	800909c <_printf_float+0x250>
 8009042:	e764      	b.n	8008f0e <_printf_float+0xc2>
 8009044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009048:	f240 80e0 	bls.w	800920c <_printf_float+0x3c0>
 800904c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009058:	2800      	cmp	r0, #0
 800905a:	d034      	beq.n	80090c6 <_printf_float+0x27a>
 800905c:	4a37      	ldr	r2, [pc, #220]	; (800913c <_printf_float+0x2f0>)
 800905e:	2301      	movs	r3, #1
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af51 	beq.w	8008f0e <_printf_float+0xc2>
 800906c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009070:	429a      	cmp	r2, r3
 8009072:	db02      	blt.n	800907a <_printf_float+0x22e>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07d8      	lsls	r0, r3, #31
 8009078:	d510      	bpl.n	800909c <_printf_float+0x250>
 800907a:	ee18 3a10 	vmov	r3, s16
 800907e:	4652      	mov	r2, sl
 8009080:	4631      	mov	r1, r6
 8009082:	4628      	mov	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	3001      	adds	r0, #1
 8009088:	f43f af41 	beq.w	8008f0e <_printf_float+0xc2>
 800908c:	f04f 0800 	mov.w	r8, #0
 8009090:	f104 091a 	add.w	r9, r4, #26
 8009094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009096:	3b01      	subs	r3, #1
 8009098:	4543      	cmp	r3, r8
 800909a:	dc09      	bgt.n	80090b0 <_printf_float+0x264>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	079b      	lsls	r3, r3, #30
 80090a0:	f100 8105 	bmi.w	80092ae <_printf_float+0x462>
 80090a4:	68e0      	ldr	r0, [r4, #12]
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	4298      	cmp	r0, r3
 80090aa:	bfb8      	it	lt
 80090ac:	4618      	movlt	r0, r3
 80090ae:	e730      	b.n	8008f12 <_printf_float+0xc6>
 80090b0:	2301      	movs	r3, #1
 80090b2:	464a      	mov	r2, r9
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af27 	beq.w	8008f0e <_printf_float+0xc2>
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	e7e6      	b.n	8009094 <_printf_float+0x248>
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc39      	bgt.n	8009140 <_printf_float+0x2f4>
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <_printf_float+0x2f0>)
 80090ce:	2301      	movs	r3, #1
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f af19 	beq.w	8008f0e <_printf_float+0xc2>
 80090dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e0:	4313      	orrs	r3, r2
 80090e2:	d102      	bne.n	80090ea <_printf_float+0x29e>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d5d8      	bpl.n	800909c <_printf_float+0x250>
 80090ea:	ee18 3a10 	vmov	r3, s16
 80090ee:	4652      	mov	r2, sl
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f af09 	beq.w	8008f0e <_printf_float+0xc2>
 80090fc:	f04f 0900 	mov.w	r9, #0
 8009100:	f104 0a1a 	add.w	sl, r4, #26
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	425b      	negs	r3, r3
 8009108:	454b      	cmp	r3, r9
 800910a:	dc01      	bgt.n	8009110 <_printf_float+0x2c4>
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	e792      	b.n	8009036 <_printf_float+0x1ea>
 8009110:	2301      	movs	r3, #1
 8009112:	4652      	mov	r2, sl
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	f43f aef7 	beq.w	8008f0e <_printf_float+0xc2>
 8009120:	f109 0901 	add.w	r9, r9, #1
 8009124:	e7ee      	b.n	8009104 <_printf_float+0x2b8>
 8009126:	bf00      	nop
 8009128:	7fefffff 	.word	0x7fefffff
 800912c:	0800c515 	.word	0x0800c515
 8009130:	0800c519 	.word	0x0800c519
 8009134:	0800c521 	.word	0x0800c521
 8009138:	0800c51d 	.word	0x0800c51d
 800913c:	0800c525 	.word	0x0800c525
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009144:	429a      	cmp	r2, r3
 8009146:	bfa8      	it	ge
 8009148:	461a      	movge	r2, r3
 800914a:	2a00      	cmp	r2, #0
 800914c:	4691      	mov	r9, r2
 800914e:	dc37      	bgt.n	80091c0 <_printf_float+0x374>
 8009150:	f04f 0b00 	mov.w	fp, #0
 8009154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009158:	f104 021a 	add.w	r2, r4, #26
 800915c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	eba3 0309 	sub.w	r3, r3, r9
 8009164:	455b      	cmp	r3, fp
 8009166:	dc33      	bgt.n	80091d0 <_printf_float+0x384>
 8009168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916c:	429a      	cmp	r2, r3
 800916e:	db3b      	blt.n	80091e8 <_printf_float+0x39c>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d438      	bmi.n	80091e8 <_printf_float+0x39c>
 8009176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009178:	9b05      	ldr	r3, [sp, #20]
 800917a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	eba2 0901 	sub.w	r9, r2, r1
 8009182:	4599      	cmp	r9, r3
 8009184:	bfa8      	it	ge
 8009186:	4699      	movge	r9, r3
 8009188:	f1b9 0f00 	cmp.w	r9, #0
 800918c:	dc35      	bgt.n	80091fa <_printf_float+0x3ae>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009196:	f104 0a1a 	add.w	sl, r4, #26
 800919a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	eba3 0309 	sub.w	r3, r3, r9
 80091a4:	4543      	cmp	r3, r8
 80091a6:	f77f af79 	ble.w	800909c <_printf_float+0x250>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4652      	mov	r2, sl
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f aeaa 	beq.w	8008f0e <_printf_float+0xc2>
 80091ba:	f108 0801 	add.w	r8, r8, #1
 80091be:	e7ec      	b.n	800919a <_printf_float+0x34e>
 80091c0:	4613      	mov	r3, r2
 80091c2:	4631      	mov	r1, r6
 80091c4:	4642      	mov	r2, r8
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	d1c0      	bne.n	8009150 <_printf_float+0x304>
 80091ce:	e69e      	b.n	8008f0e <_printf_float+0xc2>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4631      	mov	r1, r6
 80091d4:	4628      	mov	r0, r5
 80091d6:	9205      	str	r2, [sp, #20]
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f ae97 	beq.w	8008f0e <_printf_float+0xc2>
 80091e0:	9a05      	ldr	r2, [sp, #20]
 80091e2:	f10b 0b01 	add.w	fp, fp, #1
 80091e6:	e7b9      	b.n	800915c <_printf_float+0x310>
 80091e8:	ee18 3a10 	vmov	r3, s16
 80091ec:	4652      	mov	r2, sl
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	d1be      	bne.n	8009176 <_printf_float+0x32a>
 80091f8:	e689      	b.n	8008f0e <_printf_float+0xc2>
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	464b      	mov	r3, r9
 80091fe:	4442      	add	r2, r8
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	d1c1      	bne.n	800918e <_printf_float+0x342>
 800920a:	e680      	b.n	8008f0e <_printf_float+0xc2>
 800920c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800920e:	2a01      	cmp	r2, #1
 8009210:	dc01      	bgt.n	8009216 <_printf_float+0x3ca>
 8009212:	07db      	lsls	r3, r3, #31
 8009214:	d538      	bpl.n	8009288 <_printf_float+0x43c>
 8009216:	2301      	movs	r3, #1
 8009218:	4642      	mov	r2, r8
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	f43f ae74 	beq.w	8008f0e <_printf_float+0xc2>
 8009226:	ee18 3a10 	vmov	r3, s16
 800922a:	4652      	mov	r2, sl
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f ae6b 	beq.w	8008f0e <_printf_float+0xc2>
 8009238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f7f7 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009244:	b9d8      	cbnz	r0, 800927e <_printf_float+0x432>
 8009246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009248:	f108 0201 	add.w	r2, r8, #1
 800924c:	3b01      	subs	r3, #1
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d10e      	bne.n	8009276 <_printf_float+0x42a>
 8009258:	e659      	b.n	8008f0e <_printf_float+0xc2>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f ae52 	beq.w	8008f0e <_printf_float+0xc2>
 800926a:	f108 0801 	add.w	r8, r8, #1
 800926e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009270:	3b01      	subs	r3, #1
 8009272:	4543      	cmp	r3, r8
 8009274:	dcf1      	bgt.n	800925a <_printf_float+0x40e>
 8009276:	464b      	mov	r3, r9
 8009278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800927c:	e6dc      	b.n	8009038 <_printf_float+0x1ec>
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	f104 0a1a 	add.w	sl, r4, #26
 8009286:	e7f2      	b.n	800926e <_printf_float+0x422>
 8009288:	2301      	movs	r3, #1
 800928a:	4642      	mov	r2, r8
 800928c:	e7df      	b.n	800924e <_printf_float+0x402>
 800928e:	2301      	movs	r3, #1
 8009290:	464a      	mov	r2, r9
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae38 	beq.w	8008f0e <_printf_float+0xc2>
 800929e:	f108 0801 	add.w	r8, r8, #1
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092a6:	1a5b      	subs	r3, r3, r1
 80092a8:	4543      	cmp	r3, r8
 80092aa:	dcf0      	bgt.n	800928e <_printf_float+0x442>
 80092ac:	e6fa      	b.n	80090a4 <_printf_float+0x258>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	f104 0919 	add.w	r9, r4, #25
 80092b6:	e7f4      	b.n	80092a2 <_printf_float+0x456>

080092b8 <_printf_common>:
 80092b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	4616      	mov	r6, r2
 80092be:	4699      	mov	r9, r3
 80092c0:	688a      	ldr	r2, [r1, #8]
 80092c2:	690b      	ldr	r3, [r1, #16]
 80092c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bfb8      	it	lt
 80092cc:	4613      	movlt	r3, r2
 80092ce:	6033      	str	r3, [r6, #0]
 80092d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092d4:	4607      	mov	r7, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b10a      	cbz	r2, 80092de <_printf_common+0x26>
 80092da:	3301      	adds	r3, #1
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	0699      	lsls	r1, r3, #26
 80092e2:	bf42      	ittt	mi
 80092e4:	6833      	ldrmi	r3, [r6, #0]
 80092e6:	3302      	addmi	r3, #2
 80092e8:	6033      	strmi	r3, [r6, #0]
 80092ea:	6825      	ldr	r5, [r4, #0]
 80092ec:	f015 0506 	ands.w	r5, r5, #6
 80092f0:	d106      	bne.n	8009300 <_printf_common+0x48>
 80092f2:	f104 0a19 	add.w	sl, r4, #25
 80092f6:	68e3      	ldr	r3, [r4, #12]
 80092f8:	6832      	ldr	r2, [r6, #0]
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	42ab      	cmp	r3, r5
 80092fe:	dc26      	bgt.n	800934e <_printf_common+0x96>
 8009300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009304:	1e13      	subs	r3, r2, #0
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	bf18      	it	ne
 800930a:	2301      	movne	r3, #1
 800930c:	0692      	lsls	r2, r2, #26
 800930e:	d42b      	bmi.n	8009368 <_printf_common+0xb0>
 8009310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009314:	4649      	mov	r1, r9
 8009316:	4638      	mov	r0, r7
 8009318:	47c0      	blx	r8
 800931a:	3001      	adds	r0, #1
 800931c:	d01e      	beq.n	800935c <_printf_common+0xa4>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	68e5      	ldr	r5, [r4, #12]
 8009322:	6832      	ldr	r2, [r6, #0]
 8009324:	f003 0306 	and.w	r3, r3, #6
 8009328:	2b04      	cmp	r3, #4
 800932a:	bf08      	it	eq
 800932c:	1aad      	subeq	r5, r5, r2
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	bf0c      	ite	eq
 8009334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009338:	2500      	movne	r5, #0
 800933a:	4293      	cmp	r3, r2
 800933c:	bfc4      	itt	gt
 800933e:	1a9b      	subgt	r3, r3, r2
 8009340:	18ed      	addgt	r5, r5, r3
 8009342:	2600      	movs	r6, #0
 8009344:	341a      	adds	r4, #26
 8009346:	42b5      	cmp	r5, r6
 8009348:	d11a      	bne.n	8009380 <_printf_common+0xc8>
 800934a:	2000      	movs	r0, #0
 800934c:	e008      	b.n	8009360 <_printf_common+0xa8>
 800934e:	2301      	movs	r3, #1
 8009350:	4652      	mov	r2, sl
 8009352:	4649      	mov	r1, r9
 8009354:	4638      	mov	r0, r7
 8009356:	47c0      	blx	r8
 8009358:	3001      	adds	r0, #1
 800935a:	d103      	bne.n	8009364 <_printf_common+0xac>
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009364:	3501      	adds	r5, #1
 8009366:	e7c6      	b.n	80092f6 <_printf_common+0x3e>
 8009368:	18e1      	adds	r1, r4, r3
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	2030      	movs	r0, #48	; 0x30
 800936e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009372:	4422      	add	r2, r4
 8009374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800937c:	3302      	adds	r3, #2
 800937e:	e7c7      	b.n	8009310 <_printf_common+0x58>
 8009380:	2301      	movs	r3, #1
 8009382:	4622      	mov	r2, r4
 8009384:	4649      	mov	r1, r9
 8009386:	4638      	mov	r0, r7
 8009388:	47c0      	blx	r8
 800938a:	3001      	adds	r0, #1
 800938c:	d0e6      	beq.n	800935c <_printf_common+0xa4>
 800938e:	3601      	adds	r6, #1
 8009390:	e7d9      	b.n	8009346 <_printf_common+0x8e>
	...

08009394 <_printf_i>:
 8009394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	460c      	mov	r4, r1
 800939a:	4691      	mov	r9, r2
 800939c:	7e27      	ldrb	r7, [r4, #24]
 800939e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093a0:	2f78      	cmp	r7, #120	; 0x78
 80093a2:	4680      	mov	r8, r0
 80093a4:	469a      	mov	sl, r3
 80093a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093aa:	d807      	bhi.n	80093bc <_printf_i+0x28>
 80093ac:	2f62      	cmp	r7, #98	; 0x62
 80093ae:	d80a      	bhi.n	80093c6 <_printf_i+0x32>
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f000 80d8 	beq.w	8009566 <_printf_i+0x1d2>
 80093b6:	2f58      	cmp	r7, #88	; 0x58
 80093b8:	f000 80a3 	beq.w	8009502 <_printf_i+0x16e>
 80093bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093c4:	e03a      	b.n	800943c <_printf_i+0xa8>
 80093c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ca:	2b15      	cmp	r3, #21
 80093cc:	d8f6      	bhi.n	80093bc <_printf_i+0x28>
 80093ce:	a001      	add	r0, pc, #4	; (adr r0, 80093d4 <_printf_i+0x40>)
 80093d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093d4:	0800942d 	.word	0x0800942d
 80093d8:	08009441 	.word	0x08009441
 80093dc:	080093bd 	.word	0x080093bd
 80093e0:	080093bd 	.word	0x080093bd
 80093e4:	080093bd 	.word	0x080093bd
 80093e8:	080093bd 	.word	0x080093bd
 80093ec:	08009441 	.word	0x08009441
 80093f0:	080093bd 	.word	0x080093bd
 80093f4:	080093bd 	.word	0x080093bd
 80093f8:	080093bd 	.word	0x080093bd
 80093fc:	080093bd 	.word	0x080093bd
 8009400:	0800954d 	.word	0x0800954d
 8009404:	08009471 	.word	0x08009471
 8009408:	0800952f 	.word	0x0800952f
 800940c:	080093bd 	.word	0x080093bd
 8009410:	080093bd 	.word	0x080093bd
 8009414:	0800956f 	.word	0x0800956f
 8009418:	080093bd 	.word	0x080093bd
 800941c:	08009471 	.word	0x08009471
 8009420:	080093bd 	.word	0x080093bd
 8009424:	080093bd 	.word	0x080093bd
 8009428:	08009537 	.word	0x08009537
 800942c:	680b      	ldr	r3, [r1, #0]
 800942e:	1d1a      	adds	r2, r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	600a      	str	r2, [r1, #0]
 8009434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800943c:	2301      	movs	r3, #1
 800943e:	e0a3      	b.n	8009588 <_printf_i+0x1f4>
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	6808      	ldr	r0, [r1, #0]
 8009444:	062e      	lsls	r6, r5, #24
 8009446:	f100 0304 	add.w	r3, r0, #4
 800944a:	d50a      	bpl.n	8009462 <_printf_i+0xce>
 800944c:	6805      	ldr	r5, [r0, #0]
 800944e:	600b      	str	r3, [r1, #0]
 8009450:	2d00      	cmp	r5, #0
 8009452:	da03      	bge.n	800945c <_printf_i+0xc8>
 8009454:	232d      	movs	r3, #45	; 0x2d
 8009456:	426d      	negs	r5, r5
 8009458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800945c:	485e      	ldr	r0, [pc, #376]	; (80095d8 <_printf_i+0x244>)
 800945e:	230a      	movs	r3, #10
 8009460:	e019      	b.n	8009496 <_printf_i+0x102>
 8009462:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009466:	6805      	ldr	r5, [r0, #0]
 8009468:	600b      	str	r3, [r1, #0]
 800946a:	bf18      	it	ne
 800946c:	b22d      	sxthne	r5, r5
 800946e:	e7ef      	b.n	8009450 <_printf_i+0xbc>
 8009470:	680b      	ldr	r3, [r1, #0]
 8009472:	6825      	ldr	r5, [r4, #0]
 8009474:	1d18      	adds	r0, r3, #4
 8009476:	6008      	str	r0, [r1, #0]
 8009478:	0628      	lsls	r0, r5, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0xec>
 800947c:	681d      	ldr	r5, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0xf2>
 8009480:	0669      	lsls	r1, r5, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0xe8>
 8009484:	881d      	ldrh	r5, [r3, #0]
 8009486:	4854      	ldr	r0, [pc, #336]	; (80095d8 <_printf_i+0x244>)
 8009488:	2f6f      	cmp	r7, #111	; 0x6f
 800948a:	bf0c      	ite	eq
 800948c:	2308      	moveq	r3, #8
 800948e:	230a      	movne	r3, #10
 8009490:	2100      	movs	r1, #0
 8009492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009496:	6866      	ldr	r6, [r4, #4]
 8009498:	60a6      	str	r6, [r4, #8]
 800949a:	2e00      	cmp	r6, #0
 800949c:	bfa2      	ittt	ge
 800949e:	6821      	ldrge	r1, [r4, #0]
 80094a0:	f021 0104 	bicge.w	r1, r1, #4
 80094a4:	6021      	strge	r1, [r4, #0]
 80094a6:	b90d      	cbnz	r5, 80094ac <_printf_i+0x118>
 80094a8:	2e00      	cmp	r6, #0
 80094aa:	d04d      	beq.n	8009548 <_printf_i+0x1b4>
 80094ac:	4616      	mov	r6, r2
 80094ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80094b2:	fb03 5711 	mls	r7, r3, r1, r5
 80094b6:	5dc7      	ldrb	r7, [r0, r7]
 80094b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094bc:	462f      	mov	r7, r5
 80094be:	42bb      	cmp	r3, r7
 80094c0:	460d      	mov	r5, r1
 80094c2:	d9f4      	bls.n	80094ae <_printf_i+0x11a>
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d10b      	bne.n	80094e0 <_printf_i+0x14c>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	07df      	lsls	r7, r3, #31
 80094cc:	d508      	bpl.n	80094e0 <_printf_i+0x14c>
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	6861      	ldr	r1, [r4, #4]
 80094d2:	4299      	cmp	r1, r3
 80094d4:	bfde      	ittt	le
 80094d6:	2330      	movle	r3, #48	; 0x30
 80094d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094e0:	1b92      	subs	r2, r2, r6
 80094e2:	6122      	str	r2, [r4, #16]
 80094e4:	f8cd a000 	str.w	sl, [sp]
 80094e8:	464b      	mov	r3, r9
 80094ea:	aa03      	add	r2, sp, #12
 80094ec:	4621      	mov	r1, r4
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7ff fee2 	bl	80092b8 <_printf_common>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d14c      	bne.n	8009592 <_printf_i+0x1fe>
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	b004      	add	sp, #16
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	4835      	ldr	r0, [pc, #212]	; (80095d8 <_printf_i+0x244>)
 8009504:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	680e      	ldr	r6, [r1, #0]
 800950c:	061f      	lsls	r7, r3, #24
 800950e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009512:	600e      	str	r6, [r1, #0]
 8009514:	d514      	bpl.n	8009540 <_printf_i+0x1ac>
 8009516:	07d9      	lsls	r1, r3, #31
 8009518:	bf44      	itt	mi
 800951a:	f043 0320 	orrmi.w	r3, r3, #32
 800951e:	6023      	strmi	r3, [r4, #0]
 8009520:	b91d      	cbnz	r5, 800952a <_printf_i+0x196>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f023 0320 	bic.w	r3, r3, #32
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	2310      	movs	r3, #16
 800952c:	e7b0      	b.n	8009490 <_printf_i+0xfc>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	f043 0320 	orr.w	r3, r3, #32
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	2378      	movs	r3, #120	; 0x78
 8009538:	4828      	ldr	r0, [pc, #160]	; (80095dc <_printf_i+0x248>)
 800953a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800953e:	e7e3      	b.n	8009508 <_printf_i+0x174>
 8009540:	065e      	lsls	r6, r3, #25
 8009542:	bf48      	it	mi
 8009544:	b2ad      	uxthmi	r5, r5
 8009546:	e7e6      	b.n	8009516 <_printf_i+0x182>
 8009548:	4616      	mov	r6, r2
 800954a:	e7bb      	b.n	80094c4 <_printf_i+0x130>
 800954c:	680b      	ldr	r3, [r1, #0]
 800954e:	6826      	ldr	r6, [r4, #0]
 8009550:	6960      	ldr	r0, [r4, #20]
 8009552:	1d1d      	adds	r5, r3, #4
 8009554:	600d      	str	r5, [r1, #0]
 8009556:	0635      	lsls	r5, r6, #24
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	d501      	bpl.n	8009560 <_printf_i+0x1cc>
 800955c:	6018      	str	r0, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0x1d2>
 8009560:	0671      	lsls	r1, r6, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0x1c8>
 8009564:	8018      	strh	r0, [r3, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	4616      	mov	r6, r2
 800956c:	e7ba      	b.n	80094e4 <_printf_i+0x150>
 800956e:	680b      	ldr	r3, [r1, #0]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	600a      	str	r2, [r1, #0]
 8009574:	681e      	ldr	r6, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	4630      	mov	r0, r6
 800957c:	f7f6 fe30 	bl	80001e0 <memchr>
 8009580:	b108      	cbz	r0, 8009586 <_printf_i+0x1f2>
 8009582:	1b80      	subs	r0, r0, r6
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	e7a8      	b.n	80094e4 <_printf_i+0x150>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	4632      	mov	r2, r6
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d0ab      	beq.n	80094f8 <_printf_i+0x164>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	d413      	bmi.n	80095ce <_printf_i+0x23a>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e7a4      	b.n	80094fc <_printf_i+0x168>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	47d0      	blx	sl
 80095bc:	3001      	adds	r0, #1
 80095be:	d09b      	beq.n	80094f8 <_printf_i+0x164>
 80095c0:	3501      	adds	r5, #1
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	1a5b      	subs	r3, r3, r1
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dcf2      	bgt.n	80095b2 <_printf_i+0x21e>
 80095cc:	e7eb      	b.n	80095a6 <_printf_i+0x212>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f104 0619 	add.w	r6, r4, #25
 80095d4:	e7f5      	b.n	80095c2 <_printf_i+0x22e>
 80095d6:	bf00      	nop
 80095d8:	0800c527 	.word	0x0800c527
 80095dc:	0800c538 	.word	0x0800c538

080095e0 <iprintf>:
 80095e0:	b40f      	push	{r0, r1, r2, r3}
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <iprintf+0x2c>)
 80095e4:	b513      	push	{r0, r1, r4, lr}
 80095e6:	681c      	ldr	r4, [r3, #0]
 80095e8:	b124      	cbz	r4, 80095f4 <iprintf+0x14>
 80095ea:	69a3      	ldr	r3, [r4, #24]
 80095ec:	b913      	cbnz	r3, 80095f4 <iprintf+0x14>
 80095ee:	4620      	mov	r0, r4
 80095f0:	f7ff f8d0 	bl	8008794 <__sinit>
 80095f4:	ab05      	add	r3, sp, #20
 80095f6:	9a04      	ldr	r2, [sp, #16]
 80095f8:	68a1      	ldr	r1, [r4, #8]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	4620      	mov	r0, r4
 80095fe:	f7ff fa55 	bl	8008aac <_vfiprintf_r>
 8009602:	b002      	add	sp, #8
 8009604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009608:	b004      	add	sp, #16
 800960a:	4770      	bx	lr
 800960c:	20000034 	.word	0x20000034

08009610 <cleanup_glue>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	460c      	mov	r4, r1
 8009614:	6809      	ldr	r1, [r1, #0]
 8009616:	4605      	mov	r5, r0
 8009618:	b109      	cbz	r1, 800961e <cleanup_glue+0xe>
 800961a:	f7ff fff9 	bl	8009610 <cleanup_glue>
 800961e:	4621      	mov	r1, r4
 8009620:	4628      	mov	r0, r5
 8009622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009626:	f001 bd25 	b.w	800b074 <_free_r>
	...

0800962c <_reclaim_reent>:
 800962c:	4b2c      	ldr	r3, [pc, #176]	; (80096e0 <_reclaim_reent+0xb4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4283      	cmp	r3, r0
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	d051      	beq.n	80096dc <_reclaim_reent+0xb0>
 8009638:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800963a:	b143      	cbz	r3, 800964e <_reclaim_reent+0x22>
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d14a      	bne.n	80096d8 <_reclaim_reent+0xac>
 8009642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	b111      	cbz	r1, 800964e <_reclaim_reent+0x22>
 8009648:	4620      	mov	r0, r4
 800964a:	f001 fd13 	bl	800b074 <_free_r>
 800964e:	6961      	ldr	r1, [r4, #20]
 8009650:	b111      	cbz	r1, 8009658 <_reclaim_reent+0x2c>
 8009652:	4620      	mov	r0, r4
 8009654:	f001 fd0e 	bl	800b074 <_free_r>
 8009658:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800965a:	b111      	cbz	r1, 8009662 <_reclaim_reent+0x36>
 800965c:	4620      	mov	r0, r4
 800965e:	f001 fd09 	bl	800b074 <_free_r>
 8009662:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009664:	b111      	cbz	r1, 800966c <_reclaim_reent+0x40>
 8009666:	4620      	mov	r0, r4
 8009668:	f001 fd04 	bl	800b074 <_free_r>
 800966c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800966e:	b111      	cbz	r1, 8009676 <_reclaim_reent+0x4a>
 8009670:	4620      	mov	r0, r4
 8009672:	f001 fcff 	bl	800b074 <_free_r>
 8009676:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009678:	b111      	cbz	r1, 8009680 <_reclaim_reent+0x54>
 800967a:	4620      	mov	r0, r4
 800967c:	f001 fcfa 	bl	800b074 <_free_r>
 8009680:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009682:	b111      	cbz	r1, 800968a <_reclaim_reent+0x5e>
 8009684:	4620      	mov	r0, r4
 8009686:	f001 fcf5 	bl	800b074 <_free_r>
 800968a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800968c:	b111      	cbz	r1, 8009694 <_reclaim_reent+0x68>
 800968e:	4620      	mov	r0, r4
 8009690:	f001 fcf0 	bl	800b074 <_free_r>
 8009694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009696:	b111      	cbz	r1, 800969e <_reclaim_reent+0x72>
 8009698:	4620      	mov	r0, r4
 800969a:	f001 fceb 	bl	800b074 <_free_r>
 800969e:	69a3      	ldr	r3, [r4, #24]
 80096a0:	b1e3      	cbz	r3, 80096dc <_reclaim_reent+0xb0>
 80096a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096a4:	4620      	mov	r0, r4
 80096a6:	4798      	blx	r3
 80096a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096aa:	b1b9      	cbz	r1, 80096dc <_reclaim_reent+0xb0>
 80096ac:	4620      	mov	r0, r4
 80096ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096b2:	f7ff bfad 	b.w	8009610 <cleanup_glue>
 80096b6:	5949      	ldr	r1, [r1, r5]
 80096b8:	b941      	cbnz	r1, 80096cc <_reclaim_reent+0xa0>
 80096ba:	3504      	adds	r5, #4
 80096bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096be:	2d80      	cmp	r5, #128	; 0x80
 80096c0:	68d9      	ldr	r1, [r3, #12]
 80096c2:	d1f8      	bne.n	80096b6 <_reclaim_reent+0x8a>
 80096c4:	4620      	mov	r0, r4
 80096c6:	f001 fcd5 	bl	800b074 <_free_r>
 80096ca:	e7ba      	b.n	8009642 <_reclaim_reent+0x16>
 80096cc:	680e      	ldr	r6, [r1, #0]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f001 fcd0 	bl	800b074 <_free_r>
 80096d4:	4631      	mov	r1, r6
 80096d6:	e7ef      	b.n	80096b8 <_reclaim_reent+0x8c>
 80096d8:	2500      	movs	r5, #0
 80096da:	e7ef      	b.n	80096bc <_reclaim_reent+0x90>
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
 80096de:	bf00      	nop
 80096e0:	20000034 	.word	0x20000034

080096e4 <_sbrk_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_sbrk_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f8 fd6c 	bl	80021cc <_sbrk>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_sbrk_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_sbrk_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200085dc 	.word	0x200085dc

08009704 <sniprintf>:
 8009704:	b40c      	push	{r2, r3}
 8009706:	b530      	push	{r4, r5, lr}
 8009708:	4b17      	ldr	r3, [pc, #92]	; (8009768 <sniprintf+0x64>)
 800970a:	1e0c      	subs	r4, r1, #0
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	b09d      	sub	sp, #116	; 0x74
 8009710:	da08      	bge.n	8009724 <sniprintf+0x20>
 8009712:	238b      	movs	r3, #139	; 0x8b
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	b01d      	add	sp, #116	; 0x74
 800971c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009720:	b002      	add	sp, #8
 8009722:	4770      	bx	lr
 8009724:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009728:	f8ad 3014 	strh.w	r3, [sp, #20]
 800972c:	bf14      	ite	ne
 800972e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009732:	4623      	moveq	r3, r4
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800973c:	9002      	str	r0, [sp, #8]
 800973e:	9006      	str	r0, [sp, #24]
 8009740:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009746:	ab21      	add	r3, sp, #132	; 0x84
 8009748:	a902      	add	r1, sp, #8
 800974a:	4628      	mov	r0, r5
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	f001 fd63 	bl	800b218 <_svfiprintf_r>
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	bfbc      	itt	lt
 8009756:	238b      	movlt	r3, #139	; 0x8b
 8009758:	602b      	strlt	r3, [r5, #0]
 800975a:	2c00      	cmp	r4, #0
 800975c:	d0dd      	beq.n	800971a <sniprintf+0x16>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	e7d9      	b.n	800971a <sniprintf+0x16>
 8009766:	bf00      	nop
 8009768:	20000034 	.word	0x20000034

0800976c <__sread>:
 800976c:	b510      	push	{r4, lr}
 800976e:	460c      	mov	r4, r1
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	f001 fe50 	bl	800b418 <_read_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	bfab      	itete	ge
 800977c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800977e:	89a3      	ldrhlt	r3, [r4, #12]
 8009780:	181b      	addge	r3, r3, r0
 8009782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009786:	bfac      	ite	ge
 8009788:	6563      	strge	r3, [r4, #84]	; 0x54
 800978a:	81a3      	strhlt	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__swrite>:
 800978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	461f      	mov	r7, r3
 8009794:	898b      	ldrh	r3, [r1, #12]
 8009796:	05db      	lsls	r3, r3, #23
 8009798:	4605      	mov	r5, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4616      	mov	r6, r2
 800979e:	d505      	bpl.n	80097ac <__swrite+0x1e>
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	2302      	movs	r3, #2
 80097a6:	2200      	movs	r2, #0
 80097a8:	f001 f84c 	bl	800a844 <_lseek_r>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	4632      	mov	r2, r6
 80097ba:	463b      	mov	r3, r7
 80097bc:	4628      	mov	r0, r5
 80097be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	f000 b869 	b.w	8009898 <_write_r>

080097c6 <__sseek>:
 80097c6:	b510      	push	{r4, lr}
 80097c8:	460c      	mov	r4, r1
 80097ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ce:	f001 f839 	bl	800a844 <_lseek_r>
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	bf15      	itete	ne
 80097d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097e2:	81a3      	strheq	r3, [r4, #12]
 80097e4:	bf18      	it	ne
 80097e6:	81a3      	strhne	r3, [r4, #12]
 80097e8:	bd10      	pop	{r4, pc}

080097ea <__sclose>:
 80097ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ee:	f000 b8db 	b.w	80099a8 <_close_r>
	...

080097f4 <__swbuf_r>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	460e      	mov	r6, r1
 80097f8:	4614      	mov	r4, r2
 80097fa:	4605      	mov	r5, r0
 80097fc:	b118      	cbz	r0, 8009806 <__swbuf_r+0x12>
 80097fe:	6983      	ldr	r3, [r0, #24]
 8009800:	b90b      	cbnz	r3, 8009806 <__swbuf_r+0x12>
 8009802:	f7fe ffc7 	bl	8008794 <__sinit>
 8009806:	4b21      	ldr	r3, [pc, #132]	; (800988c <__swbuf_r+0x98>)
 8009808:	429c      	cmp	r4, r3
 800980a:	d12b      	bne.n	8009864 <__swbuf_r+0x70>
 800980c:	686c      	ldr	r4, [r5, #4]
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	d52f      	bpl.n	8009878 <__swbuf_r+0x84>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	b36b      	cbz	r3, 8009878 <__swbuf_r+0x84>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	6963      	ldr	r3, [r4, #20]
 8009824:	b2f6      	uxtb	r6, r6
 8009826:	4283      	cmp	r3, r0
 8009828:	4637      	mov	r7, r6
 800982a:	dc04      	bgt.n	8009836 <__swbuf_r+0x42>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f000 ffc8 	bl	800a7c4 <_fflush_r>
 8009834:	bb30      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	3b01      	subs	r3, #1
 800983a:	60a3      	str	r3, [r4, #8]
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	6022      	str	r2, [r4, #0]
 8009842:	701e      	strb	r6, [r3, #0]
 8009844:	6963      	ldr	r3, [r4, #20]
 8009846:	3001      	adds	r0, #1
 8009848:	4283      	cmp	r3, r0
 800984a:	d004      	beq.n	8009856 <__swbuf_r+0x62>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	07db      	lsls	r3, r3, #31
 8009850:	d506      	bpl.n	8009860 <__swbuf_r+0x6c>
 8009852:	2e0a      	cmp	r6, #10
 8009854:	d104      	bne.n	8009860 <__swbuf_r+0x6c>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 ffb3 	bl	800a7c4 <_fflush_r>
 800985e:	b988      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009860:	4638      	mov	r0, r7
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <__swbuf_r+0x9c>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d101      	bne.n	800986e <__swbuf_r+0x7a>
 800986a:	68ac      	ldr	r4, [r5, #8]
 800986c:	e7cf      	b.n	800980e <__swbuf_r+0x1a>
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <__swbuf_r+0xa0>)
 8009870:	429c      	cmp	r4, r3
 8009872:	bf08      	it	eq
 8009874:	68ec      	ldreq	r4, [r5, #12]
 8009876:	e7ca      	b.n	800980e <__swbuf_r+0x1a>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f81e 	bl	80098bc <__swsetup_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	d0cb      	beq.n	800981c <__swbuf_r+0x28>
 8009884:	f04f 37ff 	mov.w	r7, #4294967295
 8009888:	e7ea      	b.n	8009860 <__swbuf_r+0x6c>
 800988a:	bf00      	nop
 800988c:	0800c4c0 	.word	0x0800c4c0
 8009890:	0800c4e0 	.word	0x0800c4e0
 8009894:	0800c4a0 	.word	0x0800c4a0

08009898 <_write_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d07      	ldr	r5, [pc, #28]	; (80098b8 <_write_r+0x20>)
 800989c:	4604      	mov	r4, r0
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	2200      	movs	r2, #0
 80098a4:	602a      	str	r2, [r5, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	f7f8 fc3f 	bl	800212a <_write>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_write_r+0x1e>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_write_r+0x1e>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	200085dc 	.word	0x200085dc

080098bc <__swsetup_r>:
 80098bc:	4b32      	ldr	r3, [pc, #200]	; (8009988 <__swsetup_r+0xcc>)
 80098be:	b570      	push	{r4, r5, r6, lr}
 80098c0:	681d      	ldr	r5, [r3, #0]
 80098c2:	4606      	mov	r6, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	b125      	cbz	r5, 80098d2 <__swsetup_r+0x16>
 80098c8:	69ab      	ldr	r3, [r5, #24]
 80098ca:	b913      	cbnz	r3, 80098d2 <__swsetup_r+0x16>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7fe ff61 	bl	8008794 <__sinit>
 80098d2:	4b2e      	ldr	r3, [pc, #184]	; (800998c <__swsetup_r+0xd0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d10f      	bne.n	80098f8 <__swsetup_r+0x3c>
 80098d8:	686c      	ldr	r4, [r5, #4]
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e0:	0719      	lsls	r1, r3, #28
 80098e2:	d42c      	bmi.n	800993e <__swsetup_r+0x82>
 80098e4:	06dd      	lsls	r5, r3, #27
 80098e6:	d411      	bmi.n	800990c <__swsetup_r+0x50>
 80098e8:	2309      	movs	r3, #9
 80098ea:	6033      	str	r3, [r6, #0]
 80098ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e03e      	b.n	8009976 <__swsetup_r+0xba>
 80098f8:	4b25      	ldr	r3, [pc, #148]	; (8009990 <__swsetup_r+0xd4>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d101      	bne.n	8009902 <__swsetup_r+0x46>
 80098fe:	68ac      	ldr	r4, [r5, #8]
 8009900:	e7eb      	b.n	80098da <__swsetup_r+0x1e>
 8009902:	4b24      	ldr	r3, [pc, #144]	; (8009994 <__swsetup_r+0xd8>)
 8009904:	429c      	cmp	r4, r3
 8009906:	bf08      	it	eq
 8009908:	68ec      	ldreq	r4, [r5, #12]
 800990a:	e7e6      	b.n	80098da <__swsetup_r+0x1e>
 800990c:	0758      	lsls	r0, r3, #29
 800990e:	d512      	bpl.n	8009936 <__swsetup_r+0x7a>
 8009910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009912:	b141      	cbz	r1, 8009926 <__swsetup_r+0x6a>
 8009914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009918:	4299      	cmp	r1, r3
 800991a:	d002      	beq.n	8009922 <__swsetup_r+0x66>
 800991c:	4630      	mov	r0, r6
 800991e:	f001 fba9 	bl	800b074 <_free_r>
 8009922:	2300      	movs	r3, #0
 8009924:	6363      	str	r3, [r4, #52]	; 0x34
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	2300      	movs	r3, #0
 8009930:	6063      	str	r3, [r4, #4]
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f043 0308 	orr.w	r3, r3, #8
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	b94b      	cbnz	r3, 8009956 <__swsetup_r+0x9a>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994c:	d003      	beq.n	8009956 <__swsetup_r+0x9a>
 800994e:	4621      	mov	r1, r4
 8009950:	4630      	mov	r0, r6
 8009952:	f000 ffad 	bl	800a8b0 <__smakebuf_r>
 8009956:	89a0      	ldrh	r0, [r4, #12]
 8009958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800995c:	f010 0301 	ands.w	r3, r0, #1
 8009960:	d00a      	beq.n	8009978 <__swsetup_r+0xbc>
 8009962:	2300      	movs	r3, #0
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	6963      	ldr	r3, [r4, #20]
 8009968:	425b      	negs	r3, r3
 800996a:	61a3      	str	r3, [r4, #24]
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	b943      	cbnz	r3, 8009982 <__swsetup_r+0xc6>
 8009970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009974:	d1ba      	bne.n	80098ec <__swsetup_r+0x30>
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	0781      	lsls	r1, r0, #30
 800997a:	bf58      	it	pl
 800997c:	6963      	ldrpl	r3, [r4, #20]
 800997e:	60a3      	str	r3, [r4, #8]
 8009980:	e7f4      	b.n	800996c <__swsetup_r+0xb0>
 8009982:	2000      	movs	r0, #0
 8009984:	e7f7      	b.n	8009976 <__swsetup_r+0xba>
 8009986:	bf00      	nop
 8009988:	20000034 	.word	0x20000034
 800998c:	0800c4c0 	.word	0x0800c4c0
 8009990:	0800c4e0 	.word	0x0800c4e0
 8009994:	0800c4a0 	.word	0x0800c4a0

08009998 <abort>:
 8009998:	b508      	push	{r3, lr}
 800999a:	2006      	movs	r0, #6
 800999c:	f001 fd76 	bl	800b48c <raise>
 80099a0:	2001      	movs	r0, #1
 80099a2:	f7f8 fb9b 	bl	80020dc <_exit>
	...

080099a8 <_close_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_close_r+0x1c>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f8 fbd5 	bl	8002162 <_close>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_close_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_close_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	200085dc 	.word	0x200085dc

080099c8 <quorem>:
 80099c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	6903      	ldr	r3, [r0, #16]
 80099ce:	690c      	ldr	r4, [r1, #16]
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	4607      	mov	r7, r0
 80099d4:	f2c0 8081 	blt.w	8009ada <quorem+0x112>
 80099d8:	3c01      	subs	r4, #1
 80099da:	f101 0814 	add.w	r8, r1, #20
 80099de:	f100 0514 	add.w	r5, r0, #20
 80099e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099f0:	3301      	adds	r3, #1
 80099f2:	429a      	cmp	r2, r3
 80099f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a00:	d331      	bcc.n	8009a66 <quorem+0x9e>
 8009a02:	f04f 0e00 	mov.w	lr, #0
 8009a06:	4640      	mov	r0, r8
 8009a08:	46ac      	mov	ip, r5
 8009a0a:	46f2      	mov	sl, lr
 8009a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a10:	b293      	uxth	r3, r2
 8009a12:	fb06 e303 	mla	r3, r6, r3, lr
 8009a16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a20:	0c12      	lsrs	r2, r2, #16
 8009a22:	f8dc a000 	ldr.w	sl, [ip]
 8009a26:	fb06 e202 	mla	r2, r6, r2, lr
 8009a2a:	fa13 f38a 	uxtah	r3, r3, sl
 8009a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a32:	fa1f fa82 	uxth.w	sl, r2
 8009a36:	f8dc 2000 	ldr.w	r2, [ip]
 8009a3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009a3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a48:	4581      	cmp	r9, r0
 8009a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8009a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a52:	d2db      	bcs.n	8009a0c <quorem+0x44>
 8009a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a58:	b92b      	cbnz	r3, 8009a66 <quorem+0x9e>
 8009a5a:	9b01      	ldr	r3, [sp, #4]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	d32e      	bcc.n	8009ac2 <quorem+0xfa>
 8009a64:	613c      	str	r4, [r7, #16]
 8009a66:	4638      	mov	r0, r7
 8009a68:	f001 f9f4 	bl	800ae54 <__mcmp>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	db24      	blt.n	8009aba <quorem+0xf2>
 8009a70:	3601      	adds	r6, #1
 8009a72:	4628      	mov	r0, r5
 8009a74:	f04f 0c00 	mov.w	ip, #0
 8009a78:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8009a80:	b293      	uxth	r3, r2
 8009a82:	ebac 0303 	sub.w	r3, ip, r3
 8009a86:	0c12      	lsrs	r2, r2, #16
 8009a88:	fa13 f38e 	uxtah	r3, r3, lr
 8009a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a9a:	45c1      	cmp	r9, r8
 8009a9c:	f840 3b04 	str.w	r3, [r0], #4
 8009aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009aa4:	d2e8      	bcs.n	8009a78 <quorem+0xb0>
 8009aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aae:	b922      	cbnz	r2, 8009aba <quorem+0xf2>
 8009ab0:	3b04      	subs	r3, #4
 8009ab2:	429d      	cmp	r5, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	d30a      	bcc.n	8009ace <quorem+0x106>
 8009ab8:	613c      	str	r4, [r7, #16]
 8009aba:	4630      	mov	r0, r6
 8009abc:	b003      	add	sp, #12
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	3b04      	subs	r3, #4
 8009ac6:	2a00      	cmp	r2, #0
 8009ac8:	d1cc      	bne.n	8009a64 <quorem+0x9c>
 8009aca:	3c01      	subs	r4, #1
 8009acc:	e7c7      	b.n	8009a5e <quorem+0x96>
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	3b04      	subs	r3, #4
 8009ad2:	2a00      	cmp	r2, #0
 8009ad4:	d1f0      	bne.n	8009ab8 <quorem+0xf0>
 8009ad6:	3c01      	subs	r4, #1
 8009ad8:	e7eb      	b.n	8009ab2 <quorem+0xea>
 8009ada:	2000      	movs	r0, #0
 8009adc:	e7ee      	b.n	8009abc <quorem+0xf4>
	...

08009ae0 <_dtoa_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b02 	vpush	{d8}
 8009ae8:	ec57 6b10 	vmov	r6, r7, d0
 8009aec:	b095      	sub	sp, #84	; 0x54
 8009aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009afa:	4604      	mov	r4, r0
 8009afc:	9209      	str	r2, [sp, #36]	; 0x24
 8009afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b00:	b975      	cbnz	r5, 8009b20 <_dtoa_r+0x40>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f000 ff14 	bl	800a930 <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b0c:	b920      	cbnz	r0, 8009b18 <_dtoa_r+0x38>
 8009b0e:	4bb2      	ldr	r3, [pc, #712]	; (8009dd8 <_dtoa_r+0x2f8>)
 8009b10:	21ea      	movs	r1, #234	; 0xea
 8009b12:	48b2      	ldr	r0, [pc, #712]	; (8009ddc <_dtoa_r+0x2fc>)
 8009b14:	f7fe fdc2 	bl	800869c <__assert_func>
 8009b18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b1c:	6005      	str	r5, [r0, #0]
 8009b1e:	60c5      	str	r5, [r0, #12]
 8009b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	b151      	cbz	r1, 8009b3c <_dtoa_r+0x5c>
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	604a      	str	r2, [r1, #4]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4093      	lsls	r3, r2
 8009b2e:	608b      	str	r3, [r1, #8]
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 ff51 	bl	800a9d8 <_Bfree>
 8009b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	1e3b      	subs	r3, r7, #0
 8009b3e:	bfb9      	ittee	lt
 8009b40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b44:	9303      	strlt	r3, [sp, #12]
 8009b46:	2300      	movge	r3, #0
 8009b48:	f8c8 3000 	strge.w	r3, [r8]
 8009b4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009b50:	4ba3      	ldr	r3, [pc, #652]	; (8009de0 <_dtoa_r+0x300>)
 8009b52:	bfbc      	itt	lt
 8009b54:	2201      	movlt	r2, #1
 8009b56:	f8c8 2000 	strlt.w	r2, [r8]
 8009b5a:	ea33 0309 	bics.w	r3, r3, r9
 8009b5e:	d11b      	bne.n	8009b98 <_dtoa_r+0xb8>
 8009b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b6c:	4333      	orrs	r3, r6
 8009b6e:	f000 857a 	beq.w	800a666 <_dtoa_r+0xb86>
 8009b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b74:	b963      	cbnz	r3, 8009b90 <_dtoa_r+0xb0>
 8009b76:	4b9b      	ldr	r3, [pc, #620]	; (8009de4 <_dtoa_r+0x304>)
 8009b78:	e024      	b.n	8009bc4 <_dtoa_r+0xe4>
 8009b7a:	4b9b      	ldr	r3, [pc, #620]	; (8009de8 <_dtoa_r+0x308>)
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	9800      	ldr	r0, [sp, #0]
 8009b86:	b015      	add	sp, #84	; 0x54
 8009b88:	ecbd 8b02 	vpop	{d8}
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	4b94      	ldr	r3, [pc, #592]	; (8009de4 <_dtoa_r+0x304>)
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	3303      	adds	r3, #3
 8009b96:	e7f3      	b.n	8009b80 <_dtoa_r+0xa0>
 8009b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	ec51 0b17 	vmov	r0, r1, d7
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ba8:	f7f6 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bac:	4680      	mov	r8, r0
 8009bae:	b158      	cbz	r0, 8009bc8 <_dtoa_r+0xe8>
 8009bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8551 	beq.w	800a660 <_dtoa_r+0xb80>
 8009bbe:	488b      	ldr	r0, [pc, #556]	; (8009dec <_dtoa_r+0x30c>)
 8009bc0:	6018      	str	r0, [r3, #0]
 8009bc2:	1e43      	subs	r3, r0, #1
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	e7dd      	b.n	8009b84 <_dtoa_r+0xa4>
 8009bc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009bcc:	aa12      	add	r2, sp, #72	; 0x48
 8009bce:	a913      	add	r1, sp, #76	; 0x4c
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f001 f9e3 	bl	800af9c <__d2b>
 8009bd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bda:	4683      	mov	fp, r0
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	d07c      	beq.n	8009cda <_dtoa_r+0x1fa>
 8009be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009bee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009bf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009bf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009bfa:	4b7d      	ldr	r3, [pc, #500]	; (8009df0 <_dtoa_r+0x310>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 fb41 	bl	8000288 <__aeabi_dsub>
 8009c06:	a36e      	add	r3, pc, #440	; (adr r3, 8009dc0 <_dtoa_r+0x2e0>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	a36d      	add	r3, pc, #436	; (adr r3, 8009dc8 <_dtoa_r+0x2e8>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 fb39 	bl	800028c <__adddf3>
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	460f      	mov	r7, r1
 8009c20:	f7f6 fc80 	bl	8000524 <__aeabi_i2d>
 8009c24:	a36a      	add	r3, pc, #424	; (adr r3, 8009dd0 <_dtoa_r+0x2f0>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f7f6 fce5 	bl	80005f8 <__aeabi_dmul>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fb29 	bl	800028c <__adddf3>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	f7f6 ff8b 	bl	8000b58 <__aeabi_d2iz>
 8009c42:	2200      	movs	r2, #0
 8009c44:	4682      	mov	sl, r0
 8009c46:	2300      	movs	r3, #0
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 ff46 	bl	8000adc <__aeabi_dcmplt>
 8009c50:	b148      	cbz	r0, 8009c66 <_dtoa_r+0x186>
 8009c52:	4650      	mov	r0, sl
 8009c54:	f7f6 fc66 	bl	8000524 <__aeabi_i2d>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c60:	b908      	cbnz	r0, 8009c66 <_dtoa_r+0x186>
 8009c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c66:	f1ba 0f16 	cmp.w	sl, #22
 8009c6a:	d854      	bhi.n	8009d16 <_dtoa_r+0x236>
 8009c6c:	4b61      	ldr	r3, [pc, #388]	; (8009df4 <_dtoa_r+0x314>)
 8009c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c7a:	f7f6 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d04b      	beq.n	8009d1a <_dtoa_r+0x23a>
 8009c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c86:	2300      	movs	r3, #0
 8009c88:	930e      	str	r3, [sp, #56]	; 0x38
 8009c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c8c:	1b5d      	subs	r5, r3, r5
 8009c8e:	1e6b      	subs	r3, r5, #1
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	bf43      	ittte	mi
 8009c94:	2300      	movmi	r3, #0
 8009c96:	f1c5 0801 	rsbmi	r8, r5, #1
 8009c9a:	9304      	strmi	r3, [sp, #16]
 8009c9c:	f04f 0800 	movpl.w	r8, #0
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	db3b      	blt.n	8009d1e <_dtoa_r+0x23e>
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009cac:	4453      	add	r3, sl
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9306      	str	r3, [sp, #24]
 8009cb4:	9b05      	ldr	r3, [sp, #20]
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d869      	bhi.n	8009d8e <_dtoa_r+0x2ae>
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	bfc4      	itt	gt
 8009cbe:	3b04      	subgt	r3, #4
 8009cc0:	9305      	strgt	r3, [sp, #20]
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8009cc8:	bfcc      	ite	gt
 8009cca:	2500      	movgt	r5, #0
 8009ccc:	2501      	movle	r5, #1
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d869      	bhi.n	8009da6 <_dtoa_r+0x2c6>
 8009cd2:	e8df f003 	tbb	[pc, r3]
 8009cd6:	4e2c      	.short	0x4e2c
 8009cd8:	5a4c      	.short	0x5a4c
 8009cda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009cde:	441d      	add	r5, r3
 8009ce0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	bfc1      	itttt	gt
 8009ce8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009cf0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009cf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009cf8:	bfda      	itte	le
 8009cfa:	f1c3 0320 	rsble	r3, r3, #32
 8009cfe:	fa06 f003 	lslle.w	r0, r6, r3
 8009d02:	4318      	orrgt	r0, r3
 8009d04:	f7f6 fbfe 	bl	8000504 <__aeabi_ui2d>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d10:	3d01      	subs	r5, #1
 8009d12:	9310      	str	r3, [sp, #64]	; 0x40
 8009d14:	e771      	b.n	8009bfa <_dtoa_r+0x11a>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e7b6      	b.n	8009c88 <_dtoa_r+0x1a8>
 8009d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d1c:	e7b5      	b.n	8009c8a <_dtoa_r+0x1aa>
 8009d1e:	f1ca 0300 	rsb	r3, sl, #0
 8009d22:	9306      	str	r3, [sp, #24]
 8009d24:	2300      	movs	r3, #0
 8009d26:	eba8 080a 	sub.w	r8, r8, sl
 8009d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d2c:	e7c2      	b.n	8009cb4 <_dtoa_r+0x1d4>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	9308      	str	r3, [sp, #32]
 8009d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc39      	bgt.n	8009dac <_dtoa_r+0x2cc>
 8009d38:	f04f 0901 	mov.w	r9, #1
 8009d3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d40:	464b      	mov	r3, r9
 8009d42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d48:	2200      	movs	r2, #0
 8009d4a:	6042      	str	r2, [r0, #4]
 8009d4c:	2204      	movs	r2, #4
 8009d4e:	f102 0614 	add.w	r6, r2, #20
 8009d52:	429e      	cmp	r6, r3
 8009d54:	6841      	ldr	r1, [r0, #4]
 8009d56:	d92f      	bls.n	8009db8 <_dtoa_r+0x2d8>
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fdfd 	bl	800a958 <_Balloc>
 8009d5e:	9000      	str	r0, [sp, #0]
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d14b      	bne.n	8009dfc <_dtoa_r+0x31c>
 8009d64:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <_dtoa_r+0x318>)
 8009d66:	4602      	mov	r2, r0
 8009d68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d6c:	e6d1      	b.n	8009b12 <_dtoa_r+0x32>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e7de      	b.n	8009d30 <_dtoa_r+0x250>
 8009d72:	2300      	movs	r3, #0
 8009d74:	9308      	str	r3, [sp, #32]
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	eb0a 0903 	add.w	r9, sl, r3
 8009d7c:	f109 0301 	add.w	r3, r9, #1
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	bfb8      	it	lt
 8009d86:	2301      	movlt	r3, #1
 8009d88:	e7dd      	b.n	8009d46 <_dtoa_r+0x266>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7f2      	b.n	8009d74 <_dtoa_r+0x294>
 8009d8e:	2501      	movs	r5, #1
 8009d90:	2300      	movs	r3, #0
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	9508      	str	r5, [sp, #32]
 8009d96:	f04f 39ff 	mov.w	r9, #4294967295
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009da0:	2312      	movs	r3, #18
 8009da2:	9209      	str	r2, [sp, #36]	; 0x24
 8009da4:	e7cf      	b.n	8009d46 <_dtoa_r+0x266>
 8009da6:	2301      	movs	r3, #1
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	e7f4      	b.n	8009d96 <_dtoa_r+0x2b6>
 8009dac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009db0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009db4:	464b      	mov	r3, r9
 8009db6:	e7c6      	b.n	8009d46 <_dtoa_r+0x266>
 8009db8:	3101      	adds	r1, #1
 8009dba:	6041      	str	r1, [r0, #4]
 8009dbc:	0052      	lsls	r2, r2, #1
 8009dbe:	e7c6      	b.n	8009d4e <_dtoa_r+0x26e>
 8009dc0:	636f4361 	.word	0x636f4361
 8009dc4:	3fd287a7 	.word	0x3fd287a7
 8009dc8:	8b60c8b3 	.word	0x8b60c8b3
 8009dcc:	3fc68a28 	.word	0x3fc68a28
 8009dd0:	509f79fb 	.word	0x509f79fb
 8009dd4:	3fd34413 	.word	0x3fd34413
 8009dd8:	0800c556 	.word	0x0800c556
 8009ddc:	0800c56d 	.word	0x0800c56d
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	0800c552 	.word	0x0800c552
 8009de8:	0800c549 	.word	0x0800c549
 8009dec:	0800c526 	.word	0x0800c526
 8009df0:	3ff80000 	.word	0x3ff80000
 8009df4:	0800c668 	.word	0x0800c668
 8009df8:	0800c5cc 	.word	0x0800c5cc
 8009dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dfe:	9a00      	ldr	r2, [sp, #0]
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	2b0e      	cmp	r3, #14
 8009e06:	f200 80ad 	bhi.w	8009f64 <_dtoa_r+0x484>
 8009e0a:	2d00      	cmp	r5, #0
 8009e0c:	f000 80aa 	beq.w	8009f64 <_dtoa_r+0x484>
 8009e10:	f1ba 0f00 	cmp.w	sl, #0
 8009e14:	dd36      	ble.n	8009e84 <_dtoa_r+0x3a4>
 8009e16:	4ac3      	ldr	r2, [pc, #780]	; (800a124 <_dtoa_r+0x644>)
 8009e18:	f00a 030f 	and.w	r3, sl, #15
 8009e1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e20:	ed93 7b00 	vldr	d7, [r3]
 8009e24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009e28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009e30:	eef0 8a67 	vmov.f32	s17, s15
 8009e34:	d016      	beq.n	8009e64 <_dtoa_r+0x384>
 8009e36:	4bbc      	ldr	r3, [pc, #752]	; (800a128 <_dtoa_r+0x648>)
 8009e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e40:	f7f6 fd04 	bl	800084c <__aeabi_ddiv>
 8009e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e48:	f007 070f 	and.w	r7, r7, #15
 8009e4c:	2503      	movs	r5, #3
 8009e4e:	4eb6      	ldr	r6, [pc, #728]	; (800a128 <_dtoa_r+0x648>)
 8009e50:	b957      	cbnz	r7, 8009e68 <_dtoa_r+0x388>
 8009e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e56:	ec53 2b18 	vmov	r2, r3, d8
 8009e5a:	f7f6 fcf7 	bl	800084c <__aeabi_ddiv>
 8009e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e62:	e029      	b.n	8009eb8 <_dtoa_r+0x3d8>
 8009e64:	2502      	movs	r5, #2
 8009e66:	e7f2      	b.n	8009e4e <_dtoa_r+0x36e>
 8009e68:	07f9      	lsls	r1, r7, #31
 8009e6a:	d508      	bpl.n	8009e7e <_dtoa_r+0x39e>
 8009e6c:	ec51 0b18 	vmov	r0, r1, d8
 8009e70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	ec41 0b18 	vmov	d8, r0, r1
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	107f      	asrs	r7, r7, #1
 8009e80:	3608      	adds	r6, #8
 8009e82:	e7e5      	b.n	8009e50 <_dtoa_r+0x370>
 8009e84:	f000 80a6 	beq.w	8009fd4 <_dtoa_r+0x4f4>
 8009e88:	f1ca 0600 	rsb	r6, sl, #0
 8009e8c:	4ba5      	ldr	r3, [pc, #660]	; (800a124 <_dtoa_r+0x644>)
 8009e8e:	4fa6      	ldr	r7, [pc, #664]	; (800a128 <_dtoa_r+0x648>)
 8009e90:	f006 020f 	and.w	r2, r6, #15
 8009e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	1136      	asrs	r6, r6, #4
 8009eaa:	2300      	movs	r3, #0
 8009eac:	2502      	movs	r5, #2
 8009eae:	2e00      	cmp	r6, #0
 8009eb0:	f040 8085 	bne.w	8009fbe <_dtoa_r+0x4de>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1d2      	bne.n	8009e5e <_dtoa_r+0x37e>
 8009eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 808c 	beq.w	8009fd8 <_dtoa_r+0x4f8>
 8009ec0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ec4:	4b99      	ldr	r3, [pc, #612]	; (800a12c <_dtoa_r+0x64c>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fe06 	bl	8000adc <__aeabi_dcmplt>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f000 8081 	beq.w	8009fd8 <_dtoa_r+0x4f8>
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d07d      	beq.n	8009fd8 <_dtoa_r+0x4f8>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	dd3c      	ble.n	8009f5c <_dtoa_r+0x47c>
 8009ee2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4b91      	ldr	r3, [pc, #580]	; (800a130 <_dtoa_r+0x650>)
 8009eec:	4630      	mov	r0, r6
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef8:	3501      	adds	r5, #1
 8009efa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009efe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7f6 fb0e 	bl	8000524 <__aeabi_i2d>
 8009f08:	4632      	mov	r2, r6
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4b88      	ldr	r3, [pc, #544]	; (800a134 <_dtoa_r+0x654>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	f7f6 f9ba 	bl	800028c <__adddf3>
 8009f18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d15c      	bne.n	8009fe2 <_dtoa_r+0x502>
 8009f28:	4b83      	ldr	r3, [pc, #524]	; (800a138 <_dtoa_r+0x658>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	f7f6 f9aa 	bl	8000288 <__aeabi_dsub>
 8009f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f38:	4606      	mov	r6, r0
 8009f3a:	460f      	mov	r7, r1
 8009f3c:	f7f6 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 8296 	bne.w	800a472 <_dtoa_r+0x992>
 8009f46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f50:	4639      	mov	r1, r7
 8009f52:	f7f6 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f040 8288 	bne.w	800a46c <_dtoa_r+0x98c>
 8009f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f2c0 8158 	blt.w	800a21c <_dtoa_r+0x73c>
 8009f6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009f70:	f300 8154 	bgt.w	800a21c <_dtoa_r+0x73c>
 8009f74:	4b6b      	ldr	r3, [pc, #428]	; (800a124 <_dtoa_r+0x644>)
 8009f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f280 80e3 	bge.w	800a14c <_dtoa_r+0x66c>
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f300 80df 	bgt.w	800a14c <_dtoa_r+0x66c>
 8009f8e:	f040 826d 	bne.w	800a46c <_dtoa_r+0x98c>
 8009f92:	4b69      	ldr	r3, [pc, #420]	; (800a138 <_dtoa_r+0x658>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fa2:	f7f6 fdaf 	bl	8000b04 <__aeabi_dcmpge>
 8009fa6:	9e01      	ldr	r6, [sp, #4]
 8009fa8:	4637      	mov	r7, r6
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f040 8243 	bne.w	800a436 <_dtoa_r+0x956>
 8009fb0:	9d00      	ldr	r5, [sp, #0]
 8009fb2:	2331      	movs	r3, #49	; 0x31
 8009fb4:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	e23f      	b.n	800a43e <_dtoa_r+0x95e>
 8009fbe:	07f2      	lsls	r2, r6, #31
 8009fc0:	d505      	bpl.n	8009fce <_dtoa_r+0x4ee>
 8009fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	3501      	adds	r5, #1
 8009fcc:	2301      	movs	r3, #1
 8009fce:	1076      	asrs	r6, r6, #1
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	e76c      	b.n	8009eae <_dtoa_r+0x3ce>
 8009fd4:	2502      	movs	r5, #2
 8009fd6:	e76f      	b.n	8009eb8 <_dtoa_r+0x3d8>
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	f8cd a01c 	str.w	sl, [sp, #28]
 8009fde:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe0:	e78d      	b.n	8009efe <_dtoa_r+0x41e>
 8009fe2:	9900      	ldr	r1, [sp, #0]
 8009fe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fe8:	4b4e      	ldr	r3, [pc, #312]	; (800a124 <_dtoa_r+0x644>)
 8009fea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fee:	4401      	add	r1, r0
 8009ff0:	9102      	str	r1, [sp, #8]
 8009ff2:	9908      	ldr	r1, [sp, #32]
 8009ff4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ff8:	eef0 8a67 	vmov.f32	s17, s15
 8009ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a000:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a004:	2900      	cmp	r1, #0
 800a006:	d045      	beq.n	800a094 <_dtoa_r+0x5b4>
 800a008:	494c      	ldr	r1, [pc, #304]	; (800a13c <_dtoa_r+0x65c>)
 800a00a:	2000      	movs	r0, #0
 800a00c:	f7f6 fc1e 	bl	800084c <__aeabi_ddiv>
 800a010:	ec53 2b18 	vmov	r2, r3, d8
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	9d00      	ldr	r5, [sp, #0]
 800a01a:	ec41 0b18 	vmov	d8, r0, r1
 800a01e:	4639      	mov	r1, r7
 800a020:	4630      	mov	r0, r6
 800a022:	f7f6 fd99 	bl	8000b58 <__aeabi_d2iz>
 800a026:	900c      	str	r0, [sp, #48]	; 0x30
 800a028:	f7f6 fa7c 	bl	8000524 <__aeabi_i2d>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a03a:	3330      	adds	r3, #48	; 0x30
 800a03c:	f805 3b01 	strb.w	r3, [r5], #1
 800a040:	ec53 2b18 	vmov	r2, r3, d8
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	f7f6 fd48 	bl	8000adc <__aeabi_dcmplt>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d165      	bne.n	800a11c <_dtoa_r+0x63c>
 800a050:	4632      	mov	r2, r6
 800a052:	463b      	mov	r3, r7
 800a054:	4935      	ldr	r1, [pc, #212]	; (800a12c <_dtoa_r+0x64c>)
 800a056:	2000      	movs	r0, #0
 800a058:	f7f6 f916 	bl	8000288 <__aeabi_dsub>
 800a05c:	ec53 2b18 	vmov	r2, r3, d8
 800a060:	f7f6 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	f040 80b9 	bne.w	800a1dc <_dtoa_r+0x6fc>
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	429d      	cmp	r5, r3
 800a06e:	f43f af75 	beq.w	8009f5c <_dtoa_r+0x47c>
 800a072:	4b2f      	ldr	r3, [pc, #188]	; (800a130 <_dtoa_r+0x650>)
 800a074:	ec51 0b18 	vmov	r0, r1, d8
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	4b2c      	ldr	r3, [pc, #176]	; (800a130 <_dtoa_r+0x650>)
 800a080:	ec41 0b18 	vmov	d8, r0, r1
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	4606      	mov	r6, r0
 800a090:	460f      	mov	r7, r1
 800a092:	e7c4      	b.n	800a01e <_dtoa_r+0x53e>
 800a094:	ec51 0b17 	vmov	r0, r1, d7
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	9b02      	ldr	r3, [sp, #8]
 800a09e:	9d00      	ldr	r5, [sp, #0]
 800a0a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0a2:	ec41 0b18 	vmov	d8, r0, r1
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f7f6 fd55 	bl	8000b58 <__aeabi_d2iz>
 800a0ae:	9011      	str	r0, [sp, #68]	; 0x44
 800a0b0:	f7f6 fa38 	bl	8000524 <__aeabi_i2d>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 f8e4 	bl	8000288 <__aeabi_dsub>
 800a0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c2:	3330      	adds	r3, #48	; 0x30
 800a0c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a0c8:	9b02      	ldr	r3, [sp, #8]
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	d134      	bne.n	800a140 <_dtoa_r+0x660>
 800a0d6:	4b19      	ldr	r3, [pc, #100]	; (800a13c <_dtoa_r+0x65c>)
 800a0d8:	ec51 0b18 	vmov	r0, r1, d8
 800a0dc:	f7f6 f8d6 	bl	800028c <__adddf3>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d175      	bne.n	800a1dc <_dtoa_r+0x6fc>
 800a0f0:	ec53 2b18 	vmov	r2, r3, d8
 800a0f4:	4911      	ldr	r1, [pc, #68]	; (800a13c <_dtoa_r+0x65c>)
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	f7f6 f8c6 	bl	8000288 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 fcea 	bl	8000adc <__aeabi_dcmplt>
 800a108:	2800      	cmp	r0, #0
 800a10a:	f43f af27 	beq.w	8009f5c <_dtoa_r+0x47c>
 800a10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a110:	1e6b      	subs	r3, r5, #1
 800a112:	930c      	str	r3, [sp, #48]	; 0x30
 800a114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a118:	2b30      	cmp	r3, #48	; 0x30
 800a11a:	d0f8      	beq.n	800a10e <_dtoa_r+0x62e>
 800a11c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a120:	e04a      	b.n	800a1b8 <_dtoa_r+0x6d8>
 800a122:	bf00      	nop
 800a124:	0800c668 	.word	0x0800c668
 800a128:	0800c640 	.word	0x0800c640
 800a12c:	3ff00000 	.word	0x3ff00000
 800a130:	40240000 	.word	0x40240000
 800a134:	401c0000 	.word	0x401c0000
 800a138:	40140000 	.word	0x40140000
 800a13c:	3fe00000 	.word	0x3fe00000
 800a140:	4baf      	ldr	r3, [pc, #700]	; (800a400 <_dtoa_r+0x920>)
 800a142:	f7f6 fa59 	bl	80005f8 <__aeabi_dmul>
 800a146:	4606      	mov	r6, r0
 800a148:	460f      	mov	r7, r1
 800a14a:	e7ac      	b.n	800a0a6 <_dtoa_r+0x5c6>
 800a14c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a150:	9d00      	ldr	r5, [sp, #0]
 800a152:	4642      	mov	r2, r8
 800a154:	464b      	mov	r3, r9
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 fb77 	bl	800084c <__aeabi_ddiv>
 800a15e:	f7f6 fcfb 	bl	8000b58 <__aeabi_d2iz>
 800a162:	9002      	str	r0, [sp, #8]
 800a164:	f7f6 f9de 	bl	8000524 <__aeabi_i2d>
 800a168:	4642      	mov	r2, r8
 800a16a:	464b      	mov	r3, r9
 800a16c:	f7f6 fa44 	bl	80005f8 <__aeabi_dmul>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4630      	mov	r0, r6
 800a176:	4639      	mov	r1, r7
 800a178:	f7f6 f886 	bl	8000288 <__aeabi_dsub>
 800a17c:	9e02      	ldr	r6, [sp, #8]
 800a17e:	9f01      	ldr	r7, [sp, #4]
 800a180:	3630      	adds	r6, #48	; 0x30
 800a182:	f805 6b01 	strb.w	r6, [r5], #1
 800a186:	9e00      	ldr	r6, [sp, #0]
 800a188:	1bae      	subs	r6, r5, r6
 800a18a:	42b7      	cmp	r7, r6
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	d137      	bne.n	800a202 <_dtoa_r+0x722>
 800a192:	f7f6 f87b 	bl	800028c <__adddf3>
 800a196:	4642      	mov	r2, r8
 800a198:	464b      	mov	r3, r9
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	f7f6 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a2:	b9c8      	cbnz	r0, 800a1d8 <_dtoa_r+0x6f8>
 800a1a4:	4642      	mov	r2, r8
 800a1a6:	464b      	mov	r3, r9
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b0:	b110      	cbz	r0, 800a1b8 <_dtoa_r+0x6d8>
 800a1b2:	9b02      	ldr	r3, [sp, #8]
 800a1b4:	07d9      	lsls	r1, r3, #31
 800a1b6:	d40f      	bmi.n	800a1d8 <_dtoa_r+0x6f8>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	f000 fc0c 	bl	800a9d8 <_Bfree>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	702b      	strb	r3, [r5, #0]
 800a1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1c6:	f10a 0001 	add.w	r0, sl, #1
 800a1ca:	6018      	str	r0, [r3, #0]
 800a1cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f43f acd8 	beq.w	8009b84 <_dtoa_r+0xa4>
 800a1d4:	601d      	str	r5, [r3, #0]
 800a1d6:	e4d5      	b.n	8009b84 <_dtoa_r+0xa4>
 800a1d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a1dc:	462b      	mov	r3, r5
 800a1de:	461d      	mov	r5, r3
 800a1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1e4:	2a39      	cmp	r2, #57	; 0x39
 800a1e6:	d108      	bne.n	800a1fa <_dtoa_r+0x71a>
 800a1e8:	9a00      	ldr	r2, [sp, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d1f7      	bne.n	800a1de <_dtoa_r+0x6fe>
 800a1ee:	9a07      	ldr	r2, [sp, #28]
 800a1f0:	9900      	ldr	r1, [sp, #0]
 800a1f2:	3201      	adds	r2, #1
 800a1f4:	9207      	str	r2, [sp, #28]
 800a1f6:	2230      	movs	r2, #48	; 0x30
 800a1f8:	700a      	strb	r2, [r1, #0]
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	3201      	adds	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	e78c      	b.n	800a11c <_dtoa_r+0x63c>
 800a202:	4b7f      	ldr	r3, [pc, #508]	; (800a400 <_dtoa_r+0x920>)
 800a204:	2200      	movs	r2, #0
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	2200      	movs	r2, #0
 800a20c:	2300      	movs	r3, #0
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	f7f6 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a216:	2800      	cmp	r0, #0
 800a218:	d09b      	beq.n	800a152 <_dtoa_r+0x672>
 800a21a:	e7cd      	b.n	800a1b8 <_dtoa_r+0x6d8>
 800a21c:	9a08      	ldr	r2, [sp, #32]
 800a21e:	2a00      	cmp	r2, #0
 800a220:	f000 80c4 	beq.w	800a3ac <_dtoa_r+0x8cc>
 800a224:	9a05      	ldr	r2, [sp, #20]
 800a226:	2a01      	cmp	r2, #1
 800a228:	f300 80a8 	bgt.w	800a37c <_dtoa_r+0x89c>
 800a22c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a22e:	2a00      	cmp	r2, #0
 800a230:	f000 80a0 	beq.w	800a374 <_dtoa_r+0x894>
 800a234:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a238:	9e06      	ldr	r6, [sp, #24]
 800a23a:	4645      	mov	r5, r8
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	2101      	movs	r1, #1
 800a240:	441a      	add	r2, r3
 800a242:	4620      	mov	r0, r4
 800a244:	4498      	add	r8, r3
 800a246:	9204      	str	r2, [sp, #16]
 800a248:	f000 fc82 	bl	800ab50 <__i2b>
 800a24c:	4607      	mov	r7, r0
 800a24e:	2d00      	cmp	r5, #0
 800a250:	dd0b      	ble.n	800a26a <_dtoa_r+0x78a>
 800a252:	9b04      	ldr	r3, [sp, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	dd08      	ble.n	800a26a <_dtoa_r+0x78a>
 800a258:	42ab      	cmp	r3, r5
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	bfa8      	it	ge
 800a25e:	462b      	movge	r3, r5
 800a260:	eba8 0803 	sub.w	r8, r8, r3
 800a264:	1aed      	subs	r5, r5, r3
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	9b06      	ldr	r3, [sp, #24]
 800a26c:	b1fb      	cbz	r3, 800a2ae <_dtoa_r+0x7ce>
 800a26e:	9b08      	ldr	r3, [sp, #32]
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 809f 	beq.w	800a3b4 <_dtoa_r+0x8d4>
 800a276:	2e00      	cmp	r6, #0
 800a278:	dd11      	ble.n	800a29e <_dtoa_r+0x7be>
 800a27a:	4639      	mov	r1, r7
 800a27c:	4632      	mov	r2, r6
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fd22 	bl	800acc8 <__pow5mult>
 800a284:	465a      	mov	r2, fp
 800a286:	4601      	mov	r1, r0
 800a288:	4607      	mov	r7, r0
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 fc76 	bl	800ab7c <__multiply>
 800a290:	4659      	mov	r1, fp
 800a292:	9007      	str	r0, [sp, #28]
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fb9f 	bl	800a9d8 <_Bfree>
 800a29a:	9b07      	ldr	r3, [sp, #28]
 800a29c:	469b      	mov	fp, r3
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	1b9a      	subs	r2, r3, r6
 800a2a2:	d004      	beq.n	800a2ae <_dtoa_r+0x7ce>
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fd0e 	bl	800acc8 <__pow5mult>
 800a2ac:	4683      	mov	fp, r0
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fc4d 	bl	800ab50 <__i2b>
 800a2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	dd7c      	ble.n	800a3b8 <_dtoa_r+0x8d8>
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 fd00 	bl	800acc8 <__pow5mult>
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	dd76      	ble.n	800a3be <_dtoa_r+0x8de>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9306      	str	r3, [sp, #24]
 800a2d4:	6933      	ldr	r3, [r6, #16]
 800a2d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2da:	6918      	ldr	r0, [r3, #16]
 800a2dc:	f000 fbe8 	bl	800aab0 <__hi0bits>
 800a2e0:	f1c0 0020 	rsb	r0, r0, #32
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	4418      	add	r0, r3
 800a2e8:	f010 001f 	ands.w	r0, r0, #31
 800a2ec:	f000 8086 	beq.w	800a3fc <_dtoa_r+0x91c>
 800a2f0:	f1c0 0320 	rsb	r3, r0, #32
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	dd7f      	ble.n	800a3f8 <_dtoa_r+0x918>
 800a2f8:	f1c0 001c 	rsb	r0, r0, #28
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	4403      	add	r3, r0
 800a300:	4480      	add	r8, r0
 800a302:	4405      	add	r5, r0
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f1b8 0f00 	cmp.w	r8, #0
 800a30a:	dd05      	ble.n	800a318 <_dtoa_r+0x838>
 800a30c:	4659      	mov	r1, fp
 800a30e:	4642      	mov	r2, r8
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fd33 	bl	800ad7c <__lshift>
 800a316:	4683      	mov	fp, r0
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dd05      	ble.n	800a32a <_dtoa_r+0x84a>
 800a31e:	4631      	mov	r1, r6
 800a320:	461a      	mov	r2, r3
 800a322:	4620      	mov	r0, r4
 800a324:	f000 fd2a 	bl	800ad7c <__lshift>
 800a328:	4606      	mov	r6, r0
 800a32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d069      	beq.n	800a404 <_dtoa_r+0x924>
 800a330:	4631      	mov	r1, r6
 800a332:	4658      	mov	r0, fp
 800a334:	f000 fd8e 	bl	800ae54 <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	da63      	bge.n	800a404 <_dtoa_r+0x924>
 800a33c:	2300      	movs	r3, #0
 800a33e:	4659      	mov	r1, fp
 800a340:	220a      	movs	r2, #10
 800a342:	4620      	mov	r0, r4
 800a344:	f000 fb6a 	bl	800aa1c <__multadd>
 800a348:	9b08      	ldr	r3, [sp, #32]
 800a34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a34e:	4683      	mov	fp, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 818f 	beq.w	800a674 <_dtoa_r+0xb94>
 800a356:	4639      	mov	r1, r7
 800a358:	2300      	movs	r3, #0
 800a35a:	220a      	movs	r2, #10
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fb5d 	bl	800aa1c <__multadd>
 800a362:	f1b9 0f00 	cmp.w	r9, #0
 800a366:	4607      	mov	r7, r0
 800a368:	f300 808e 	bgt.w	800a488 <_dtoa_r+0x9a8>
 800a36c:	9b05      	ldr	r3, [sp, #20]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	dc50      	bgt.n	800a414 <_dtoa_r+0x934>
 800a372:	e089      	b.n	800a488 <_dtoa_r+0x9a8>
 800a374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a37a:	e75d      	b.n	800a238 <_dtoa_r+0x758>
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	1e5e      	subs	r6, r3, #1
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	42b3      	cmp	r3, r6
 800a384:	bfbf      	itttt	lt
 800a386:	9b06      	ldrlt	r3, [sp, #24]
 800a388:	9606      	strlt	r6, [sp, #24]
 800a38a:	1af2      	sublt	r2, r6, r3
 800a38c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a38e:	bfb6      	itet	lt
 800a390:	189b      	addlt	r3, r3, r2
 800a392:	1b9e      	subge	r6, r3, r6
 800a394:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	bfb8      	it	lt
 800a39a:	2600      	movlt	r6, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfb5      	itete	lt
 800a3a0:	eba8 0503 	sublt.w	r5, r8, r3
 800a3a4:	9b01      	ldrge	r3, [sp, #4]
 800a3a6:	2300      	movlt	r3, #0
 800a3a8:	4645      	movge	r5, r8
 800a3aa:	e747      	b.n	800a23c <_dtoa_r+0x75c>
 800a3ac:	9e06      	ldr	r6, [sp, #24]
 800a3ae:	9f08      	ldr	r7, [sp, #32]
 800a3b0:	4645      	mov	r5, r8
 800a3b2:	e74c      	b.n	800a24e <_dtoa_r+0x76e>
 800a3b4:	9a06      	ldr	r2, [sp, #24]
 800a3b6:	e775      	b.n	800a2a4 <_dtoa_r+0x7c4>
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	dc18      	bgt.n	800a3f0 <_dtoa_r+0x910>
 800a3be:	9b02      	ldr	r3, [sp, #8]
 800a3c0:	b9b3      	cbnz	r3, 800a3f0 <_dtoa_r+0x910>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c8:	b9a3      	cbnz	r3, 800a3f4 <_dtoa_r+0x914>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3d0:	0d1b      	lsrs	r3, r3, #20
 800a3d2:	051b      	lsls	r3, r3, #20
 800a3d4:	b12b      	cbz	r3, 800a3e2 <_dtoa_r+0x902>
 800a3d6:	9b04      	ldr	r3, [sp, #16]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	f108 0801 	add.w	r8, r8, #1
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9306      	str	r3, [sp, #24]
 800a3e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f47f af74 	bne.w	800a2d4 <_dtoa_r+0x7f4>
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	e779      	b.n	800a2e4 <_dtoa_r+0x804>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e7f6      	b.n	800a3e2 <_dtoa_r+0x902>
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	e7f4      	b.n	800a3e2 <_dtoa_r+0x902>
 800a3f8:	d085      	beq.n	800a306 <_dtoa_r+0x826>
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	301c      	adds	r0, #28
 800a3fe:	e77d      	b.n	800a2fc <_dtoa_r+0x81c>
 800a400:	40240000 	.word	0x40240000
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dc38      	bgt.n	800a47c <_dtoa_r+0x99c>
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	dd35      	ble.n	800a47c <_dtoa_r+0x99c>
 800a410:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a414:	f1b9 0f00 	cmp.w	r9, #0
 800a418:	d10d      	bne.n	800a436 <_dtoa_r+0x956>
 800a41a:	4631      	mov	r1, r6
 800a41c:	464b      	mov	r3, r9
 800a41e:	2205      	movs	r2, #5
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fafb 	bl	800aa1c <__multadd>
 800a426:	4601      	mov	r1, r0
 800a428:	4606      	mov	r6, r0
 800a42a:	4658      	mov	r0, fp
 800a42c:	f000 fd12 	bl	800ae54 <__mcmp>
 800a430:	2800      	cmp	r0, #0
 800a432:	f73f adbd 	bgt.w	8009fb0 <_dtoa_r+0x4d0>
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	9d00      	ldr	r5, [sp, #0]
 800a43a:	ea6f 0a03 	mvn.w	sl, r3
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	4631      	mov	r1, r6
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fac7 	bl	800a9d8 <_Bfree>
 800a44a:	2f00      	cmp	r7, #0
 800a44c:	f43f aeb4 	beq.w	800a1b8 <_dtoa_r+0x6d8>
 800a450:	f1b8 0f00 	cmp.w	r8, #0
 800a454:	d005      	beq.n	800a462 <_dtoa_r+0x982>
 800a456:	45b8      	cmp	r8, r7
 800a458:	d003      	beq.n	800a462 <_dtoa_r+0x982>
 800a45a:	4641      	mov	r1, r8
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fabb 	bl	800a9d8 <_Bfree>
 800a462:	4639      	mov	r1, r7
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fab7 	bl	800a9d8 <_Bfree>
 800a46a:	e6a5      	b.n	800a1b8 <_dtoa_r+0x6d8>
 800a46c:	2600      	movs	r6, #0
 800a46e:	4637      	mov	r7, r6
 800a470:	e7e1      	b.n	800a436 <_dtoa_r+0x956>
 800a472:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a478:	4637      	mov	r7, r6
 800a47a:	e599      	b.n	8009fb0 <_dtoa_r+0x4d0>
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 80fd 	beq.w	800a682 <_dtoa_r+0xba2>
 800a488:	2d00      	cmp	r5, #0
 800a48a:	dd05      	ble.n	800a498 <_dtoa_r+0x9b8>
 800a48c:	4639      	mov	r1, r7
 800a48e:	462a      	mov	r2, r5
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fc73 	bl	800ad7c <__lshift>
 800a496:	4607      	mov	r7, r0
 800a498:	9b06      	ldr	r3, [sp, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d05c      	beq.n	800a558 <_dtoa_r+0xa78>
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fa59 	bl	800a958 <_Balloc>
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <_dtoa_r+0x9d6>
 800a4aa:	4b80      	ldr	r3, [pc, #512]	; (800a6ac <_dtoa_r+0xbcc>)
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4b2:	f7ff bb2e 	b.w	8009b12 <_dtoa_r+0x32>
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	0092      	lsls	r2, r2, #2
 800a4bc:	f107 010c 	add.w	r1, r7, #12
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f7fe fa3e 	bl	8008942 <memcpy>
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fc56 	bl	800ad7c <__lshift>
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	444b      	add	r3, r9
 800a4da:	9307      	str	r3, [sp, #28]
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	46b8      	mov	r8, r7
 800a4e4:	9306      	str	r3, [sp, #24]
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	f7ff fa69 	bl	80099c8 <quorem>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	3330      	adds	r3, #48	; 0x30
 800a4fa:	9004      	str	r0, [sp, #16]
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4658      	mov	r0, fp
 800a500:	9308      	str	r3, [sp, #32]
 800a502:	f000 fca7 	bl	800ae54 <__mcmp>
 800a506:	463a      	mov	r2, r7
 800a508:	4681      	mov	r9, r0
 800a50a:	4631      	mov	r1, r6
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fcbd 	bl	800ae8c <__mdiff>
 800a512:	68c2      	ldr	r2, [r0, #12]
 800a514:	9b08      	ldr	r3, [sp, #32]
 800a516:	4605      	mov	r5, r0
 800a518:	bb02      	cbnz	r2, 800a55c <_dtoa_r+0xa7c>
 800a51a:	4601      	mov	r1, r0
 800a51c:	4658      	mov	r0, fp
 800a51e:	f000 fc99 	bl	800ae54 <__mcmp>
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	4602      	mov	r2, r0
 800a526:	4629      	mov	r1, r5
 800a528:	4620      	mov	r0, r4
 800a52a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a52e:	f000 fa53 	bl	800a9d8 <_Bfree>
 800a532:	9b05      	ldr	r3, [sp, #20]
 800a534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a536:	9d01      	ldr	r5, [sp, #4]
 800a538:	ea43 0102 	orr.w	r1, r3, r2
 800a53c:	9b06      	ldr	r3, [sp, #24]
 800a53e:	430b      	orrs	r3, r1
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	d10d      	bne.n	800a560 <_dtoa_r+0xa80>
 800a544:	2b39      	cmp	r3, #57	; 0x39
 800a546:	d029      	beq.n	800a59c <_dtoa_r+0xabc>
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	dd01      	ble.n	800a552 <_dtoa_r+0xa72>
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	3331      	adds	r3, #49	; 0x31
 800a552:	9a02      	ldr	r2, [sp, #8]
 800a554:	7013      	strb	r3, [r2, #0]
 800a556:	e774      	b.n	800a442 <_dtoa_r+0x962>
 800a558:	4638      	mov	r0, r7
 800a55a:	e7b9      	b.n	800a4d0 <_dtoa_r+0x9f0>
 800a55c:	2201      	movs	r2, #1
 800a55e:	e7e2      	b.n	800a526 <_dtoa_r+0xa46>
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	db06      	blt.n	800a574 <_dtoa_r+0xa94>
 800a566:	9905      	ldr	r1, [sp, #20]
 800a568:	ea41 0909 	orr.w	r9, r1, r9
 800a56c:	9906      	ldr	r1, [sp, #24]
 800a56e:	ea59 0101 	orrs.w	r1, r9, r1
 800a572:	d120      	bne.n	800a5b6 <_dtoa_r+0xad6>
 800a574:	2a00      	cmp	r2, #0
 800a576:	ddec      	ble.n	800a552 <_dtoa_r+0xa72>
 800a578:	4659      	mov	r1, fp
 800a57a:	2201      	movs	r2, #1
 800a57c:	4620      	mov	r0, r4
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	f000 fbfc 	bl	800ad7c <__lshift>
 800a584:	4631      	mov	r1, r6
 800a586:	4683      	mov	fp, r0
 800a588:	f000 fc64 	bl	800ae54 <__mcmp>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	dc02      	bgt.n	800a598 <_dtoa_r+0xab8>
 800a592:	d1de      	bne.n	800a552 <_dtoa_r+0xa72>
 800a594:	07da      	lsls	r2, r3, #31
 800a596:	d5dc      	bpl.n	800a552 <_dtoa_r+0xa72>
 800a598:	2b39      	cmp	r3, #57	; 0x39
 800a59a:	d1d8      	bne.n	800a54e <_dtoa_r+0xa6e>
 800a59c:	9a02      	ldr	r2, [sp, #8]
 800a59e:	2339      	movs	r3, #57	; 0x39
 800a5a0:	7013      	strb	r3, [r2, #0]
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	461d      	mov	r5, r3
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5ac:	2a39      	cmp	r2, #57	; 0x39
 800a5ae:	d050      	beq.n	800a652 <_dtoa_r+0xb72>
 800a5b0:	3201      	adds	r2, #1
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	e745      	b.n	800a442 <_dtoa_r+0x962>
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	dd03      	ble.n	800a5c2 <_dtoa_r+0xae2>
 800a5ba:	2b39      	cmp	r3, #57	; 0x39
 800a5bc:	d0ee      	beq.n	800a59c <_dtoa_r+0xabc>
 800a5be:	3301      	adds	r3, #1
 800a5c0:	e7c7      	b.n	800a552 <_dtoa_r+0xa72>
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	9907      	ldr	r1, [sp, #28]
 800a5c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5ca:	428a      	cmp	r2, r1
 800a5cc:	d02a      	beq.n	800a624 <_dtoa_r+0xb44>
 800a5ce:	4659      	mov	r1, fp
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fa21 	bl	800aa1c <__multadd>
 800a5da:	45b8      	cmp	r8, r7
 800a5dc:	4683      	mov	fp, r0
 800a5de:	f04f 0300 	mov.w	r3, #0
 800a5e2:	f04f 020a 	mov.w	r2, #10
 800a5e6:	4641      	mov	r1, r8
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	d107      	bne.n	800a5fc <_dtoa_r+0xb1c>
 800a5ec:	f000 fa16 	bl	800aa1c <__multadd>
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	e775      	b.n	800a4e8 <_dtoa_r+0xa08>
 800a5fc:	f000 fa0e 	bl	800aa1c <__multadd>
 800a600:	4639      	mov	r1, r7
 800a602:	4680      	mov	r8, r0
 800a604:	2300      	movs	r3, #0
 800a606:	220a      	movs	r2, #10
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 fa07 	bl	800aa1c <__multadd>
 800a60e:	4607      	mov	r7, r0
 800a610:	e7f0      	b.n	800a5f4 <_dtoa_r+0xb14>
 800a612:	f1b9 0f00 	cmp.w	r9, #0
 800a616:	9a00      	ldr	r2, [sp, #0]
 800a618:	bfcc      	ite	gt
 800a61a:	464d      	movgt	r5, r9
 800a61c:	2501      	movle	r5, #1
 800a61e:	4415      	add	r5, r2
 800a620:	f04f 0800 	mov.w	r8, #0
 800a624:	4659      	mov	r1, fp
 800a626:	2201      	movs	r2, #1
 800a628:	4620      	mov	r0, r4
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	f000 fba6 	bl	800ad7c <__lshift>
 800a630:	4631      	mov	r1, r6
 800a632:	4683      	mov	fp, r0
 800a634:	f000 fc0e 	bl	800ae54 <__mcmp>
 800a638:	2800      	cmp	r0, #0
 800a63a:	dcb2      	bgt.n	800a5a2 <_dtoa_r+0xac2>
 800a63c:	d102      	bne.n	800a644 <_dtoa_r+0xb64>
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	07db      	lsls	r3, r3, #31
 800a642:	d4ae      	bmi.n	800a5a2 <_dtoa_r+0xac2>
 800a644:	462b      	mov	r3, r5
 800a646:	461d      	mov	r5, r3
 800a648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a64c:	2a30      	cmp	r2, #48	; 0x30
 800a64e:	d0fa      	beq.n	800a646 <_dtoa_r+0xb66>
 800a650:	e6f7      	b.n	800a442 <_dtoa_r+0x962>
 800a652:	9a00      	ldr	r2, [sp, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d1a5      	bne.n	800a5a4 <_dtoa_r+0xac4>
 800a658:	f10a 0a01 	add.w	sl, sl, #1
 800a65c:	2331      	movs	r3, #49	; 0x31
 800a65e:	e779      	b.n	800a554 <_dtoa_r+0xa74>
 800a660:	4b13      	ldr	r3, [pc, #76]	; (800a6b0 <_dtoa_r+0xbd0>)
 800a662:	f7ff baaf 	b.w	8009bc4 <_dtoa_r+0xe4>
 800a666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f47f aa86 	bne.w	8009b7a <_dtoa_r+0x9a>
 800a66e:	4b11      	ldr	r3, [pc, #68]	; (800a6b4 <_dtoa_r+0xbd4>)
 800a670:	f7ff baa8 	b.w	8009bc4 <_dtoa_r+0xe4>
 800a674:	f1b9 0f00 	cmp.w	r9, #0
 800a678:	dc03      	bgt.n	800a682 <_dtoa_r+0xba2>
 800a67a:	9b05      	ldr	r3, [sp, #20]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	f73f aec9 	bgt.w	800a414 <_dtoa_r+0x934>
 800a682:	9d00      	ldr	r5, [sp, #0]
 800a684:	4631      	mov	r1, r6
 800a686:	4658      	mov	r0, fp
 800a688:	f7ff f99e 	bl	80099c8 <quorem>
 800a68c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a690:	f805 3b01 	strb.w	r3, [r5], #1
 800a694:	9a00      	ldr	r2, [sp, #0]
 800a696:	1aaa      	subs	r2, r5, r2
 800a698:	4591      	cmp	r9, r2
 800a69a:	ddba      	ble.n	800a612 <_dtoa_r+0xb32>
 800a69c:	4659      	mov	r1, fp
 800a69e:	2300      	movs	r3, #0
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 f9ba 	bl	800aa1c <__multadd>
 800a6a8:	4683      	mov	fp, r0
 800a6aa:	e7eb      	b.n	800a684 <_dtoa_r+0xba4>
 800a6ac:	0800c5cc 	.word	0x0800c5cc
 800a6b0:	0800c525 	.word	0x0800c525
 800a6b4:	0800c549 	.word	0x0800c549

0800a6b8 <__sflush_r>:
 800a6b8:	898a      	ldrh	r2, [r1, #12]
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	4605      	mov	r5, r0
 800a6c0:	0710      	lsls	r0, r2, #28
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	d458      	bmi.n	800a778 <__sflush_r+0xc0>
 800a6c6:	684b      	ldr	r3, [r1, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dc05      	bgt.n	800a6d8 <__sflush_r+0x20>
 800a6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dc02      	bgt.n	800a6d8 <__sflush_r+0x20>
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6da:	2e00      	cmp	r6, #0
 800a6dc:	d0f9      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6e4:	682f      	ldr	r7, [r5, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	d032      	beq.n	800a750 <__sflush_r+0x98>
 800a6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	075a      	lsls	r2, r3, #29
 800a6f0:	d505      	bpl.n	800a6fe <__sflush_r+0x46>
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	1ac0      	subs	r0, r0, r3
 800a6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6f8:	b10b      	cbz	r3, 800a6fe <__sflush_r+0x46>
 800a6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	2300      	movs	r3, #0
 800a700:	4602      	mov	r2, r0
 800a702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a704:	6a21      	ldr	r1, [r4, #32]
 800a706:	4628      	mov	r0, r5
 800a708:	47b0      	blx	r6
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	d106      	bne.n	800a71e <__sflush_r+0x66>
 800a710:	6829      	ldr	r1, [r5, #0]
 800a712:	291d      	cmp	r1, #29
 800a714:	d82c      	bhi.n	800a770 <__sflush_r+0xb8>
 800a716:	4a2a      	ldr	r2, [pc, #168]	; (800a7c0 <__sflush_r+0x108>)
 800a718:	40ca      	lsrs	r2, r1
 800a71a:	07d6      	lsls	r6, r2, #31
 800a71c:	d528      	bpl.n	800a770 <__sflush_r+0xb8>
 800a71e:	2200      	movs	r2, #0
 800a720:	6062      	str	r2, [r4, #4]
 800a722:	04d9      	lsls	r1, r3, #19
 800a724:	6922      	ldr	r2, [r4, #16]
 800a726:	6022      	str	r2, [r4, #0]
 800a728:	d504      	bpl.n	800a734 <__sflush_r+0x7c>
 800a72a:	1c42      	adds	r2, r0, #1
 800a72c:	d101      	bne.n	800a732 <__sflush_r+0x7a>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b903      	cbnz	r3, 800a734 <__sflush_r+0x7c>
 800a732:	6560      	str	r0, [r4, #84]	; 0x54
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	602f      	str	r7, [r5, #0]
 800a738:	2900      	cmp	r1, #0
 800a73a:	d0ca      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a740:	4299      	cmp	r1, r3
 800a742:	d002      	beq.n	800a74a <__sflush_r+0x92>
 800a744:	4628      	mov	r0, r5
 800a746:	f000 fc95 	bl	800b074 <_free_r>
 800a74a:	2000      	movs	r0, #0
 800a74c:	6360      	str	r0, [r4, #52]	; 0x34
 800a74e:	e7c1      	b.n	800a6d4 <__sflush_r+0x1c>
 800a750:	6a21      	ldr	r1, [r4, #32]
 800a752:	2301      	movs	r3, #1
 800a754:	4628      	mov	r0, r5
 800a756:	47b0      	blx	r6
 800a758:	1c41      	adds	r1, r0, #1
 800a75a:	d1c7      	bne.n	800a6ec <__sflush_r+0x34>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0c4      	beq.n	800a6ec <__sflush_r+0x34>
 800a762:	2b1d      	cmp	r3, #29
 800a764:	d001      	beq.n	800a76a <__sflush_r+0xb2>
 800a766:	2b16      	cmp	r3, #22
 800a768:	d101      	bne.n	800a76e <__sflush_r+0xb6>
 800a76a:	602f      	str	r7, [r5, #0]
 800a76c:	e7b1      	b.n	800a6d2 <__sflush_r+0x1a>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	e7ad      	b.n	800a6d4 <__sflush_r+0x1c>
 800a778:	690f      	ldr	r7, [r1, #16]
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	d0a9      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a77e:	0793      	lsls	r3, r2, #30
 800a780:	680e      	ldr	r6, [r1, #0]
 800a782:	bf08      	it	eq
 800a784:	694b      	ldreq	r3, [r1, #20]
 800a786:	600f      	str	r7, [r1, #0]
 800a788:	bf18      	it	ne
 800a78a:	2300      	movne	r3, #0
 800a78c:	eba6 0807 	sub.w	r8, r6, r7
 800a790:	608b      	str	r3, [r1, #8]
 800a792:	f1b8 0f00 	cmp.w	r8, #0
 800a796:	dd9c      	ble.n	800a6d2 <__sflush_r+0x1a>
 800a798:	6a21      	ldr	r1, [r4, #32]
 800a79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a79c:	4643      	mov	r3, r8
 800a79e:	463a      	mov	r2, r7
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b0      	blx	r6
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	dc06      	bgt.n	800a7b6 <__sflush_r+0xfe>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b4:	e78e      	b.n	800a6d4 <__sflush_r+0x1c>
 800a7b6:	4407      	add	r7, r0
 800a7b8:	eba8 0800 	sub.w	r8, r8, r0
 800a7bc:	e7e9      	b.n	800a792 <__sflush_r+0xda>
 800a7be:	bf00      	nop
 800a7c0:	20400001 	.word	0x20400001

0800a7c4 <_fflush_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	690b      	ldr	r3, [r1, #16]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	b913      	cbnz	r3, 800a7d4 <_fflush_r+0x10>
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	b118      	cbz	r0, 800a7de <_fflush_r+0x1a>
 800a7d6:	6983      	ldr	r3, [r0, #24]
 800a7d8:	b90b      	cbnz	r3, 800a7de <_fflush_r+0x1a>
 800a7da:	f7fd ffdb 	bl	8008794 <__sinit>
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <_fflush_r+0x6c>)
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	d11b      	bne.n	800a81c <_fflush_r+0x58>
 800a7e4:	686c      	ldr	r4, [r5, #4]
 800a7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0ef      	beq.n	800a7ce <_fflush_r+0xa>
 800a7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f0:	07d0      	lsls	r0, r2, #31
 800a7f2:	d404      	bmi.n	800a7fe <_fflush_r+0x3a>
 800a7f4:	0599      	lsls	r1, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_fflush_r+0x3a>
 800a7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fa:	f7fe f8a0 	bl	800893e <__retarget_lock_acquire_recursive>
 800a7fe:	4628      	mov	r0, r5
 800a800:	4621      	mov	r1, r4
 800a802:	f7ff ff59 	bl	800a6b8 <__sflush_r>
 800a806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a808:	07da      	lsls	r2, r3, #31
 800a80a:	4605      	mov	r5, r0
 800a80c:	d4e0      	bmi.n	800a7d0 <_fflush_r+0xc>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	059b      	lsls	r3, r3, #22
 800a812:	d4dd      	bmi.n	800a7d0 <_fflush_r+0xc>
 800a814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a816:	f7fe f893 	bl	8008940 <__retarget_lock_release_recursive>
 800a81a:	e7d9      	b.n	800a7d0 <_fflush_r+0xc>
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <_fflush_r+0x70>)
 800a81e:	429c      	cmp	r4, r3
 800a820:	d101      	bne.n	800a826 <_fflush_r+0x62>
 800a822:	68ac      	ldr	r4, [r5, #8]
 800a824:	e7df      	b.n	800a7e6 <_fflush_r+0x22>
 800a826:	4b04      	ldr	r3, [pc, #16]	; (800a838 <_fflush_r+0x74>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	bf08      	it	eq
 800a82c:	68ec      	ldreq	r4, [r5, #12]
 800a82e:	e7da      	b.n	800a7e6 <_fflush_r+0x22>
 800a830:	0800c4c0 	.word	0x0800c4c0
 800a834:	0800c4e0 	.word	0x0800c4e0
 800a838:	0800c4a0 	.word	0x0800c4a0

0800a83c <_localeconv_r>:
 800a83c:	4800      	ldr	r0, [pc, #0]	; (800a840 <_localeconv_r+0x4>)
 800a83e:	4770      	bx	lr
 800a840:	20000188 	.word	0x20000188

0800a844 <_lseek_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_lseek_r+0x20>)
 800a848:	4604      	mov	r4, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f7 fcac 	bl	80021b0 <_lseek>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_lseek_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_lseek_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	200085dc 	.word	0x200085dc

0800a868 <__swhatbuf_r>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	460e      	mov	r6, r1
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	2900      	cmp	r1, #0
 800a872:	b096      	sub	sp, #88	; 0x58
 800a874:	4614      	mov	r4, r2
 800a876:	461d      	mov	r5, r3
 800a878:	da07      	bge.n	800a88a <__swhatbuf_r+0x22>
 800a87a:	2300      	movs	r3, #0
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	89b3      	ldrh	r3, [r6, #12]
 800a880:	061a      	lsls	r2, r3, #24
 800a882:	d410      	bmi.n	800a8a6 <__swhatbuf_r+0x3e>
 800a884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a888:	e00e      	b.n	800a8a8 <__swhatbuf_r+0x40>
 800a88a:	466a      	mov	r2, sp
 800a88c:	f000 fe1a 	bl	800b4c4 <_fstat_r>
 800a890:	2800      	cmp	r0, #0
 800a892:	dbf2      	blt.n	800a87a <__swhatbuf_r+0x12>
 800a894:	9a01      	ldr	r2, [sp, #4]
 800a896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a89a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a89e:	425a      	negs	r2, r3
 800a8a0:	415a      	adcs	r2, r3
 800a8a2:	602a      	str	r2, [r5, #0]
 800a8a4:	e7ee      	b.n	800a884 <__swhatbuf_r+0x1c>
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	b016      	add	sp, #88	; 0x58
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}

0800a8b0 <__smakebuf_r>:
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8b4:	079d      	lsls	r5, r3, #30
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	d507      	bpl.n	800a8cc <__smakebuf_r+0x1c>
 800a8bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	6123      	str	r3, [r4, #16]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	6163      	str	r3, [r4, #20]
 800a8c8:	b002      	add	sp, #8
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	ab01      	add	r3, sp, #4
 800a8ce:	466a      	mov	r2, sp
 800a8d0:	f7ff ffca 	bl	800a868 <__swhatbuf_r>
 800a8d4:	9900      	ldr	r1, [sp, #0]
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f7fe f863 	bl	80089a4 <_malloc_r>
 800a8de:	b948      	cbnz	r0, 800a8f4 <__smakebuf_r+0x44>
 800a8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e4:	059a      	lsls	r2, r3, #22
 800a8e6:	d4ef      	bmi.n	800a8c8 <__smakebuf_r+0x18>
 800a8e8:	f023 0303 	bic.w	r3, r3, #3
 800a8ec:	f043 0302 	orr.w	r3, r3, #2
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	e7e3      	b.n	800a8bc <__smakebuf_r+0xc>
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <__smakebuf_r+0x7c>)
 800a8f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	6020      	str	r0, [r4, #0]
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	6163      	str	r3, [r4, #20]
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	6120      	str	r0, [r4, #16]
 800a90a:	b15b      	cbz	r3, 800a924 <__smakebuf_r+0x74>
 800a90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a910:	4630      	mov	r0, r6
 800a912:	f000 fde9 	bl	800b4e8 <_isatty_r>
 800a916:	b128      	cbz	r0, 800a924 <__smakebuf_r+0x74>
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	f043 0301 	orr.w	r3, r3, #1
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	89a0      	ldrh	r0, [r4, #12]
 800a926:	4305      	orrs	r5, r0
 800a928:	81a5      	strh	r5, [r4, #12]
 800a92a:	e7cd      	b.n	800a8c8 <__smakebuf_r+0x18>
 800a92c:	0800872d 	.word	0x0800872d

0800a930 <malloc>:
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <malloc+0xc>)
 800a932:	4601      	mov	r1, r0
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f7fe b835 	b.w	80089a4 <_malloc_r>
 800a93a:	bf00      	nop
 800a93c:	20000034 	.word	0x20000034

0800a940 <__malloc_lock>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__malloc_lock+0x8>)
 800a942:	f7fd bffc 	b.w	800893e <__retarget_lock_acquire_recursive>
 800a946:	bf00      	nop
 800a948:	200085d4 	.word	0x200085d4

0800a94c <__malloc_unlock>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__malloc_unlock+0x8>)
 800a94e:	f7fd bff7 	b.w	8008940 <__retarget_lock_release_recursive>
 800a952:	bf00      	nop
 800a954:	200085d4 	.word	0x200085d4

0800a958 <_Balloc>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	b976      	cbnz	r6, 800a980 <_Balloc+0x28>
 800a962:	2010      	movs	r0, #16
 800a964:	f7ff ffe4 	bl	800a930 <malloc>
 800a968:	4602      	mov	r2, r0
 800a96a:	6260      	str	r0, [r4, #36]	; 0x24
 800a96c:	b920      	cbnz	r0, 800a978 <_Balloc+0x20>
 800a96e:	4b18      	ldr	r3, [pc, #96]	; (800a9d0 <_Balloc+0x78>)
 800a970:	4818      	ldr	r0, [pc, #96]	; (800a9d4 <_Balloc+0x7c>)
 800a972:	2166      	movs	r1, #102	; 0x66
 800a974:	f7fd fe92 	bl	800869c <__assert_func>
 800a978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a97c:	6006      	str	r6, [r0, #0]
 800a97e:	60c6      	str	r6, [r0, #12]
 800a980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a982:	68f3      	ldr	r3, [r6, #12]
 800a984:	b183      	cbz	r3, 800a9a8 <_Balloc+0x50>
 800a986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a98e:	b9b8      	cbnz	r0, 800a9c0 <_Balloc+0x68>
 800a990:	2101      	movs	r1, #1
 800a992:	fa01 f605 	lsl.w	r6, r1, r5
 800a996:	1d72      	adds	r2, r6, #5
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fb5a 	bl	800b054 <_calloc_r>
 800a9a0:	b160      	cbz	r0, 800a9bc <_Balloc+0x64>
 800a9a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9a6:	e00e      	b.n	800a9c6 <_Balloc+0x6e>
 800a9a8:	2221      	movs	r2, #33	; 0x21
 800a9aa:	2104      	movs	r1, #4
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 fb51 	bl	800b054 <_calloc_r>
 800a9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b4:	60f0      	str	r0, [r6, #12]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e4      	bne.n	800a986 <_Balloc+0x2e>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	6802      	ldr	r2, [r0, #0]
 800a9c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9cc:	e7f7      	b.n	800a9be <_Balloc+0x66>
 800a9ce:	bf00      	nop
 800a9d0:	0800c556 	.word	0x0800c556
 800a9d4:	0800c5dd 	.word	0x0800c5dd

0800a9d8 <_Bfree>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	b976      	cbnz	r6, 800aa00 <_Bfree+0x28>
 800a9e2:	2010      	movs	r0, #16
 800a9e4:	f7ff ffa4 	bl	800a930 <malloc>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	6268      	str	r0, [r5, #36]	; 0x24
 800a9ec:	b920      	cbnz	r0, 800a9f8 <_Bfree+0x20>
 800a9ee:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <_Bfree+0x3c>)
 800a9f0:	4809      	ldr	r0, [pc, #36]	; (800aa18 <_Bfree+0x40>)
 800a9f2:	218a      	movs	r1, #138	; 0x8a
 800a9f4:	f7fd fe52 	bl	800869c <__assert_func>
 800a9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9fc:	6006      	str	r6, [r0, #0]
 800a9fe:	60c6      	str	r6, [r0, #12]
 800aa00:	b13c      	cbz	r4, 800aa12 <_Bfree+0x3a>
 800aa02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa04:	6862      	ldr	r2, [r4, #4]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa0c:	6021      	str	r1, [r4, #0]
 800aa0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	0800c556 	.word	0x0800c556
 800aa18:	0800c5dd 	.word	0x0800c5dd

0800aa1c <__multadd>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	690e      	ldr	r6, [r1, #16]
 800aa22:	4607      	mov	r7, r0
 800aa24:	4698      	mov	r8, r3
 800aa26:	460c      	mov	r4, r1
 800aa28:	f101 0014 	add.w	r0, r1, #20
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6805      	ldr	r5, [r0, #0]
 800aa30:	b2a9      	uxth	r1, r5
 800aa32:	fb02 8101 	mla	r1, r2, r1, r8
 800aa36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aa3a:	0c2d      	lsrs	r5, r5, #16
 800aa3c:	fb02 c505 	mla	r5, r2, r5, ip
 800aa40:	b289      	uxth	r1, r1
 800aa42:	3301      	adds	r3, #1
 800aa44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aa48:	429e      	cmp	r6, r3
 800aa4a:	f840 1b04 	str.w	r1, [r0], #4
 800aa4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aa52:	dcec      	bgt.n	800aa2e <__multadd+0x12>
 800aa54:	f1b8 0f00 	cmp.w	r8, #0
 800aa58:	d022      	beq.n	800aaa0 <__multadd+0x84>
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	42b3      	cmp	r3, r6
 800aa5e:	dc19      	bgt.n	800aa94 <__multadd+0x78>
 800aa60:	6861      	ldr	r1, [r4, #4]
 800aa62:	4638      	mov	r0, r7
 800aa64:	3101      	adds	r1, #1
 800aa66:	f7ff ff77 	bl	800a958 <_Balloc>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	b928      	cbnz	r0, 800aa7a <__multadd+0x5e>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <__multadd+0x8c>)
 800aa72:	480e      	ldr	r0, [pc, #56]	; (800aaac <__multadd+0x90>)
 800aa74:	21b5      	movs	r1, #181	; 0xb5
 800aa76:	f7fd fe11 	bl	800869c <__assert_func>
 800aa7a:	6922      	ldr	r2, [r4, #16]
 800aa7c:	3202      	adds	r2, #2
 800aa7e:	f104 010c 	add.w	r1, r4, #12
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	300c      	adds	r0, #12
 800aa86:	f7fd ff5c 	bl	8008942 <memcpy>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	f7ff ffa3 	bl	800a9d8 <_Bfree>
 800aa92:	462c      	mov	r4, r5
 800aa94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aa98:	3601      	adds	r6, #1
 800aa9a:	f8c3 8014 	str.w	r8, [r3, #20]
 800aa9e:	6126      	str	r6, [r4, #16]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0800c5cc 	.word	0x0800c5cc
 800aaac:	0800c5dd 	.word	0x0800c5dd

0800aab0 <__hi0bits>:
 800aab0:	0c03      	lsrs	r3, r0, #16
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	b9d3      	cbnz	r3, 800aaec <__hi0bits+0x3c>
 800aab6:	0400      	lsls	r0, r0, #16
 800aab8:	2310      	movs	r3, #16
 800aaba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aabe:	bf04      	itt	eq
 800aac0:	0200      	lsleq	r0, r0, #8
 800aac2:	3308      	addeq	r3, #8
 800aac4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aac8:	bf04      	itt	eq
 800aaca:	0100      	lsleq	r0, r0, #4
 800aacc:	3304      	addeq	r3, #4
 800aace:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aad2:	bf04      	itt	eq
 800aad4:	0080      	lsleq	r0, r0, #2
 800aad6:	3302      	addeq	r3, #2
 800aad8:	2800      	cmp	r0, #0
 800aada:	db05      	blt.n	800aae8 <__hi0bits+0x38>
 800aadc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aae0:	f103 0301 	add.w	r3, r3, #1
 800aae4:	bf08      	it	eq
 800aae6:	2320      	moveq	r3, #32
 800aae8:	4618      	mov	r0, r3
 800aaea:	4770      	bx	lr
 800aaec:	2300      	movs	r3, #0
 800aaee:	e7e4      	b.n	800aaba <__hi0bits+0xa>

0800aaf0 <__lo0bits>:
 800aaf0:	6803      	ldr	r3, [r0, #0]
 800aaf2:	f013 0207 	ands.w	r2, r3, #7
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	d00b      	beq.n	800ab12 <__lo0bits+0x22>
 800aafa:	07da      	lsls	r2, r3, #31
 800aafc:	d424      	bmi.n	800ab48 <__lo0bits+0x58>
 800aafe:	0798      	lsls	r0, r3, #30
 800ab00:	bf49      	itett	mi
 800ab02:	085b      	lsrmi	r3, r3, #1
 800ab04:	089b      	lsrpl	r3, r3, #2
 800ab06:	2001      	movmi	r0, #1
 800ab08:	600b      	strmi	r3, [r1, #0]
 800ab0a:	bf5c      	itt	pl
 800ab0c:	600b      	strpl	r3, [r1, #0]
 800ab0e:	2002      	movpl	r0, #2
 800ab10:	4770      	bx	lr
 800ab12:	b298      	uxth	r0, r3
 800ab14:	b9b0      	cbnz	r0, 800ab44 <__lo0bits+0x54>
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	2010      	movs	r0, #16
 800ab1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab1e:	bf04      	itt	eq
 800ab20:	0a1b      	lsreq	r3, r3, #8
 800ab22:	3008      	addeq	r0, #8
 800ab24:	071a      	lsls	r2, r3, #28
 800ab26:	bf04      	itt	eq
 800ab28:	091b      	lsreq	r3, r3, #4
 800ab2a:	3004      	addeq	r0, #4
 800ab2c:	079a      	lsls	r2, r3, #30
 800ab2e:	bf04      	itt	eq
 800ab30:	089b      	lsreq	r3, r3, #2
 800ab32:	3002      	addeq	r0, #2
 800ab34:	07da      	lsls	r2, r3, #31
 800ab36:	d403      	bmi.n	800ab40 <__lo0bits+0x50>
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	f100 0001 	add.w	r0, r0, #1
 800ab3e:	d005      	beq.n	800ab4c <__lo0bits+0x5c>
 800ab40:	600b      	str	r3, [r1, #0]
 800ab42:	4770      	bx	lr
 800ab44:	4610      	mov	r0, r2
 800ab46:	e7e8      	b.n	800ab1a <__lo0bits+0x2a>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	4770      	bx	lr
 800ab4c:	2020      	movs	r0, #32
 800ab4e:	4770      	bx	lr

0800ab50 <__i2b>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	2101      	movs	r1, #1
 800ab56:	f7ff feff 	bl	800a958 <_Balloc>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <__i2b+0x1a>
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <__i2b+0x24>)
 800ab60:	4805      	ldr	r0, [pc, #20]	; (800ab78 <__i2b+0x28>)
 800ab62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab66:	f7fd fd99 	bl	800869c <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	6144      	str	r4, [r0, #20]
 800ab6e:	6103      	str	r3, [r0, #16]
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800c5cc 	.word	0x0800c5cc
 800ab78:	0800c5dd 	.word	0x0800c5dd

0800ab7c <__multiply>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4614      	mov	r4, r2
 800ab82:	690a      	ldr	r2, [r1, #16]
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	bfb8      	it	lt
 800ab8a:	460b      	movlt	r3, r1
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	bfbc      	itt	lt
 800ab90:	4625      	movlt	r5, r4
 800ab92:	461c      	movlt	r4, r3
 800ab94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ab98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab9c:	68ab      	ldr	r3, [r5, #8]
 800ab9e:	6869      	ldr	r1, [r5, #4]
 800aba0:	eb0a 0709 	add.w	r7, sl, r9
 800aba4:	42bb      	cmp	r3, r7
 800aba6:	b085      	sub	sp, #20
 800aba8:	bfb8      	it	lt
 800abaa:	3101      	addlt	r1, #1
 800abac:	f7ff fed4 	bl	800a958 <_Balloc>
 800abb0:	b930      	cbnz	r0, 800abc0 <__multiply+0x44>
 800abb2:	4602      	mov	r2, r0
 800abb4:	4b42      	ldr	r3, [pc, #264]	; (800acc0 <__multiply+0x144>)
 800abb6:	4843      	ldr	r0, [pc, #268]	; (800acc4 <__multiply+0x148>)
 800abb8:	f240 115d 	movw	r1, #349	; 0x15d
 800abbc:	f7fd fd6e 	bl	800869c <__assert_func>
 800abc0:	f100 0614 	add.w	r6, r0, #20
 800abc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800abc8:	4633      	mov	r3, r6
 800abca:	2200      	movs	r2, #0
 800abcc:	4543      	cmp	r3, r8
 800abce:	d31e      	bcc.n	800ac0e <__multiply+0x92>
 800abd0:	f105 0c14 	add.w	ip, r5, #20
 800abd4:	f104 0314 	add.w	r3, r4, #20
 800abd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800abdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800abe0:	9202      	str	r2, [sp, #8]
 800abe2:	ebac 0205 	sub.w	r2, ip, r5
 800abe6:	3a15      	subs	r2, #21
 800abe8:	f022 0203 	bic.w	r2, r2, #3
 800abec:	3204      	adds	r2, #4
 800abee:	f105 0115 	add.w	r1, r5, #21
 800abf2:	458c      	cmp	ip, r1
 800abf4:	bf38      	it	cc
 800abf6:	2204      	movcc	r2, #4
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	9a02      	ldr	r2, [sp, #8]
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d808      	bhi.n	800ac14 <__multiply+0x98>
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	dc55      	bgt.n	800acb2 <__multiply+0x136>
 800ac06:	6107      	str	r7, [r0, #16]
 800ac08:	b005      	add	sp, #20
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	f843 2b04 	str.w	r2, [r3], #4
 800ac12:	e7db      	b.n	800abcc <__multiply+0x50>
 800ac14:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d020      	beq.n	800ac60 <__multiply+0xe4>
 800ac1e:	f105 0e14 	add.w	lr, r5, #20
 800ac22:	46b1      	mov	r9, r6
 800ac24:	2200      	movs	r2, #0
 800ac26:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ac2a:	f8d9 b000 	ldr.w	fp, [r9]
 800ac2e:	b2a1      	uxth	r1, r4
 800ac30:	fa1f fb8b 	uxth.w	fp, fp
 800ac34:	fb0a b101 	mla	r1, sl, r1, fp
 800ac38:	4411      	add	r1, r2
 800ac3a:	f8d9 2000 	ldr.w	r2, [r9]
 800ac3e:	0c24      	lsrs	r4, r4, #16
 800ac40:	0c12      	lsrs	r2, r2, #16
 800ac42:	fb0a 2404 	mla	r4, sl, r4, r2
 800ac46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ac4a:	b289      	uxth	r1, r1
 800ac4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac50:	45f4      	cmp	ip, lr
 800ac52:	f849 1b04 	str.w	r1, [r9], #4
 800ac56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ac5a:	d8e4      	bhi.n	800ac26 <__multiply+0xaa>
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	5072      	str	r2, [r6, r1]
 800ac60:	9a03      	ldr	r2, [sp, #12]
 800ac62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac66:	3304      	adds	r3, #4
 800ac68:	f1b9 0f00 	cmp.w	r9, #0
 800ac6c:	d01f      	beq.n	800acae <__multiply+0x132>
 800ac6e:	6834      	ldr	r4, [r6, #0]
 800ac70:	f105 0114 	add.w	r1, r5, #20
 800ac74:	46b6      	mov	lr, r6
 800ac76:	f04f 0a00 	mov.w	sl, #0
 800ac7a:	880a      	ldrh	r2, [r1, #0]
 800ac7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ac80:	fb09 b202 	mla	r2, r9, r2, fp
 800ac84:	4492      	add	sl, r2
 800ac86:	b2a4      	uxth	r4, r4
 800ac88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ac8c:	f84e 4b04 	str.w	r4, [lr], #4
 800ac90:	f851 4b04 	ldr.w	r4, [r1], #4
 800ac94:	f8be 2000 	ldrh.w	r2, [lr]
 800ac98:	0c24      	lsrs	r4, r4, #16
 800ac9a:	fb09 2404 	mla	r4, r9, r4, r2
 800ac9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aca2:	458c      	cmp	ip, r1
 800aca4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aca8:	d8e7      	bhi.n	800ac7a <__multiply+0xfe>
 800acaa:	9a01      	ldr	r2, [sp, #4]
 800acac:	50b4      	str	r4, [r6, r2]
 800acae:	3604      	adds	r6, #4
 800acb0:	e7a3      	b.n	800abfa <__multiply+0x7e>
 800acb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1a5      	bne.n	800ac06 <__multiply+0x8a>
 800acba:	3f01      	subs	r7, #1
 800acbc:	e7a1      	b.n	800ac02 <__multiply+0x86>
 800acbe:	bf00      	nop
 800acc0:	0800c5cc 	.word	0x0800c5cc
 800acc4:	0800c5dd 	.word	0x0800c5dd

0800acc8 <__pow5mult>:
 800acc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800accc:	4615      	mov	r5, r2
 800acce:	f012 0203 	ands.w	r2, r2, #3
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	d007      	beq.n	800ace8 <__pow5mult+0x20>
 800acd8:	4c25      	ldr	r4, [pc, #148]	; (800ad70 <__pow5mult+0xa8>)
 800acda:	3a01      	subs	r2, #1
 800acdc:	2300      	movs	r3, #0
 800acde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ace2:	f7ff fe9b 	bl	800aa1c <__multadd>
 800ace6:	4607      	mov	r7, r0
 800ace8:	10ad      	asrs	r5, r5, #2
 800acea:	d03d      	beq.n	800ad68 <__pow5mult+0xa0>
 800acec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acee:	b97c      	cbnz	r4, 800ad10 <__pow5mult+0x48>
 800acf0:	2010      	movs	r0, #16
 800acf2:	f7ff fe1d 	bl	800a930 <malloc>
 800acf6:	4602      	mov	r2, r0
 800acf8:	6270      	str	r0, [r6, #36]	; 0x24
 800acfa:	b928      	cbnz	r0, 800ad08 <__pow5mult+0x40>
 800acfc:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <__pow5mult+0xac>)
 800acfe:	481e      	ldr	r0, [pc, #120]	; (800ad78 <__pow5mult+0xb0>)
 800ad00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad04:	f7fd fcca 	bl	800869c <__assert_func>
 800ad08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad0c:	6004      	str	r4, [r0, #0]
 800ad0e:	60c4      	str	r4, [r0, #12]
 800ad10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad18:	b94c      	cbnz	r4, 800ad2e <__pow5mult+0x66>
 800ad1a:	f240 2171 	movw	r1, #625	; 0x271
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ff16 	bl	800ab50 <__i2b>
 800ad24:	2300      	movs	r3, #0
 800ad26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	6003      	str	r3, [r0, #0]
 800ad2e:	f04f 0900 	mov.w	r9, #0
 800ad32:	07eb      	lsls	r3, r5, #31
 800ad34:	d50a      	bpl.n	800ad4c <__pow5mult+0x84>
 800ad36:	4639      	mov	r1, r7
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ff1e 	bl	800ab7c <__multiply>
 800ad40:	4639      	mov	r1, r7
 800ad42:	4680      	mov	r8, r0
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7ff fe47 	bl	800a9d8 <_Bfree>
 800ad4a:	4647      	mov	r7, r8
 800ad4c:	106d      	asrs	r5, r5, #1
 800ad4e:	d00b      	beq.n	800ad68 <__pow5mult+0xa0>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	b938      	cbnz	r0, 800ad64 <__pow5mult+0x9c>
 800ad54:	4622      	mov	r2, r4
 800ad56:	4621      	mov	r1, r4
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff ff0f 	bl	800ab7c <__multiply>
 800ad5e:	6020      	str	r0, [r4, #0]
 800ad60:	f8c0 9000 	str.w	r9, [r0]
 800ad64:	4604      	mov	r4, r0
 800ad66:	e7e4      	b.n	800ad32 <__pow5mult+0x6a>
 800ad68:	4638      	mov	r0, r7
 800ad6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800c730 	.word	0x0800c730
 800ad74:	0800c556 	.word	0x0800c556
 800ad78:	0800c5dd 	.word	0x0800c5dd

0800ad7c <__lshift>:
 800ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	6849      	ldr	r1, [r1, #4]
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	4691      	mov	r9, r2
 800ad90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad94:	f108 0601 	add.w	r6, r8, #1
 800ad98:	42b3      	cmp	r3, r6
 800ad9a:	db0b      	blt.n	800adb4 <__lshift+0x38>
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7ff fddb 	bl	800a958 <_Balloc>
 800ada2:	4605      	mov	r5, r0
 800ada4:	b948      	cbnz	r0, 800adba <__lshift+0x3e>
 800ada6:	4602      	mov	r2, r0
 800ada8:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <__lshift+0xd0>)
 800adaa:	4829      	ldr	r0, [pc, #164]	; (800ae50 <__lshift+0xd4>)
 800adac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800adb0:	f7fd fc74 	bl	800869c <__assert_func>
 800adb4:	3101      	adds	r1, #1
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	e7ee      	b.n	800ad98 <__lshift+0x1c>
 800adba:	2300      	movs	r3, #0
 800adbc:	f100 0114 	add.w	r1, r0, #20
 800adc0:	f100 0210 	add.w	r2, r0, #16
 800adc4:	4618      	mov	r0, r3
 800adc6:	4553      	cmp	r3, sl
 800adc8:	db33      	blt.n	800ae32 <__lshift+0xb6>
 800adca:	6920      	ldr	r0, [r4, #16]
 800adcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800add0:	f104 0314 	add.w	r3, r4, #20
 800add4:	f019 091f 	ands.w	r9, r9, #31
 800add8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800addc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ade0:	d02b      	beq.n	800ae3a <__lshift+0xbe>
 800ade2:	f1c9 0e20 	rsb	lr, r9, #32
 800ade6:	468a      	mov	sl, r1
 800ade8:	2200      	movs	r2, #0
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	fa00 f009 	lsl.w	r0, r0, r9
 800adf0:	4302      	orrs	r2, r0
 800adf2:	f84a 2b04 	str.w	r2, [sl], #4
 800adf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfa:	459c      	cmp	ip, r3
 800adfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae00:	d8f3      	bhi.n	800adea <__lshift+0x6e>
 800ae02:	ebac 0304 	sub.w	r3, ip, r4
 800ae06:	3b15      	subs	r3, #21
 800ae08:	f023 0303 	bic.w	r3, r3, #3
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	f104 0015 	add.w	r0, r4, #21
 800ae12:	4584      	cmp	ip, r0
 800ae14:	bf38      	it	cc
 800ae16:	2304      	movcc	r3, #4
 800ae18:	50ca      	str	r2, [r1, r3]
 800ae1a:	b10a      	cbz	r2, 800ae20 <__lshift+0xa4>
 800ae1c:	f108 0602 	add.w	r6, r8, #2
 800ae20:	3e01      	subs	r6, #1
 800ae22:	4638      	mov	r0, r7
 800ae24:	612e      	str	r6, [r5, #16]
 800ae26:	4621      	mov	r1, r4
 800ae28:	f7ff fdd6 	bl	800a9d8 <_Bfree>
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae32:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae36:	3301      	adds	r3, #1
 800ae38:	e7c5      	b.n	800adc6 <__lshift+0x4a>
 800ae3a:	3904      	subs	r1, #4
 800ae3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae40:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae44:	459c      	cmp	ip, r3
 800ae46:	d8f9      	bhi.n	800ae3c <__lshift+0xc0>
 800ae48:	e7ea      	b.n	800ae20 <__lshift+0xa4>
 800ae4a:	bf00      	nop
 800ae4c:	0800c5cc 	.word	0x0800c5cc
 800ae50:	0800c5dd 	.word	0x0800c5dd

0800ae54 <__mcmp>:
 800ae54:	b530      	push	{r4, r5, lr}
 800ae56:	6902      	ldr	r2, [r0, #16]
 800ae58:	690c      	ldr	r4, [r1, #16]
 800ae5a:	1b12      	subs	r2, r2, r4
 800ae5c:	d10e      	bne.n	800ae7c <__mcmp+0x28>
 800ae5e:	f100 0314 	add.w	r3, r0, #20
 800ae62:	3114      	adds	r1, #20
 800ae64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae74:	42a5      	cmp	r5, r4
 800ae76:	d003      	beq.n	800ae80 <__mcmp+0x2c>
 800ae78:	d305      	bcc.n	800ae86 <__mcmp+0x32>
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	bd30      	pop	{r4, r5, pc}
 800ae80:	4283      	cmp	r3, r0
 800ae82:	d3f3      	bcc.n	800ae6c <__mcmp+0x18>
 800ae84:	e7fa      	b.n	800ae7c <__mcmp+0x28>
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8a:	e7f7      	b.n	800ae7c <__mcmp+0x28>

0800ae8c <__mdiff>:
 800ae8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	460c      	mov	r4, r1
 800ae92:	4606      	mov	r6, r0
 800ae94:	4611      	mov	r1, r2
 800ae96:	4620      	mov	r0, r4
 800ae98:	4617      	mov	r7, r2
 800ae9a:	f7ff ffdb 	bl	800ae54 <__mcmp>
 800ae9e:	1e05      	subs	r5, r0, #0
 800aea0:	d110      	bne.n	800aec4 <__mdiff+0x38>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7ff fd57 	bl	800a958 <_Balloc>
 800aeaa:	b930      	cbnz	r0, 800aeba <__mdiff+0x2e>
 800aeac:	4b39      	ldr	r3, [pc, #228]	; (800af94 <__mdiff+0x108>)
 800aeae:	4602      	mov	r2, r0
 800aeb0:	f240 2132 	movw	r1, #562	; 0x232
 800aeb4:	4838      	ldr	r0, [pc, #224]	; (800af98 <__mdiff+0x10c>)
 800aeb6:	f7fd fbf1 	bl	800869c <__assert_func>
 800aeba:	2301      	movs	r3, #1
 800aebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec4:	bfa4      	itt	ge
 800aec6:	463b      	movge	r3, r7
 800aec8:	4627      	movge	r7, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	bfa6      	itte	ge
 800aed0:	461c      	movge	r4, r3
 800aed2:	2500      	movge	r5, #0
 800aed4:	2501      	movlt	r5, #1
 800aed6:	f7ff fd3f 	bl	800a958 <_Balloc>
 800aeda:	b920      	cbnz	r0, 800aee6 <__mdiff+0x5a>
 800aedc:	4b2d      	ldr	r3, [pc, #180]	; (800af94 <__mdiff+0x108>)
 800aede:	4602      	mov	r2, r0
 800aee0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aee4:	e7e6      	b.n	800aeb4 <__mdiff+0x28>
 800aee6:	693e      	ldr	r6, [r7, #16]
 800aee8:	60c5      	str	r5, [r0, #12]
 800aeea:	6925      	ldr	r5, [r4, #16]
 800aeec:	f107 0114 	add.w	r1, r7, #20
 800aef0:	f104 0914 	add.w	r9, r4, #20
 800aef4:	f100 0e14 	add.w	lr, r0, #20
 800aef8:	f107 0210 	add.w	r2, r7, #16
 800aefc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800af00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800af04:	46f2      	mov	sl, lr
 800af06:	2700      	movs	r7, #0
 800af08:	f859 3b04 	ldr.w	r3, [r9], #4
 800af0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af10:	fa1f f883 	uxth.w	r8, r3
 800af14:	fa17 f78b 	uxtah	r7, r7, fp
 800af18:	0c1b      	lsrs	r3, r3, #16
 800af1a:	eba7 0808 	sub.w	r8, r7, r8
 800af1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af26:	fa1f f888 	uxth.w	r8, r8
 800af2a:	141f      	asrs	r7, r3, #16
 800af2c:	454d      	cmp	r5, r9
 800af2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af32:	f84a 3b04 	str.w	r3, [sl], #4
 800af36:	d8e7      	bhi.n	800af08 <__mdiff+0x7c>
 800af38:	1b2b      	subs	r3, r5, r4
 800af3a:	3b15      	subs	r3, #21
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	3304      	adds	r3, #4
 800af42:	3415      	adds	r4, #21
 800af44:	42a5      	cmp	r5, r4
 800af46:	bf38      	it	cc
 800af48:	2304      	movcc	r3, #4
 800af4a:	4419      	add	r1, r3
 800af4c:	4473      	add	r3, lr
 800af4e:	469e      	mov	lr, r3
 800af50:	460d      	mov	r5, r1
 800af52:	4565      	cmp	r5, ip
 800af54:	d30e      	bcc.n	800af74 <__mdiff+0xe8>
 800af56:	f10c 0203 	add.w	r2, ip, #3
 800af5a:	1a52      	subs	r2, r2, r1
 800af5c:	f022 0203 	bic.w	r2, r2, #3
 800af60:	3903      	subs	r1, #3
 800af62:	458c      	cmp	ip, r1
 800af64:	bf38      	it	cc
 800af66:	2200      	movcc	r2, #0
 800af68:	441a      	add	r2, r3
 800af6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af6e:	b17b      	cbz	r3, 800af90 <__mdiff+0x104>
 800af70:	6106      	str	r6, [r0, #16]
 800af72:	e7a5      	b.n	800aec0 <__mdiff+0x34>
 800af74:	f855 8b04 	ldr.w	r8, [r5], #4
 800af78:	fa17 f488 	uxtah	r4, r7, r8
 800af7c:	1422      	asrs	r2, r4, #16
 800af7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800af82:	b2a4      	uxth	r4, r4
 800af84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af88:	f84e 4b04 	str.w	r4, [lr], #4
 800af8c:	1417      	asrs	r7, r2, #16
 800af8e:	e7e0      	b.n	800af52 <__mdiff+0xc6>
 800af90:	3e01      	subs	r6, #1
 800af92:	e7ea      	b.n	800af6a <__mdiff+0xde>
 800af94:	0800c5cc 	.word	0x0800c5cc
 800af98:	0800c5dd 	.word	0x0800c5dd

0800af9c <__d2b>:
 800af9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4689      	mov	r9, r1
 800afa2:	2101      	movs	r1, #1
 800afa4:	ec57 6b10 	vmov	r6, r7, d0
 800afa8:	4690      	mov	r8, r2
 800afaa:	f7ff fcd5 	bl	800a958 <_Balloc>
 800afae:	4604      	mov	r4, r0
 800afb0:	b930      	cbnz	r0, 800afc0 <__d2b+0x24>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4b25      	ldr	r3, [pc, #148]	; (800b04c <__d2b+0xb0>)
 800afb6:	4826      	ldr	r0, [pc, #152]	; (800b050 <__d2b+0xb4>)
 800afb8:	f240 310a 	movw	r1, #778	; 0x30a
 800afbc:	f7fd fb6e 	bl	800869c <__assert_func>
 800afc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afc8:	bb35      	cbnz	r5, 800b018 <__d2b+0x7c>
 800afca:	2e00      	cmp	r6, #0
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	d028      	beq.n	800b022 <__d2b+0x86>
 800afd0:	4668      	mov	r0, sp
 800afd2:	9600      	str	r6, [sp, #0]
 800afd4:	f7ff fd8c 	bl	800aaf0 <__lo0bits>
 800afd8:	9900      	ldr	r1, [sp, #0]
 800afda:	b300      	cbz	r0, 800b01e <__d2b+0x82>
 800afdc:	9a01      	ldr	r2, [sp, #4]
 800afde:	f1c0 0320 	rsb	r3, r0, #32
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	430b      	orrs	r3, r1
 800afe8:	40c2      	lsrs	r2, r0
 800afea:	6163      	str	r3, [r4, #20]
 800afec:	9201      	str	r2, [sp, #4]
 800afee:	9b01      	ldr	r3, [sp, #4]
 800aff0:	61a3      	str	r3, [r4, #24]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bf14      	ite	ne
 800aff6:	2202      	movne	r2, #2
 800aff8:	2201      	moveq	r2, #1
 800affa:	6122      	str	r2, [r4, #16]
 800affc:	b1d5      	cbz	r5, 800b034 <__d2b+0x98>
 800affe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b002:	4405      	add	r5, r0
 800b004:	f8c9 5000 	str.w	r5, [r9]
 800b008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b00c:	f8c8 0000 	str.w	r0, [r8]
 800b010:	4620      	mov	r0, r4
 800b012:	b003      	add	sp, #12
 800b014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b01c:	e7d5      	b.n	800afca <__d2b+0x2e>
 800b01e:	6161      	str	r1, [r4, #20]
 800b020:	e7e5      	b.n	800afee <__d2b+0x52>
 800b022:	a801      	add	r0, sp, #4
 800b024:	f7ff fd64 	bl	800aaf0 <__lo0bits>
 800b028:	9b01      	ldr	r3, [sp, #4]
 800b02a:	6163      	str	r3, [r4, #20]
 800b02c:	2201      	movs	r2, #1
 800b02e:	6122      	str	r2, [r4, #16]
 800b030:	3020      	adds	r0, #32
 800b032:	e7e3      	b.n	800affc <__d2b+0x60>
 800b034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b03c:	f8c9 0000 	str.w	r0, [r9]
 800b040:	6918      	ldr	r0, [r3, #16]
 800b042:	f7ff fd35 	bl	800aab0 <__hi0bits>
 800b046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b04a:	e7df      	b.n	800b00c <__d2b+0x70>
 800b04c:	0800c5cc 	.word	0x0800c5cc
 800b050:	0800c5dd 	.word	0x0800c5dd

0800b054 <_calloc_r>:
 800b054:	b513      	push	{r0, r1, r4, lr}
 800b056:	434a      	muls	r2, r1
 800b058:	4611      	mov	r1, r2
 800b05a:	9201      	str	r2, [sp, #4]
 800b05c:	f7fd fca2 	bl	80089a4 <_malloc_r>
 800b060:	4604      	mov	r4, r0
 800b062:	b118      	cbz	r0, 800b06c <_calloc_r+0x18>
 800b064:	9a01      	ldr	r2, [sp, #4]
 800b066:	2100      	movs	r1, #0
 800b068:	f7fd fc93 	bl	8008992 <memset>
 800b06c:	4620      	mov	r0, r4
 800b06e:	b002      	add	sp, #8
 800b070:	bd10      	pop	{r4, pc}
	...

0800b074 <_free_r>:
 800b074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b076:	2900      	cmp	r1, #0
 800b078:	d048      	beq.n	800b10c <_free_r+0x98>
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	9001      	str	r0, [sp, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f1a1 0404 	sub.w	r4, r1, #4
 800b086:	bfb8      	it	lt
 800b088:	18e4      	addlt	r4, r4, r3
 800b08a:	f7ff fc59 	bl	800a940 <__malloc_lock>
 800b08e:	4a20      	ldr	r2, [pc, #128]	; (800b110 <_free_r+0x9c>)
 800b090:	9801      	ldr	r0, [sp, #4]
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	4615      	mov	r5, r2
 800b096:	b933      	cbnz	r3, 800b0a6 <_free_r+0x32>
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	6014      	str	r4, [r2, #0]
 800b09c:	b003      	add	sp, #12
 800b09e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a2:	f7ff bc53 	b.w	800a94c <__malloc_unlock>
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	d90b      	bls.n	800b0c2 <_free_r+0x4e>
 800b0aa:	6821      	ldr	r1, [r4, #0]
 800b0ac:	1862      	adds	r2, r4, r1
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bf04      	itt	eq
 800b0b2:	681a      	ldreq	r2, [r3, #0]
 800b0b4:	685b      	ldreq	r3, [r3, #4]
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	bf04      	itt	eq
 800b0ba:	1852      	addeq	r2, r2, r1
 800b0bc:	6022      	streq	r2, [r4, #0]
 800b0be:	602c      	str	r4, [r5, #0]
 800b0c0:	e7ec      	b.n	800b09c <_free_r+0x28>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x58>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x4e>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1855      	adds	r5, r2, r1
 800b0d0:	42a5      	cmp	r5, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x78>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	4421      	add	r1, r4
 800b0d8:	1854      	adds	r4, r2, r1
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1dd      	bne.n	800b09c <_free_r+0x28>
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	4421      	add	r1, r4
 800b0e8:	6011      	str	r1, [r2, #0]
 800b0ea:	e7d7      	b.n	800b09c <_free_r+0x28>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x80>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	e7d3      	b.n	800b09c <_free_r+0x28>
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	1961      	adds	r1, r4, r5
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7c7      	b.n	800b09c <_free_r+0x28>
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	20007f70 	.word	0x20007f70

0800b114 <_realloc_r>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	4607      	mov	r7, r0
 800b118:	4614      	mov	r4, r2
 800b11a:	460e      	mov	r6, r1
 800b11c:	b921      	cbnz	r1, 800b128 <_realloc_r+0x14>
 800b11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b122:	4611      	mov	r1, r2
 800b124:	f7fd bc3e 	b.w	80089a4 <_malloc_r>
 800b128:	b922      	cbnz	r2, 800b134 <_realloc_r+0x20>
 800b12a:	f7ff ffa3 	bl	800b074 <_free_r>
 800b12e:	4625      	mov	r5, r4
 800b130:	4628      	mov	r0, r5
 800b132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b134:	f000 f9fa 	bl	800b52c <_malloc_usable_size_r>
 800b138:	42a0      	cmp	r0, r4
 800b13a:	d20f      	bcs.n	800b15c <_realloc_r+0x48>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4638      	mov	r0, r7
 800b140:	f7fd fc30 	bl	80089a4 <_malloc_r>
 800b144:	4605      	mov	r5, r0
 800b146:	2800      	cmp	r0, #0
 800b148:	d0f2      	beq.n	800b130 <_realloc_r+0x1c>
 800b14a:	4631      	mov	r1, r6
 800b14c:	4622      	mov	r2, r4
 800b14e:	f7fd fbf8 	bl	8008942 <memcpy>
 800b152:	4631      	mov	r1, r6
 800b154:	4638      	mov	r0, r7
 800b156:	f7ff ff8d 	bl	800b074 <_free_r>
 800b15a:	e7e9      	b.n	800b130 <_realloc_r+0x1c>
 800b15c:	4635      	mov	r5, r6
 800b15e:	e7e7      	b.n	800b130 <_realloc_r+0x1c>

0800b160 <__ssputs_r>:
 800b160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	688e      	ldr	r6, [r1, #8]
 800b166:	429e      	cmp	r6, r3
 800b168:	4682      	mov	sl, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4690      	mov	r8, r2
 800b16e:	461f      	mov	r7, r3
 800b170:	d838      	bhi.n	800b1e4 <__ssputs_r+0x84>
 800b172:	898a      	ldrh	r2, [r1, #12]
 800b174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b178:	d032      	beq.n	800b1e0 <__ssputs_r+0x80>
 800b17a:	6825      	ldr	r5, [r4, #0]
 800b17c:	6909      	ldr	r1, [r1, #16]
 800b17e:	eba5 0901 	sub.w	r9, r5, r1
 800b182:	6965      	ldr	r5, [r4, #20]
 800b184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b18c:	3301      	adds	r3, #1
 800b18e:	444b      	add	r3, r9
 800b190:	106d      	asrs	r5, r5, #1
 800b192:	429d      	cmp	r5, r3
 800b194:	bf38      	it	cc
 800b196:	461d      	movcc	r5, r3
 800b198:	0553      	lsls	r3, r2, #21
 800b19a:	d531      	bpl.n	800b200 <__ssputs_r+0xa0>
 800b19c:	4629      	mov	r1, r5
 800b19e:	f7fd fc01 	bl	80089a4 <_malloc_r>
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	b950      	cbnz	r0, 800b1bc <__ssputs_r+0x5c>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	f8ca 3000 	str.w	r3, [sl]
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1bc:	6921      	ldr	r1, [r4, #16]
 800b1be:	464a      	mov	r2, r9
 800b1c0:	f7fd fbbf 	bl	8008942 <memcpy>
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ce:	81a3      	strh	r3, [r4, #12]
 800b1d0:	6126      	str	r6, [r4, #16]
 800b1d2:	6165      	str	r5, [r4, #20]
 800b1d4:	444e      	add	r6, r9
 800b1d6:	eba5 0509 	sub.w	r5, r5, r9
 800b1da:	6026      	str	r6, [r4, #0]
 800b1dc:	60a5      	str	r5, [r4, #8]
 800b1de:	463e      	mov	r6, r7
 800b1e0:	42be      	cmp	r6, r7
 800b1e2:	d900      	bls.n	800b1e6 <__ssputs_r+0x86>
 800b1e4:	463e      	mov	r6, r7
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	6820      	ldr	r0, [r4, #0]
 800b1ea:	4641      	mov	r1, r8
 800b1ec:	f7fd fbb7 	bl	800895e <memmove>
 800b1f0:	68a3      	ldr	r3, [r4, #8]
 800b1f2:	6822      	ldr	r2, [r4, #0]
 800b1f4:	1b9b      	subs	r3, r3, r6
 800b1f6:	4432      	add	r2, r6
 800b1f8:	60a3      	str	r3, [r4, #8]
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	e7db      	b.n	800b1b8 <__ssputs_r+0x58>
 800b200:	462a      	mov	r2, r5
 800b202:	f7ff ff87 	bl	800b114 <_realloc_r>
 800b206:	4606      	mov	r6, r0
 800b208:	2800      	cmp	r0, #0
 800b20a:	d1e1      	bne.n	800b1d0 <__ssputs_r+0x70>
 800b20c:	6921      	ldr	r1, [r4, #16]
 800b20e:	4650      	mov	r0, sl
 800b210:	f7ff ff30 	bl	800b074 <_free_r>
 800b214:	e7c7      	b.n	800b1a6 <__ssputs_r+0x46>
	...

0800b218 <_svfiprintf_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4698      	mov	r8, r3
 800b21e:	898b      	ldrh	r3, [r1, #12]
 800b220:	061b      	lsls	r3, r3, #24
 800b222:	b09d      	sub	sp, #116	; 0x74
 800b224:	4607      	mov	r7, r0
 800b226:	460d      	mov	r5, r1
 800b228:	4614      	mov	r4, r2
 800b22a:	d50e      	bpl.n	800b24a <_svfiprintf_r+0x32>
 800b22c:	690b      	ldr	r3, [r1, #16]
 800b22e:	b963      	cbnz	r3, 800b24a <_svfiprintf_r+0x32>
 800b230:	2140      	movs	r1, #64	; 0x40
 800b232:	f7fd fbb7 	bl	80089a4 <_malloc_r>
 800b236:	6028      	str	r0, [r5, #0]
 800b238:	6128      	str	r0, [r5, #16]
 800b23a:	b920      	cbnz	r0, 800b246 <_svfiprintf_r+0x2e>
 800b23c:	230c      	movs	r3, #12
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	e0d1      	b.n	800b3ea <_svfiprintf_r+0x1d2>
 800b246:	2340      	movs	r3, #64	; 0x40
 800b248:	616b      	str	r3, [r5, #20]
 800b24a:	2300      	movs	r3, #0
 800b24c:	9309      	str	r3, [sp, #36]	; 0x24
 800b24e:	2320      	movs	r3, #32
 800b250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b254:	f8cd 800c 	str.w	r8, [sp, #12]
 800b258:	2330      	movs	r3, #48	; 0x30
 800b25a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b404 <_svfiprintf_r+0x1ec>
 800b25e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b262:	f04f 0901 	mov.w	r9, #1
 800b266:	4623      	mov	r3, r4
 800b268:	469a      	mov	sl, r3
 800b26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b26e:	b10a      	cbz	r2, 800b274 <_svfiprintf_r+0x5c>
 800b270:	2a25      	cmp	r2, #37	; 0x25
 800b272:	d1f9      	bne.n	800b268 <_svfiprintf_r+0x50>
 800b274:	ebba 0b04 	subs.w	fp, sl, r4
 800b278:	d00b      	beq.n	800b292 <_svfiprintf_r+0x7a>
 800b27a:	465b      	mov	r3, fp
 800b27c:	4622      	mov	r2, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff ff6d 	bl	800b160 <__ssputs_r>
 800b286:	3001      	adds	r0, #1
 800b288:	f000 80aa 	beq.w	800b3e0 <_svfiprintf_r+0x1c8>
 800b28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b28e:	445a      	add	r2, fp
 800b290:	9209      	str	r2, [sp, #36]	; 0x24
 800b292:	f89a 3000 	ldrb.w	r3, [sl]
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 80a2 	beq.w	800b3e0 <_svfiprintf_r+0x1c8>
 800b29c:	2300      	movs	r3, #0
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a6:	f10a 0a01 	add.w	sl, sl, #1
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	9307      	str	r3, [sp, #28]
 800b2ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b4:	4654      	mov	r4, sl
 800b2b6:	2205      	movs	r2, #5
 800b2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2bc:	4851      	ldr	r0, [pc, #324]	; (800b404 <_svfiprintf_r+0x1ec>)
 800b2be:	f7f4 ff8f 	bl	80001e0 <memchr>
 800b2c2:	9a04      	ldr	r2, [sp, #16]
 800b2c4:	b9d8      	cbnz	r0, 800b2fe <_svfiprintf_r+0xe6>
 800b2c6:	06d0      	lsls	r0, r2, #27
 800b2c8:	bf44      	itt	mi
 800b2ca:	2320      	movmi	r3, #32
 800b2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d0:	0711      	lsls	r1, r2, #28
 800b2d2:	bf44      	itt	mi
 800b2d4:	232b      	movmi	r3, #43	; 0x2b
 800b2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2da:	f89a 3000 	ldrb.w	r3, [sl]
 800b2de:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e0:	d015      	beq.n	800b30e <_svfiprintf_r+0xf6>
 800b2e2:	9a07      	ldr	r2, [sp, #28]
 800b2e4:	4654      	mov	r4, sl
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	f04f 0c0a 	mov.w	ip, #10
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f2:	3b30      	subs	r3, #48	; 0x30
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	d94e      	bls.n	800b396 <_svfiprintf_r+0x17e>
 800b2f8:	b1b0      	cbz	r0, 800b328 <_svfiprintf_r+0x110>
 800b2fa:	9207      	str	r2, [sp, #28]
 800b2fc:	e014      	b.n	800b328 <_svfiprintf_r+0x110>
 800b2fe:	eba0 0308 	sub.w	r3, r0, r8
 800b302:	fa09 f303 	lsl.w	r3, r9, r3
 800b306:	4313      	orrs	r3, r2
 800b308:	9304      	str	r3, [sp, #16]
 800b30a:	46a2      	mov	sl, r4
 800b30c:	e7d2      	b.n	800b2b4 <_svfiprintf_r+0x9c>
 800b30e:	9b03      	ldr	r3, [sp, #12]
 800b310:	1d19      	adds	r1, r3, #4
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	9103      	str	r1, [sp, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	bfbb      	ittet	lt
 800b31a:	425b      	neglt	r3, r3
 800b31c:	f042 0202 	orrlt.w	r2, r2, #2
 800b320:	9307      	strge	r3, [sp, #28]
 800b322:	9307      	strlt	r3, [sp, #28]
 800b324:	bfb8      	it	lt
 800b326:	9204      	strlt	r2, [sp, #16]
 800b328:	7823      	ldrb	r3, [r4, #0]
 800b32a:	2b2e      	cmp	r3, #46	; 0x2e
 800b32c:	d10c      	bne.n	800b348 <_svfiprintf_r+0x130>
 800b32e:	7863      	ldrb	r3, [r4, #1]
 800b330:	2b2a      	cmp	r3, #42	; 0x2a
 800b332:	d135      	bne.n	800b3a0 <_svfiprintf_r+0x188>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	1d1a      	adds	r2, r3, #4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	9203      	str	r2, [sp, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	bfb8      	it	lt
 800b340:	f04f 33ff 	movlt.w	r3, #4294967295
 800b344:	3402      	adds	r4, #2
 800b346:	9305      	str	r3, [sp, #20]
 800b348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b414 <_svfiprintf_r+0x1fc>
 800b34c:	7821      	ldrb	r1, [r4, #0]
 800b34e:	2203      	movs	r2, #3
 800b350:	4650      	mov	r0, sl
 800b352:	f7f4 ff45 	bl	80001e0 <memchr>
 800b356:	b140      	cbz	r0, 800b36a <_svfiprintf_r+0x152>
 800b358:	2340      	movs	r3, #64	; 0x40
 800b35a:	eba0 000a 	sub.w	r0, r0, sl
 800b35e:	fa03 f000 	lsl.w	r0, r3, r0
 800b362:	9b04      	ldr	r3, [sp, #16]
 800b364:	4303      	orrs	r3, r0
 800b366:	3401      	adds	r4, #1
 800b368:	9304      	str	r3, [sp, #16]
 800b36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36e:	4826      	ldr	r0, [pc, #152]	; (800b408 <_svfiprintf_r+0x1f0>)
 800b370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b374:	2206      	movs	r2, #6
 800b376:	f7f4 ff33 	bl	80001e0 <memchr>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d038      	beq.n	800b3f0 <_svfiprintf_r+0x1d8>
 800b37e:	4b23      	ldr	r3, [pc, #140]	; (800b40c <_svfiprintf_r+0x1f4>)
 800b380:	bb1b      	cbnz	r3, 800b3ca <_svfiprintf_r+0x1b2>
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	3307      	adds	r3, #7
 800b386:	f023 0307 	bic.w	r3, r3, #7
 800b38a:	3308      	adds	r3, #8
 800b38c:	9303      	str	r3, [sp, #12]
 800b38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b390:	4433      	add	r3, r6
 800b392:	9309      	str	r3, [sp, #36]	; 0x24
 800b394:	e767      	b.n	800b266 <_svfiprintf_r+0x4e>
 800b396:	fb0c 3202 	mla	r2, ip, r2, r3
 800b39a:	460c      	mov	r4, r1
 800b39c:	2001      	movs	r0, #1
 800b39e:	e7a5      	b.n	800b2ec <_svfiprintf_r+0xd4>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	3401      	adds	r4, #1
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	f04f 0c0a 	mov.w	ip, #10
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b2:	3a30      	subs	r2, #48	; 0x30
 800b3b4:	2a09      	cmp	r2, #9
 800b3b6:	d903      	bls.n	800b3c0 <_svfiprintf_r+0x1a8>
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d0c5      	beq.n	800b348 <_svfiprintf_r+0x130>
 800b3bc:	9105      	str	r1, [sp, #20]
 800b3be:	e7c3      	b.n	800b348 <_svfiprintf_r+0x130>
 800b3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e7f0      	b.n	800b3ac <_svfiprintf_r+0x194>
 800b3ca:	ab03      	add	r3, sp, #12
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	462a      	mov	r2, r5
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <_svfiprintf_r+0x1f8>)
 800b3d2:	a904      	add	r1, sp, #16
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f7fd fd39 	bl	8008e4c <_printf_float>
 800b3da:	1c42      	adds	r2, r0, #1
 800b3dc:	4606      	mov	r6, r0
 800b3de:	d1d6      	bne.n	800b38e <_svfiprintf_r+0x176>
 800b3e0:	89ab      	ldrh	r3, [r5, #12]
 800b3e2:	065b      	lsls	r3, r3, #25
 800b3e4:	f53f af2c 	bmi.w	800b240 <_svfiprintf_r+0x28>
 800b3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ea:	b01d      	add	sp, #116	; 0x74
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	ab03      	add	r3, sp, #12
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4b06      	ldr	r3, [pc, #24]	; (800b410 <_svfiprintf_r+0x1f8>)
 800b3f8:	a904      	add	r1, sp, #16
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	f7fd ffca 	bl	8009394 <_printf_i>
 800b400:	e7eb      	b.n	800b3da <_svfiprintf_r+0x1c2>
 800b402:	bf00      	nop
 800b404:	0800c504 	.word	0x0800c504
 800b408:	0800c50e 	.word	0x0800c50e
 800b40c:	08008e4d 	.word	0x08008e4d
 800b410:	0800b161 	.word	0x0800b161
 800b414:	0800c50a 	.word	0x0800c50a

0800b418 <_read_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_read_r+0x20>)
 800b41c:	4604      	mov	r4, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	2200      	movs	r2, #0
 800b424:	602a      	str	r2, [r5, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f6 fe62 	bl	80020f0 <_read>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_read_r+0x1e>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_read_r+0x1e>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	200085dc 	.word	0x200085dc

0800b43c <_raise_r>:
 800b43c:	291f      	cmp	r1, #31
 800b43e:	b538      	push	{r3, r4, r5, lr}
 800b440:	4604      	mov	r4, r0
 800b442:	460d      	mov	r5, r1
 800b444:	d904      	bls.n	800b450 <_raise_r+0x14>
 800b446:	2316      	movs	r3, #22
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b452:	b112      	cbz	r2, 800b45a <_raise_r+0x1e>
 800b454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b458:	b94b      	cbnz	r3, 800b46e <_raise_r+0x32>
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 f830 	bl	800b4c0 <_getpid_r>
 800b460:	462a      	mov	r2, r5
 800b462:	4601      	mov	r1, r0
 800b464:	4620      	mov	r0, r4
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f000 b817 	b.w	800b49c <_kill_r>
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d00a      	beq.n	800b488 <_raise_r+0x4c>
 800b472:	1c59      	adds	r1, r3, #1
 800b474:	d103      	bne.n	800b47e <_raise_r+0x42>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	2001      	movs	r0, #1
 800b47c:	e7e7      	b.n	800b44e <_raise_r+0x12>
 800b47e:	2400      	movs	r4, #0
 800b480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b484:	4628      	mov	r0, r5
 800b486:	4798      	blx	r3
 800b488:	2000      	movs	r0, #0
 800b48a:	e7e0      	b.n	800b44e <_raise_r+0x12>

0800b48c <raise>:
 800b48c:	4b02      	ldr	r3, [pc, #8]	; (800b498 <raise+0xc>)
 800b48e:	4601      	mov	r1, r0
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	f7ff bfd3 	b.w	800b43c <_raise_r>
 800b496:	bf00      	nop
 800b498:	20000034 	.word	0x20000034

0800b49c <_kill_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	; (800b4bc <_kill_r+0x20>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f7f6 fe07 	bl	80020bc <_kill>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d102      	bne.n	800b4b8 <_kill_r+0x1c>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b103      	cbz	r3, 800b4b8 <_kill_r+0x1c>
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	200085dc 	.word	0x200085dc

0800b4c0 <_getpid_r>:
 800b4c0:	f7f6 bdf4 	b.w	80020ac <_getpid>

0800b4c4 <_fstat_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4d07      	ldr	r5, [pc, #28]	; (800b4e4 <_fstat_r+0x20>)
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	f7f6 fe52 	bl	800217a <_fstat>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	d102      	bne.n	800b4e0 <_fstat_r+0x1c>
 800b4da:	682b      	ldr	r3, [r5, #0]
 800b4dc:	b103      	cbz	r3, 800b4e0 <_fstat_r+0x1c>
 800b4de:	6023      	str	r3, [r4, #0]
 800b4e0:	bd38      	pop	{r3, r4, r5, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200085dc 	.word	0x200085dc

0800b4e8 <_isatty_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d06      	ldr	r5, [pc, #24]	; (800b504 <_isatty_r+0x1c>)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	602b      	str	r3, [r5, #0]
 800b4f4:	f7f6 fe51 	bl	800219a <_isatty>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d102      	bne.n	800b502 <_isatty_r+0x1a>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	b103      	cbz	r3, 800b502 <_isatty_r+0x1a>
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	200085dc 	.word	0x200085dc

0800b508 <__ascii_mbtowc>:
 800b508:	b082      	sub	sp, #8
 800b50a:	b901      	cbnz	r1, 800b50e <__ascii_mbtowc+0x6>
 800b50c:	a901      	add	r1, sp, #4
 800b50e:	b142      	cbz	r2, 800b522 <__ascii_mbtowc+0x1a>
 800b510:	b14b      	cbz	r3, 800b526 <__ascii_mbtowc+0x1e>
 800b512:	7813      	ldrb	r3, [r2, #0]
 800b514:	600b      	str	r3, [r1, #0]
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	1e10      	subs	r0, r2, #0
 800b51a:	bf18      	it	ne
 800b51c:	2001      	movne	r0, #1
 800b51e:	b002      	add	sp, #8
 800b520:	4770      	bx	lr
 800b522:	4610      	mov	r0, r2
 800b524:	e7fb      	b.n	800b51e <__ascii_mbtowc+0x16>
 800b526:	f06f 0001 	mvn.w	r0, #1
 800b52a:	e7f8      	b.n	800b51e <__ascii_mbtowc+0x16>

0800b52c <_malloc_usable_size_r>:
 800b52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b530:	1f18      	subs	r0, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	bfbc      	itt	lt
 800b536:	580b      	ldrlt	r3, [r1, r0]
 800b538:	18c0      	addlt	r0, r0, r3
 800b53a:	4770      	bx	lr

0800b53c <__ascii_wctomb>:
 800b53c:	b149      	cbz	r1, 800b552 <__ascii_wctomb+0x16>
 800b53e:	2aff      	cmp	r2, #255	; 0xff
 800b540:	bf85      	ittet	hi
 800b542:	238a      	movhi	r3, #138	; 0x8a
 800b544:	6003      	strhi	r3, [r0, #0]
 800b546:	700a      	strbls	r2, [r1, #0]
 800b548:	f04f 30ff 	movhi.w	r0, #4294967295
 800b54c:	bf98      	it	ls
 800b54e:	2001      	movls	r0, #1
 800b550:	4770      	bx	lr
 800b552:	4608      	mov	r0, r1
 800b554:	4770      	bx	lr
	...

0800b558 <_init>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	bf00      	nop
 800b55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55e:	bc08      	pop	{r3}
 800b560:	469e      	mov	lr, r3
 800b562:	4770      	bx	lr

0800b564 <_fini>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr
